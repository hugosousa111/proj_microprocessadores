

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Sun Dec 10 09:18:46 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1,inline
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	text22,global,reloc=2,class=CODE,delta=1
    33                           	psect	text23,global,reloc=2,class=CODE,delta=1
    34                           	psect	text24,global,reloc=2,class=CODE,delta=1
    35                           	psect	text25,global,reloc=2,class=CODE,delta=1
    36                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text29,global,reloc=2,class=CODE,delta=1
    40                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    44                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           ; Version 1.44
    47                           ; Generated 14/09/2017 GMT
    48                           ; 
    49                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4550 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	smallconst
    82  000800                     __psmallconst:
    83                           	opt stack 0
    84  000800  00                 	db	0
    85  000801                     _dpowers:
    86                           	opt stack 0
    87  000801  0001               	dw	1
    88  000803  0000               	dw	0
    89  000805  000A               	dw	10
    90  000807  0000               	dw	0
    91  000809  0064               	dw	100
    92  00080B  0000               	dw	0
    93  00080D  03E8               	dw	1000
    94  00080F  0000               	dw	0
    95  000811  2710               	dw	10000
    96  000813  0000               	dw	0
    97  000815  86A0               	dw	34464
    98  000817  0001               	dw	1
    99  000819  4240               	dw	16960
   100  00081B  000F               	dw	15
   101  00081D  9680               	dw	38528
   102  00081F  0098               	dw	152
   103  000821  E100               	dw	57600
   104  000823  05F5               	dw	1525
   105  000825  CA00               	dw	51712
   106  000827  3B9A               	dw	15258
   107  000829                     __end_of_dpowers:
   108                           	opt stack 0
   109  000829                     __powers_:
   110                           	opt stack 0
   111  000829  00                 	db	0
   112  00082A  80                 	db	128
   113  00082B  3F                 	db	63
   114  00082C  00                 	db	0
   115  00082D  20                 	db	32
   116  00082E  41                 	db	65
   117  00082F  00                 	db	0
   118  000830  C8                 	db	200
   119  000831  42                 	db	66
   120  000832  00                 	db	0
   121  000833  7A                 	db	122
   122  000834  44                 	db	68
   123  000835  40                 	db	64
   124  000836  1C                 	db	28
   125  000837  46                 	db	70
   126  000838  50                 	db	80
   127  000839  C3                 	db	195
   128  00083A  47                 	db	71
   129  00083B  24                 	db	36
   130  00083C  74                 	db	116
   131  00083D  49                 	db	73
   132  00083E  97                 	db	151
   133  00083F  18                 	db	24
   134  000840  4B                 	db	75
   135  000841  BC                 	db	188
   136  000842  BE                 	db	190
   137  000843  4C                 	db	76
   138  000844  6B                 	db	107
   139  000845  6E                 	db	110
   140  000846  4E                 	db	78
   141  000847  03                 	db	3
   142  000848  15                 	db	21
   143  000849  50                 	db	80
   144  00084A  79                 	db	121
   145  00084B  AD                 	db	173
   146  00084C  60                 	db	96
   147  00084D  F3                 	db	243
   148  00084E  49                 	db	73
   149  00084F  71                 	db	113
   150  000850                     __end_of__powers_:
   151                           	opt stack 0
   152  000850                     __npowers_:
   153                           	opt stack 0
   154  000850  00                 	db	0
   155  000851  80                 	db	128
   156  000852  3F                 	db	63
   157  000853  CD                 	db	205
   158  000854  CC                 	db	204
   159  000855  3D                 	db	61
   160  000856  D7                 	db	215
   161  000857  23                 	db	35
   162  000858  3C                 	db	60
   163  000859  12                 	db	18
   164  00085A  83                 	db	131
   165  00085B  3A                 	db	58
   166  00085C  B7                 	db	183
   167  00085D  D1                 	db	209
   168  00085E  38                 	db	56
   169  00085F  C6                 	db	198
   170  000860  27                 	db	39
   171  000861  37                 	db	55
   172  000862  38                 	db	56
   173  000863  86                 	db	134
   174  000864  35                 	db	53
   175  000865  C0                 	db	192
   176  000866  D6                 	db	214
   177  000867  33                 	db	51
   178  000868  CC                 	db	204
   179  000869  2B                 	db	43
   180  00086A  32                 	db	50
   181  00086B  70                 	db	112
   182  00086C  89                 	db	137
   183  00086D  30                 	db	48
   184  00086E  E7                 	db	231
   185  00086F  DB                 	db	219
   186  000870  2E                 	db	46
   187  000871  E5                 	db	229
   188  000872  3C                 	db	60
   189  000873  1E                 	db	30
   190  000874  42                 	db	66
   191  000875  A2                 	db	162
   192  000876  0D                 	db	13
   193  000877                     __end_of__npowers_:
   194                           	opt stack 0
   195  000877                     STR_1:
   196  000877  56                 	db	86	;'V'
   197  000878  6F                 	db	111	;'o'
   198  000879  6C                 	db	108	;'l'
   199  00087A  74                 	db	116	;'t'
   200  00087B  7A                 	db	122	;'z'
   201  00087C  20                 	db	32
   202  00087D  3D                 	db	61	;'='
   203  00087E  20                 	db	32
   204  00087F  25                 	db	37
   205  000880  2E                 	db	46
   206  000881  32                 	db	50	;'2'
   207  000882  66                 	db	102	;'f'
   208  000883  00                 	db	0
   209                           
   210                           ; #config settings
   211  000884  00                 	db	0	; dummy byte at the end
   212  0000                     
   213                           	psect	nvBANK0
   214  00008B                     __pnvBANK0:
   215                           	opt stack 0
   216  00008B                     _duty:
   217                           	opt stack 0
   218  00008B                     	ds	1
   219  0000                     _ADRES	set	4035
   220  0000                     _PORTDbits	set	3971
   221  0000                     _TMR2	set	4044
   222  0000                     _PR2	set	4043
   223  0000                     _PORTCbits	set	3970
   224  0000                     _PORTC	set	3970
   225  0000                     _PORTA	set	3968
   226  0000                     _PORTD	set	3971
   227  0000                     _TRISD	set	3989
   228  0000                     _TRISC	set	3988
   229  0000                     _TRISA	set	3986
   230  0000                     _ADCON2	set	4032
   231  0000                     _ADCON0	set	4034
   232  0000                     _ADCON1	set	4033
   233  0000                     _T2CON	set	4042
   234  0000                     _OSCCON	set	4051
   235  0000                     _ADCON0bits	set	4034
   236  0000                     _TMR2IF	set	31985
   237  0000                     _TMR2ON	set	32338
   238  0000                     _TMR2IE	set	31977
   239  0000                     _PEIE	set	32662
   240  0000                     _GIE	set	32663
   241                           
   242                           	psect	cinit
   243  0023B2                     __pcinit:
   244                           	opt stack 0
   245  0023B2                     start_initialization:
   246                           	opt stack 0
   247  0023B2                     __initialization:
   248                           	opt stack 0
   249  0023B2                     end_of_initialization:
   250                           	opt stack 0
   251  0023B2                     __end_of__initialization:
   252                           	opt stack 0
   253  0023B2  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   254  0023B4  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   255  0023B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   256  0023B8  6EF8               	movwf	tblptru,c
   257  0023BA  0100               	movlb	0
   258  0023BC  EFF6  F00E         	goto	_main	;jump to C main() function
   259                           tblptru	equ	0xFF8
   260                           
   261                           	psect	cstackBANK0
   262  000060                     __pcstackBANK0:
   263                           	opt stack 0
   264  000060                     ___ftadd@sign:
   265                           	opt stack 0
   266  000060                     ___fttol@sign1:
   267                           	opt stack 0
   268                           
   269                           ; 1 bytes @ 0x0
   270  000060                     	ds	1
   271  000061                     ___ftadd@exp2:
   272                           	opt stack 0
   273  000061                     ___fttol@lval:
   274                           	opt stack 0
   275                           
   276                           ; 4 bytes @ 0x1
   277  000061                     	ds	1
   278  000062                     ___ftadd@exp1:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x2
   282  000062                     	ds	1
   283  000063                     ?___ftsub:
   284                           	opt stack 0
   285  000063                     ___ftsub@f1:
   286                           	opt stack 0
   287                           
   288                           ; 3 bytes @ 0x3
   289  000063                     	ds	2
   290  000065                     ___fttol@exp1:
   291                           	opt stack 0
   292                           
   293                           ; 1 bytes @ 0x5
   294  000065                     	ds	1
   295  000066                     ___ftsub@f2:
   296                           	opt stack 0
   297                           
   298                           ; 3 bytes @ 0x6
   299  000066                     	ds	3
   300  000069                     ?_printf:
   301                           	opt stack 0
   302  000069                     printf@f:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x9
   306  000069                     	ds	5
   307  00006E                     ??_printf:
   308                           
   309                           ; 1 bytes @ 0xE
   310  00006E                     	ds	6
   311  000074                     _printf$936:
   312                           	opt stack 0
   313                           
   314                           ; 3 bytes @ 0x14
   315  000074                     	ds	3
   316  000077                     printf@ap:
   317                           	opt stack 0
   318                           
   319                           ; 2 bytes @ 0x17
   320  000077                     	ds	2
   321  000079                     printf@flag:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0x19
   325  000079                     	ds	2
   326  00007B                     printf@val:
   327                           	opt stack 0
   328                           
   329                           ; 4 bytes @ 0x1B
   330  00007B                     	ds	4
   331  00007F                     printf@exp:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0x1F
   335  00007F                     	ds	2
   336  000081                     printf@tmpval:
   337                           	opt stack 0
   338                           
   339                           ; 4 bytes @ 0x21
   340  000081                     	ds	4
   341  000085                     printf@prec:
   342                           	opt stack 0
   343                           
   344                           ; 2 bytes @ 0x25
   345  000085                     	ds	2
   346  000087                     printf@fval:
   347                           	opt stack 0
   348                           
   349                           ; 3 bytes @ 0x27
   350  000087                     	ds	3
   351  00008A                     printf@c:
   352                           	opt stack 0
   353                           
   354                           ; 1 bytes @ 0x2A
   355  00008A                     	ds	1
   356                           tblptru	equ	0xFF8
   357                           
   358                           	psect	cstackCOMRAM
   359  000001                     __pcstackCOMRAM:
   360                           	opt stack 0
   361  000001                     ??_tmr2:
   362  000001                     
   363                           ; 1 bytes @ 0x0
   364  000001                     	ds	19
   365  000014                     ??_isdigit:
   366  000014                     ??_envia_nibble_lcd:
   367  000014                     ?_ADC_Read:
   368                           	opt stack 0
   369  000014                     ?___awmod:
   370                           	opt stack 0
   371  000014                     ?___ftpack:
   372                           	opt stack 0
   373  000014                     ?___ftneg:
   374                           	opt stack 0
   375  000014                     ?__tdiv_to_l_:
   376                           	opt stack 0
   377  000014                     ?__div_to_l_:
   378                           	opt stack 0
   379  000014                     ?___lldiv:
   380                           	opt stack 0
   381  000014                     ?___llmod:
   382                           	opt stack 0
   383  000014                     ___awmod@dividend:
   384                           	opt stack 0
   385  000014                     __div_to_l_@f1:
   386                           	opt stack 0
   387  000014                     ___ftpack@arg:
   388                           	opt stack 0
   389  000014                     __tdiv_to_l_@f1:
   390                           	opt stack 0
   391  000014                     ___ftge@ff1:
   392                           	opt stack 0
   393  000014                     ___ftneg@f1:
   394                           	opt stack 0
   395  000014                     ___lldiv@dividend:
   396                           	opt stack 0
   397  000014                     ___llmod@dividend:
   398                           	opt stack 0
   399                           
   400                           ; 4 bytes @ 0x13
   401  000014                     	ds	1
   402  000015                     envia_nibble_lcd@dado:
   403                           	opt stack 0
   404  000015                     _isdigit$595:
   405                           	opt stack 0
   406                           
   407                           ; 1 bytes @ 0x14
   408  000015                     	ds	1
   409  000016                     envia_byte_lcd@dado:
   410                           	opt stack 0
   411  000016                     isdigit@c:
   412                           	opt stack 0
   413  000016                     ADC_Read@aux:
   414                           	opt stack 0
   415  000016                     ___awmod@divisor:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x15
   419  000016                     	ds	1
   420  000017                     envia_byte_lcd@endereco:
   421                           	opt stack 0
   422  000017                     ___ftpack@exp:
   423                           	opt stack 0
   424  000017                     __div_to_l_@f2:
   425                           	opt stack 0
   426  000017                     __tdiv_to_l_@f2:
   427                           	opt stack 0
   428  000017                     ___ftge@ff2:
   429                           	opt stack 0
   430                           
   431                           ; 3 bytes @ 0x16
   432  000017                     	ds	1
   433  000018                     ??_limpa_lcd:
   434  000018                     escreve_lcd@c:
   435                           	opt stack 0
   436  000018                     caracter_inicio@coluna:
   437                           	opt stack 0
   438  000018                     ___awmod@counter:
   439                           	opt stack 0
   440  000018                     ___ftpack@sign:
   441                           	opt stack 0
   442  000018                     ___lldiv@divisor:
   443                           	opt stack 0
   444  000018                     ___llmod@divisor:
   445                           	opt stack 0
   446                           
   447                           ; 4 bytes @ 0x17
   448  000018                     	ds	1
   449  000019                     ??_inicializa_lcd:
   450  000019                     ??___ftpack:
   451  000019                     putch@data:
   452                           	opt stack 0
   453  000019                     caracter_inicio@linha:
   454                           	opt stack 0
   455  000019                     ___awmod@sign:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0x18
   459  000019                     	ds	1
   460  00001A                     ??__tdiv_to_l_:
   461  00001A                     ??___ftge:
   462  00001A                     ?___awdiv:
   463                           	opt stack 0
   464  00001A                     caracter_inicio@posicao:
   465                           	opt stack 0
   466  00001A                     ___awdiv@dividend:
   467                           	opt stack 0
   468  00001A                     __div_to_l_@quot:
   469                           	opt stack 0
   470                           
   471                           ; 4 bytes @ 0x19
   472  00001A                     	ds	2
   473  00001C                     ?___lbtoft:
   474                           	opt stack 0
   475  00001C                     ?___lltoft:
   476                           	opt stack 0
   477  00001C                     ___llmod@counter:
   478                           	opt stack 0
   479  00001C                     ___awdiv@divisor:
   480                           	opt stack 0
   481  00001C                     ___lldiv@quotient:
   482                           	opt stack 0
   483  00001C                     ___lltoft@c:
   484                           	opt stack 0
   485                           
   486                           ; 4 bytes @ 0x1B
   487  00001C                     	ds	1
   488  00001D                     __tdiv_to_l_@quot:
   489                           	opt stack 0
   490                           
   491                           ; 4 bytes @ 0x1C
   492  00001D                     	ds	1
   493  00001E                     ___awdiv@counter:
   494                           	opt stack 0
   495  00001E                     __div_to_l_@cntr:
   496                           	opt stack 0
   497                           
   498                           ; 1 bytes @ 0x1D
   499  00001E                     	ds	1
   500  00001F                     ___awdiv@sign:
   501                           	opt stack 0
   502  00001F                     __div_to_l_@exp1:
   503                           	opt stack 0
   504  00001F                     ___lbtoft@c:
   505                           	opt stack 0
   506                           
   507                           ; 1 bytes @ 0x1E
   508  00001F                     	ds	1
   509  000020                     ??___lltoft:
   510  000020                     ?___ftdiv:
   511                           	opt stack 0
   512  000020                     ___lldiv@counter:
   513                           	opt stack 0
   514  000020                     ___awdiv@quotient:
   515                           	opt stack 0
   516  000020                     ___ftdiv@f1:
   517                           	opt stack 0
   518                           
   519                           ; 3 bytes @ 0x1F
   520  000020                     	ds	1
   521  000021                     __tdiv_to_l_@cntr:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x20
   525  000021                     	ds	1
   526  000022                     ?___wmul:
   527                           	opt stack 0
   528  000022                     __tdiv_to_l_@exp1:
   529                           	opt stack 0
   530  000022                     ___wmul@multiplier:
   531                           	opt stack 0
   532                           
   533                           ; 2 bytes @ 0x21
   534  000022                     	ds	1
   535  000023                     ___ftdiv@f2:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x22
   539  000023                     	ds	1
   540  000024                     ___lltoft@exp:
   541                           	opt stack 0
   542  000024                     ___wmul@multiplicand:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x23
   546  000024                     	ds	2
   547  000026                     ??___ftdiv:
   548  000026                     ___wmul@product:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x25
   552  000026                     	ds	2
   553  000028                     ?___ftmul:
   554                           	opt stack 0
   555  000028                     ___ftmul@f1:
   556                           	opt stack 0
   557                           
   558                           ; 3 bytes @ 0x27
   559  000028                     	ds	1
   560  000029                     ___ftdiv@cntr:
   561                           	opt stack 0
   562                           
   563                           ; 1 bytes @ 0x28
   564  000029                     	ds	1
   565  00002A                     ___ftdiv@f3:
   566                           	opt stack 0
   567                           
   568                           ; 3 bytes @ 0x29
   569  00002A                     	ds	1
   570  00002B                     ___ftmul@f2:
   571                           	opt stack 0
   572                           
   573                           ; 3 bytes @ 0x2A
   574  00002B                     	ds	2
   575  00002D                     ___ftdiv@exp:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x2C
   579  00002D                     	ds	1
   580  00002E                     ??___ftmul:
   581  00002E                     ___ftdiv@sign:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x2D
   585  00002E                     	ds	3
   586  000031                     ___ftmul@exp:
   587                           	opt stack 0
   588                           
   589                           ; 1 bytes @ 0x30
   590  000031                     	ds	1
   591  000032                     ___ftmul@f3_as_product:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x31
   595  000032                     	ds	3
   596  000035                     ___ftmul@cntr:
   597                           	opt stack 0
   598                           
   599                           ; 1 bytes @ 0x34
   600  000035                     	ds	1
   601  000036                     ___ftmul@sign:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x35
   605  000036                     	ds	1
   606  000037                     ?_fround:
   607                           	opt stack 0
   608  000037                     ?_scale:
   609                           	opt stack 0
   610                           
   611                           ; 3 bytes @ 0x36
   612  000037                     	ds	3
   613  00003A                     _fround$934:
   614                           	opt stack 0
   615  00003A                     _scale$935:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x39
   619  00003A                     	ds	3
   620  00003D                     scale@scl:
   621                           	opt stack 0
   622  00003D                     _fround$933:
   623                           	opt stack 0
   624                           
   625                           ; 3 bytes @ 0x3C
   626  00003D                     	ds	1
   627  00003E                     ?___fttol:
   628                           	opt stack 0
   629  00003E                     ___fttol@f1:
   630                           	opt stack 0
   631                           
   632                           ; 3 bytes @ 0x3D
   633  00003E                     	ds	2
   634  000040                     fround@prec:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x3F
   638  000040                     	ds	1
   639  000041                     ?___ftadd:
   640                           	opt stack 0
   641  000041                     ___ftadd@f1:
   642                           	opt stack 0
   643                           
   644                           ; 3 bytes @ 0x40
   645  000041                     	ds	1
   646  000042                     ??___fttol:
   647                           
   648                           ; 1 bytes @ 0x41
   649  000042                     	ds	2
   650  000044                     ___ftadd@f2:
   651                           	opt stack 0
   652                           
   653                           ; 3 bytes @ 0x43
   654  000044                     	ds	3
   655  000047                     ??___ftadd:
   656                           
   657                           ; 1 bytes @ 0x46
   658  000047                     	ds	3
   659  00004A                     tblptru	equ	0xFF8
   660                           
   661                           ; 1 bytes @ 0x49
   662 ;;
   663 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   664 ;;
   665 ;; *************** function _main *****************
   666 ;; Defined at:
   667 ;;		line 89 in file "main.c"
   668 ;; Parameters:    Size  Location     Type
   669 ;;		None
   670 ;; Auto vars:     Size  Location     Type
   671 ;;		None
   672 ;; Return value:  Size  Location     Type
   673 ;;                  1    wreg      void 
   674 ;; Registers used:
   675 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   676 ;; Tracked objects:
   677 ;;		On entry : 0/0
   678 ;;		On exit  : 0/0
   679 ;;		Unchanged: 0/0
   680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   681 ;;      Params:         0       0       0       0       0       0       0       0       0
   682 ;;      Locals:         0       0       0       0       0       0       0       0       0
   683 ;;      Temps:          0       0       0       0       0       0       0       0       0
   684 ;;      Totals:         0       0       0       0       0       0       0       0       0
   685 ;;Total ram usage:        0 bytes
   686 ;; Hardware stack levels required when called:    6
   687 ;; This function calls:
   688 ;;		_ADC_Read
   689 ;;		___ftdiv
   690 ;;		___lbtoft
   691 ;;		_caracter_inicio
   692 ;;		_inicializa_lcd
   693 ;;		_limpa_lcd
   694 ;;		_printf
   695 ;; This function is called by:
   696 ;;		Startup code after reset
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700                           	psect	text0
   701  001DEC                     __ptext0:
   702                           	opt stack 0
   703  001DEC                     _main:
   704                           	opt stack 25
   705                           
   706                           ;main.c: 90: OSCCON = 0b01100000;
   707                           
   708                           ;incstack = 0
   709  001DEC  0E60               	movlw	96
   710  001DEE  6ED3               	movwf	4051,c	;volatile
   711                           
   712                           ;main.c: 91: GIE = 0x01;
   713  001DF0  8EF2               	bsf	intcon,7,c	;volatile
   714                           
   715                           ;main.c: 92: PEIE = 0x01;
   716  001DF2  8CF2               	bsf	intcon,6,c	;volatile
   717                           
   718                           ;main.c: 93: T2CON = 0b01111101;
   719  001DF4  0E7D               	movlw	125
   720  001DF6  6ECA               	movwf	4042,c	;volatile
   721                           
   722                           ;main.c: 94: TMR2IE = 1;
   723  001DF8  829D               	bsf	3997,1,c	;volatile
   724                           
   725                           ;main.c: 95: ADCON1 = 0x8E;
   726  001DFA  0E8E               	movlw	142
   727  001DFC  6EC1               	movwf	4033,c	;volatile
   728                           
   729                           ;main.c: 96: ADCON0 = 0x80;
   730  001DFE  0E80               	movlw	128
   731  001E00  6EC2               	movwf	4034,c	;volatile
   732                           
   733                           ;main.c: 97: ADCON2 = 0b10010110;
   734  001E02  0E96               	movlw	150
   735  001E04  6EC0               	movwf	4032,c	;volatile
   736                           
   737                           ;main.c: 98: ADCON0bits.ADON = 1;
   738  001E06  80C2               	bsf	4034,0,c	;volatile
   739                           
   740                           ;main.c: 99: TRISA = 0x01;
   741  001E08  0E01               	movlw	1
   742  001E0A  6E92               	movwf	3986,c	;volatile
   743                           
   744                           ;main.c: 100: TRISC = 0x00;
   745  001E0C  0E00               	movlw	0
   746  001E0E  6E94               	movwf	3988,c	;volatile
   747                           
   748                           ;main.c: 101: TRISD = 0x00;
   749  001E10  0E00               	movlw	0
   750  001E12  6E95               	movwf	3989,c	;volatile
   751                           
   752                           ;main.c: 102: PORTD = 0;
   753  001E14  0E00               	movlw	0
   754  001E16  6E83               	movwf	3971,c	;volatile
   755                           
   756                           ;main.c: 103: PORTA = 0x00;
   757  001E18  0E00               	movlw	0
   758  001E1A  6E80               	movwf	3968,c	;volatile
   759                           
   760                           ;main.c: 104: PORTC = 0x00;
   761  001E1C  0E00               	movlw	0
   762  001E1E  6E82               	movwf	3970,c	;volatile
   763                           
   764                           ;main.c: 105: duty = 127;
   765  001E20  0E7F               	movlw	127
   766  001E22  0100               	movlb	0	; () banked
   767  001E24  6F8B               	movwf	_duty& (0+255),b
   768                           
   769                           ; BSR set to: 0
   770                           ;main.c: 106: TMR2ON = 1;
   771  001E26  84CA               	bsf	4042,2,c	;volatile
   772                           
   773                           ; BSR set to: 0
   774                           ;main.c: 108: inicializa_lcd();
   775  001E28  EC56  F010         	call	_inicializa_lcd	;wreg free
   776                           
   777                           ;main.c: 109: limpa_lcd();
   778  001E2C  ECC0  F011         	call	_limpa_lcd	;wreg free
   779  001E30                     
   780                           ;main.c: 115: _delay((unsigned long)((500)*(4000000/4000000.0)));
   781  001E30  0EA6               	movlw	166
   782  001E32                     u2737:
   783  001E32  2EE8               	decfsz	wreg,f,c
   784  001E34  D7FE               	bra	u2737
   785  001E36  D000               	nop2	
   786                           
   787                           ;main.c: 116: duty = (unsigned char) (ADC_Read() / 4);
   788  001E38  ECCD  F011         	call	_ADC_Read	;wreg free
   789  001E3C  90D8               	bcf	status,0,c
   790  001E3E  3215               	rrcf	?_ADC_Read+1,f,c
   791  001E40  3214               	rrcf	?_ADC_Read,f,c
   792  001E42  90D8               	bcf	status,0,c
   793  001E44  3215               	rrcf	?_ADC_Read+1,f,c
   794  001E46  3214               	rrcf	?_ADC_Read,f,c
   795  001E48  5014               	movf	?_ADC_Read,w,c
   796  001E4A  0100               	movlb	0	; () banked
   797  001E4C  6F8B               	movwf	_duty& (0+255),b
   798                           
   799                           ; BSR set to: 0
   800                           ;main.c: 118: caracter_inicio(1, 3);
   801  001E4E  0E03               	movlw	3
   802  001E50  6E18               	movwf	caracter_inicio@coluna,c
   803  001E52  0E01               	movlw	1
   804  001E54  EC63  F011         	call	_caracter_inicio
   805                           
   806                           ;main.c: 126: printf("Voltz = %.2f", duty / 51.0);
   807  001E58  0E77               	movlw	low STR_1
   808  001E5A  0100               	movlb	0	; () banked
   809  001E5C  6F69               	movwf	printf@f& (0+255),b
   810  001E5E  0E08               	movlw	high STR_1
   811  001E60  6F6A               	movwf	(printf@f+1)& (0+255),b
   812  001E62  518B               	movf	_duty& (0+255),w,b
   813  001E64  EC9F  F011         	call	___lbtoft
   814  001E68  C01C  F020         	movff	?___lbtoft,___ftdiv@f1
   815  001E6C  C01D  F021         	movff	?___lbtoft+1,___ftdiv@f1+1
   816  001E70  C01E  F022         	movff	?___lbtoft+2,___ftdiv@f1+2
   817  001E74  0E00               	movlw	0
   818  001E76  6E23               	movwf	___ftdiv@f2,c
   819  001E78  0E4C               	movlw	76
   820  001E7A  6E24               	movwf	___ftdiv@f2+1,c
   821  001E7C  0E42               	movlw	66
   822  001E7E  6E25               	movwf	___ftdiv@f2+2,c
   823  001E80  ECCD  F00D         	call	___ftdiv	;wreg free
   824  001E84  C020  F06B         	movff	?___ftdiv,?_printf+2
   825  001E88  C021  F06C         	movff	?___ftdiv+1,?_printf+3
   826  001E8C  C022  F06D         	movff	?___ftdiv+2,?_printf+4
   827  001E90  EC43  F004         	call	_printf	;wreg free
   828  001E94  D7CD               	goto	l70
   829  001E96                     __end_of_main:
   830                           	opt stack 0
   831                           tblptru	equ	0xFF8
   832                           intcon	equ	0xFF2
   833                           wreg	equ	0xFE8
   834                           status	equ	0xFD8
   835                           
   836 ;; *************** function _printf *****************
   837 ;; Defined at:
   838 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  f               2    9[BANK0 ] PTR const unsigned char 
   841 ;;		 -> STR_1(13), 
   842 ;; Auto vars:     Size  Location     Type
   843 ;;  tmpval          4   33[BANK0 ] struct .
   844 ;;  val             4   27[BANK0 ] unsigned long 
   845 ;;  fval            3   39[BANK0 ] unsigned long 
   846 ;;  cp              3    0        PTR const unsigned char 
   847 ;;  prec            2   37[BANK0 ] int 
   848 ;;  exp             2   31[BANK0 ] int 
   849 ;;  flag            2   25[BANK0 ] unsigned short 
   850 ;;  ap              2   23[BANK0 ] PTR void [1]
   851 ;;		 -> ?_printf(2), 
   852 ;;  len             2    0        unsigned int 
   853 ;;  width           2    0        int 
   854 ;;  c               1   42[BANK0 ] char 
   855 ;;  d               1    0        unsigned char 
   856 ;; Return value:  Size  Location     Type
   857 ;;                  2    9[BANK0 ] int 
   858 ;; Registers used:
   859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   860 ;; Tracked objects:
   861 ;;		On entry : 0/0
   862 ;;		On exit  : 0/0
   863 ;;		Unchanged: 0/0
   864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   865 ;;      Params:         0       5       0       0       0       0       0       0       0
   866 ;;      Locals:         0      23       0       0       0       0       0       0       0
   867 ;;      Temps:          0       6       0       0       0       0       0       0       0
   868 ;;      Totals:         0      34       0       0       0       0       0       0       0
   869 ;;Total ram usage:       34 bytes
   870 ;; Hardware stack levels used:    1
   871 ;; Hardware stack levels required when called:    5
   872 ;; This function calls:
   873 ;;		___awdiv
   874 ;;		___ftadd
   875 ;;		___ftge
   876 ;;		___ftmul
   877 ;;		___ftneg
   878 ;;		___ftsub
   879 ;;		___fttol
   880 ;;		___lldiv
   881 ;;		___llmod
   882 ;;		___lltoft
   883 ;;		___wmul
   884 ;;		__div_to_l_
   885 ;;		__tdiv_to_l_
   886 ;;		_fround
   887 ;;		_isdigit
   888 ;;		_putch
   889 ;;		_scale
   890 ;; This function is called by:
   891 ;;		_main
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text1
   896  000886                     __ptext1:
   897                           	opt stack 0
   898  000886                     _printf:
   899                           	opt stack 25
   900                           
   901                           ;doprnt.c: 466: va_list ap;
   902                           ;doprnt.c: 499: signed char c;
   903                           ;doprnt.c: 501: int width;
   904                           ;doprnt.c: 504: int prec;
   905                           ;doprnt.c: 508: unsigned short flag;
   906                           ;doprnt.c: 515: char d;
   907                           ;doprnt.c: 516: double fval;
   908                           ;doprnt.c: 517: int exp;
   909                           ;doprnt.c: 523: union {
   910                           ;doprnt.c: 524: unsigned long vd;
   911                           ;doprnt.c: 525: double integ;
   912                           ;doprnt.c: 526: } tmpval;
   913                           ;doprnt.c: 528: unsigned long val;
   914                           ;doprnt.c: 529: unsigned len;
   915                           ;doprnt.c: 530: const char * cp;
   916                           ;doprnt.c: 533: *ap = __va_start();
   917                           
   918                           ;incstack = 0
   919  000886  0E6B               	movlw	low (?_printf+2)
   920  000888  0100               	movlb	0	; () banked
   921  00088A  6F77               	movwf	printf@ap& (0+255),b
   922  00088C  0E00               	movlw	high (?_printf+2)
   923  00088E  6F78               	movwf	(printf@ap+1)& (0+255),b
   924                           
   925                           ;doprnt.c: 536: while(c = *f++) {
   926  000890  D34F               	goto	l198
   927  000892                     
   928                           ; BSR set to: 0
   929                           ;doprnt.c: 538: if(c != '%')
   930                           
   931                           ; BSR set to: 0
   932  000892  0E25               	movlw	37
   933  000894  198A               	xorwf	printf@c& (0+255),w,b
   934  000896  B4D8               	btfsc	status,2,c
   935  000898  D004               	goto	l144
   936                           
   937                           ; BSR set to: 0
   938                           ;doprnt.c: 540: {
   939                           ;doprnt.c: 541: (putch(c) );
   940  00089A  518A               	movf	printf@c& (0+255),w,b
   941  00089C  ECE7  F011         	call	_putch
   942                           
   943                           ;doprnt.c: 542: continue;
   944  0008A0  D347               	goto	l198
   945  0008A2                     l144:
   946                           
   947                           ;doprnt.c: 543: }
   948                           ;doprnt.c: 548: flag = 0;
   949  0008A2  0E00               	movlw	0
   950  0008A4  0100               	movlb	0	; () banked
   951  0008A6  6F7A               	movwf	(printf@flag+1)& (0+255),b
   952  0008A8  0E00               	movlw	0
   953  0008AA  6F79               	movwf	printf@flag& (0+255),b
   954                           
   955                           ; BSR set to: 0
   956                           ;doprnt.c: 611: if(*f == '.') {
   957  0008AC  C069  FFF6         	movff	printf@f,tblptrl
   958  0008B0  C06A  FFF7         	movff	printf@f+1,tblptrh
   959  0008B4                     	if	0	;tblptru may be non-zero
   960  0008B4                     	endif
   961  0008B4                     	if	0	;tblptru may be non-zero
   962  0008B4                     	endif
   963  0008B4  0008               	tblrd		*
   964  0008B6  50F5               	movf	tablat,w,c
   965  0008B8  0A2E               	xorlw	46
   966  0008BA  A4D8               	btfss	status,2,c
   967  0008BC  D02F               	goto	l145
   968                           
   969                           ; BSR set to: 0
   970                           ;doprnt.c: 612: flag |= 0x4000;
   971  0008BE  8D7A               	bsf	(printf@flag+1)& (0+255),6,b
   972                           
   973                           ;doprnt.c: 613: f++;
   974  0008C0  4B69               	infsnz	printf@f& (0+255),f,b
   975  0008C2  2B6A               	incf	(printf@f+1)& (0+255),f,b
   976                           
   977                           ; BSR set to: 0
   978                           ;doprnt.c: 620: {
   979                           ;doprnt.c: 621: prec = 0;
   980  0008C4  0E00               	movlw	0
   981  0008C6  6F86               	movwf	(printf@prec+1)& (0+255),b
   982  0008C8  0E00               	movlw	0
   983  0008CA  6F85               	movwf	printf@prec& (0+255),b
   984                           
   985                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
   986  0008CC  D01C               	goto	l146
   987  0008CE                     
   988                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
   989                           
   990                           ; BSR set to: 0
   991  0008CE  C085  F022         	movff	printf@prec,___wmul@multiplier
   992  0008D2  C086  F023         	movff	printf@prec+1,___wmul@multiplier+1
   993  0008D6  0E00               	movlw	0
   994  0008D8  6E25               	movwf	___wmul@multiplicand+1,c
   995  0008DA  0E0A               	movlw	10
   996  0008DC  6E24               	movwf	___wmul@multiplicand,c
   997  0008DE  EC7A  F011         	call	___wmul	;wreg free
   998  0008E2  C069  FFF6         	movff	printf@f,tblptrl
   999  0008E6  C06A  FFF7         	movff	printf@f+1,tblptrh
  1000  0008EA                     	if	0	;tblptru may be non-zero
  1001  0008EA                     	endif
  1002  0008EA                     	if	0	;tblptru may be non-zero
  1003  0008EA                     	endif
  1004  0008EA  0008               	tblrd		*
  1005  0008EC  50F5               	movf	tablat,w,c
  1006  0008EE  2622               	addwf	?___wmul,f,c
  1007  0008F0  0E00               	movlw	0
  1008  0008F2  2223               	addwfc	?___wmul+1,f,c
  1009  0008F4  0ED0               	movlw	208
  1010  0008F6  2422               	addwf	?___wmul,w,c
  1011  0008F8  0100               	movlb	0	; () banked
  1012  0008FA  6F85               	movwf	printf@prec& (0+255),b
  1013  0008FC  0EFF               	movlw	255
  1014  0008FE  2023               	addwfc	?___wmul+1,w,c
  1015  000900  6F86               	movwf	(printf@prec+1)& (0+255),b
  1016                           
  1017                           ; BSR set to: 0
  1018  000902  4B69               	infsnz	printf@f& (0+255),f,b
  1019  000904  2B6A               	incf	(printf@f+1)& (0+255),f,b
  1020  000906                     l146:
  1021                           
  1022                           ; BSR set to: 0
  1023                           
  1024                           ; BSR set to: 0
  1025  000906  C069  FFF6         	movff	printf@f,tblptrl
  1026  00090A  C06A  FFF7         	movff	printf@f+1,tblptrh
  1027  00090E                     	if	0	;tblptru may be non-zero
  1028  00090E                     	endif
  1029  00090E                     	if	0	;tblptru may be non-zero
  1030  00090E                     	endif
  1031  00090E  0008               	tblrd		*
  1032  000910  50F5               	movf	tablat,w,c
  1033  000912  ECB1  F011         	call	_isdigit
  1034  000916  A0D8               	btfss	status,0,c
  1035  000918  D00A               	goto	l150
  1036  00091A  D7D9               	goto	l147
  1037  00091C                     l145:
  1038                           
  1039                           ;doprnt.c: 626: prec = 0;
  1040  00091C  0E00               	movlw	0
  1041  00091E  0100               	movlb	0	; () banked
  1042  000920  6F86               	movwf	(printf@prec+1)& (0+255),b
  1043  000922  0E00               	movlw	0
  1044  000924  6F85               	movwf	printf@prec& (0+255),b
  1045                           
  1046                           ; BSR set to: 0
  1047                           ;doprnt.c: 628: flag |= 0x1000;
  1048  000926  897A               	bsf	(printf@flag+1)& (0+255),4,b
  1049                           
  1050                           ; BSR set to: 0
  1051                           ;doprnt.c: 630: }
  1052                           ;doprnt.c: 635: switch(c = *f++) {
  1053  000928  D002               	goto	l150
  1054  00092A                     
  1055                           ; BSR set to: 0
  1056                           ;doprnt.c: 663: flag |= 0x400;
  1057                           
  1058                           ; BSR set to: 0
  1059  00092A  857A               	bsf	(printf@flag+1)& (0+255),2,b
  1060                           
  1061                           ;doprnt.c: 664: break;
  1062  00092C  D012               	goto	l154
  1063  00092E                     l150:
  1064                           
  1065                           ; BSR set to: 0
  1066  00092E  C069  FFF6         	movff	printf@f,tblptrl
  1067  000932  C06A  FFF7         	movff	printf@f+1,tblptrh
  1068  000936  0100               	movlb	0	; () banked
  1069  000938  4B69               	infsnz	printf@f& (0+255),f,b
  1070  00093A  2B6A               	incf	(printf@f+1)& (0+255),f,b
  1071  00093C                     	if	0	;tblptru may be non-zero
  1072  00093C                     	endif
  1073  00093C                     	if	0	;tblptru may be non-zero
  1074  00093C                     	endif
  1075  00093C  0008               	tblrd		*
  1076  00093E  CFF5 F08A          	movff	tablat,printf@c
  1077  000942  518A               	movf	printf@c& (0+255),w,b
  1078                           
  1079                           ; Switch size 1, requested type "space"
  1080                           ; Number of cases is 2, Range of values is 0 to 102
  1081                           ; switch strategies available:
  1082                           ; Name         Instructions Cycles
  1083                           ; simple_byte            7     4 (average)
  1084                           ;	Chosen strategy is simple_byte
  1085  000944  0A00               	xorlw	0	; case 0
  1086  000946  B4D8               	btfsc	status,2,c
  1087  000948  0012               	return	
  1088  00094A  0A66               	xorlw	102	; case 102
  1089  00094C  B4D8               	btfsc	status,2,c
  1090  00094E  D7ED               	goto	l153
  1091  000950  D2EF               	goto	l198
  1092  000952                     l154:
  1093                           
  1094                           ; BSR set to: 0
  1095                           ;doprnt.c: 825: if(flag & (0x700)) {
  1096                           
  1097                           ; BSR set to: 0
  1098  000952  0E07               	movlw	7
  1099  000954  157A               	andwf	(printf@flag+1)& (0+255),w,b
  1100  000956  B4D8               	btfsc	status,2,c
  1101  000958  D2B4               	goto	l156
  1102                           
  1103                           ; BSR set to: 0
  1104                           ;doprnt.c: 827: if(flag & 0x1000)
  1105  00095A  A97A               	btfss	(printf@flag+1)& (0+255),4,b
  1106  00095C  D004               	goto	l157
  1107                           
  1108                           ; BSR set to: 0
  1109                           ;doprnt.c: 829: prec = 6;
  1110  00095E  0E00               	movlw	0
  1111  000960  6F86               	movwf	(printf@prec+1)& (0+255),b
  1112  000962  0E06               	movlw	6
  1113  000964  6F85               	movwf	printf@prec& (0+255),b
  1114  000966                     l157:
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1118                           
  1119                           ; BSR set to: 0
  1120  000966  C077  FFD9         	movff	printf@ap,fsr2l
  1121  00096A  C078  FFDA         	movff	printf@ap+1,fsr2h
  1122  00096E  CFDE F087          	movff	postinc2,printf@fval
  1123  000972  CFDE F088          	movff	postinc2,printf@fval+1
  1124  000976  CFDD F089          	movff	postdec2,printf@fval+2
  1125                           
  1126                           ; BSR set to: 0
  1127  00097A  0E03               	movlw	3
  1128  00097C  2777               	addwf	printf@ap& (0+255),f,b
  1129  00097E  0E00               	movlw	0
  1130  000980  2378               	addwfc	(printf@ap+1)& (0+255),f,b
  1131                           
  1132                           ; BSR set to: 0
  1133                           ;doprnt.c: 831: if(fval < 0.0) {
  1134  000982  AF89               	btfss	(printf@fval+2)& (0+255),7,b
  1135  000984  D011               	goto	l158
  1136                           
  1137                           ; BSR set to: 0
  1138                           ;doprnt.c: 832: fval = -fval;
  1139  000986  C087  F014         	movff	printf@fval,___ftneg@f1
  1140  00098A  C088  F015         	movff	printf@fval+1,___ftneg@f1+1
  1141  00098E  C089  F016         	movff	printf@fval+2,___ftneg@f1+2
  1142  000992  EC8D  F011         	call	___ftneg	;wreg free
  1143  000996  C014  F087         	movff	?___ftneg,printf@fval
  1144  00099A  C015  F088         	movff	?___ftneg+1,printf@fval+1
  1145  00099E  C016  F089         	movff	?___ftneg+2,printf@fval+2
  1146                           
  1147                           ;doprnt.c: 833: flag |= 0x03;
  1148  0009A2  0E03               	movlw	3
  1149  0009A4  0100               	movlb	0	; () banked
  1150  0009A6  1379               	iorwf	printf@flag& (0+255),f,b
  1151  0009A8                     l158:
  1152                           
  1153                           ; BSR set to: 0
  1154                           ;doprnt.c: 834: }
  1155                           ;doprnt.c: 835: exp = 0;
  1156                           
  1157                           ; BSR set to: 0
  1158  0009A8  0E00               	movlw	0
  1159  0009AA  6F80               	movwf	(printf@exp+1)& (0+255),b
  1160  0009AC  0E00               	movlw	0
  1161  0009AE  6F7F               	movwf	printf@exp& (0+255),b
  1162                           
  1163                           ; BSR set to: 0
  1164                           ;doprnt.c: 836: if( fval!=0) {
  1165  0009B0  5187               	movf	printf@fval& (0+255),w,b
  1166  0009B2  1188               	iorwf	(printf@fval+1)& (0+255),w,b
  1167  0009B4  1189               	iorwf	(printf@fval+2)& (0+255),w,b
  1168  0009B6  B4D8               	btfsc	status,2,c
  1169  0009B8  D086               	goto	l163
  1170                           
  1171                           ; BSR set to: 0
  1172                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1173  0009BA  0E82               	movlw	130
  1174  0009BC  6F6E               	movwf	??_printf& (0+255),b
  1175  0009BE  0EFF               	movlw	255
  1176  0009C0  6F6F               	movwf	(??_printf+1)& (0+255),b
  1177  0009C2  C087  F070         	movff	printf@fval,??_printf+2
  1178  0009C6  C088  F071         	movff	printf@fval+1,??_printf+3
  1179  0009CA  C089  F072         	movff	printf@fval+2,??_printf+4
  1180  0009CE  C08A  F073         	movff	printf@fval+3,??_printf+5
  1181  0009D2  0E10               	movlw	16
  1182  0009D4  D005               	goto	u2400
  1183  0009D6                     u2405:
  1184  0009D6  90D8               	bcf	status,0,c
  1185  0009D8  3373               	rrcf	(??_printf+5)& (0+255),f,b
  1186  0009DA  3372               	rrcf	(??_printf+4)& (0+255),f,b
  1187  0009DC  3371               	rrcf	(??_printf+3)& (0+255),f,b
  1188  0009DE  3370               	rrcf	(??_printf+2)& (0+255),f,b
  1189  0009E0                     u2400:
  1190  0009E0  2EE8               	decfsz	wreg,f,c
  1191  0009E2  D7F9               	goto	u2405
  1192  0009E4  5170               	movf	(??_printf+2)& (0+255),w,b
  1193  0009E6  256E               	addwf	??_printf& (0+255),w,b
  1194  0009E8  6F7F               	movwf	printf@exp& (0+255),b
  1195  0009EA  0E00               	movlw	0
  1196  0009EC  216F               	addwfc	(??_printf+1)& (0+255),w,b
  1197  0009EE  6F80               	movwf	(printf@exp+1)& (0+255),b
  1198                           
  1199                           ; BSR set to: 0
  1200                           ;doprnt.c: 838: exp--;
  1201  0009F0  077F               	decf	printf@exp& (0+255),f,b
  1202  0009F2  A0D8               	btfss	status,0,c
  1203  0009F4  0780               	decf	(printf@exp+1)& (0+255),f,b
  1204                           
  1205                           ; BSR set to: 0
  1206                           ;doprnt.c: 839: exp *= 3;
  1207  0009F6  C07F  F022         	movff	printf@exp,___wmul@multiplier
  1208  0009FA  C080  F023         	movff	printf@exp+1,___wmul@multiplier+1
  1209  0009FE  0E00               	movlw	0
  1210  000A00  6E25               	movwf	___wmul@multiplicand+1,c
  1211  000A02  0E03               	movlw	3
  1212  000A04  6E24               	movwf	___wmul@multiplicand,c
  1213  000A06  EC7A  F011         	call	___wmul	;wreg free
  1214  000A0A  C022  F07F         	movff	?___wmul,printf@exp
  1215  000A0E  C023  F080         	movff	?___wmul+1,printf@exp+1
  1216                           
  1217                           ;doprnt.c: 840: exp /= 10;
  1218  000A12  C07F  F01A         	movff	printf@exp,___awdiv@dividend
  1219  000A16  C080  F01B         	movff	printf@exp+1,___awdiv@dividend+1
  1220  000A1A  0E00               	movlw	0
  1221  000A1C  6E1D               	movwf	___awdiv@divisor+1,c
  1222  000A1E  0E0A               	movlw	10
  1223  000A20  6E1C               	movwf	___awdiv@divisor,c
  1224  000A22  EC93  F00F         	call	___awdiv	;wreg free
  1225  000A26  C01A  F07F         	movff	?___awdiv,printf@exp
  1226  000A2A  C01B  F080         	movff	?___awdiv+1,printf@exp+1
  1227                           
  1228                           ;doprnt.c: 841: if(exp < 0)
  1229  000A2E  0100               	movlb	0	; () banked
  1230  000A30  AF80               	btfss	(printf@exp+1)& (0+255),7,b
  1231  000A32  D003               	goto	l160
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;doprnt.c: 842: exp--;
  1235  000A34  077F               	decf	printf@exp& (0+255),f,b
  1236  000A36  A0D8               	btfss	status,0,c
  1237  000A38  0780               	decf	(printf@exp+1)& (0+255),f,b
  1238  000A3A                     l160:
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1242                           
  1243                           ; BSR set to: 0
  1244  000A3A  517F               	movf	printf@exp& (0+255),w,b
  1245  000A3C  0800               	sublw	0
  1246  000A3E  ECA6  F007         	call	_scale
  1247  000A42  C037  F081         	movff	?_scale,printf@tmpval
  1248  000A46  C038  F082         	movff	?_scale+1,printf@tmpval+1
  1249  000A4A  C039  F083         	movff	?_scale+2,printf@tmpval+2
  1250                           
  1251                           ;doprnt.c: 847: tmpval.integ *= fval;
  1252  000A4E  C081  F028         	movff	printf@tmpval,___ftmul@f1
  1253  000A52  C082  F029         	movff	printf@tmpval+1,___ftmul@f1+1
  1254  000A56  C083  F02A         	movff	printf@tmpval+2,___ftmul@f1+2
  1255  000A5A  C087  F02B         	movff	printf@fval,___ftmul@f2
  1256  000A5E  C088  F02C         	movff	printf@fval+1,___ftmul@f2+1
  1257  000A62  C089  F02D         	movff	printf@fval+2,___ftmul@f2+2
  1258  000A66  EC53  F00D         	call	___ftmul	;wreg free
  1259  000A6A  C028  F081         	movff	?___ftmul,printf@tmpval
  1260  000A6E  C029  F082         	movff	?___ftmul+1,printf@tmpval+1
  1261  000A72  C02A  F083         	movff	?___ftmul+2,printf@tmpval+2
  1262                           
  1263                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1264  000A76  C081  F014         	movff	printf@tmpval,___ftge@ff1
  1265  000A7A  C082  F015         	movff	printf@tmpval+1,___ftge@ff1+1
  1266  000A7E  C083  F016         	movff	printf@tmpval+2,___ftge@ff1+2
  1267  000A82  0E00               	movlw	0
  1268  000A84  6E17               	movwf	___ftge@ff2,c
  1269  000A86  0E80               	movlw	128
  1270  000A88  6E18               	movwf	___ftge@ff2+1,c
  1271  000A8A  0E3F               	movlw	63
  1272  000A8C  6E19               	movwf	___ftge@ff2+2,c
  1273  000A8E  EC4B  F00F         	call	___ftge	;wreg free
  1274  000A92  B0D8               	btfsc	status,0,c
  1275  000A94  D005               	goto	l161
  1276                           
  1277                           ;doprnt.c: 849: exp--;
  1278  000A96  0100               	movlb	0	; () banked
  1279  000A98  077F               	decf	printf@exp& (0+255),f,b
  1280  000A9A  A0D8               	btfss	status,0,c
  1281  000A9C  0780               	decf	(printf@exp+1)& (0+255),f,b
  1282  000A9E  D013               	goto	l163
  1283  000AA0                     l161:
  1284                           
  1285                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1286                           
  1287                           ; BSR set to: 0
  1288  000AA0  C081  F014         	movff	printf@tmpval,___ftge@ff1
  1289  000AA4  C082  F015         	movff	printf@tmpval+1,___ftge@ff1+1
  1290  000AA8  C083  F016         	movff	printf@tmpval+2,___ftge@ff1+2
  1291  000AAC  0E00               	movlw	0
  1292  000AAE  6E17               	movwf	___ftge@ff2,c
  1293  000AB0  0E20               	movlw	32
  1294  000AB2  6E18               	movwf	___ftge@ff2+1,c
  1295  000AB4  0E41               	movlw	65
  1296  000AB6  6E19               	movwf	___ftge@ff2+2,c
  1297  000AB8  EC4B  F00F         	call	___ftge	;wreg free
  1298  000ABC  A0D8               	btfss	status,0,c
  1299  000ABE  D003               	goto	l163
  1300                           
  1301                           ;doprnt.c: 851: exp++;
  1302  000AC0  0100               	movlb	0	; () banked
  1303  000AC2  4B7F               	infsnz	printf@exp& (0+255),f,b
  1304  000AC4  2B80               	incf	(printf@exp+1)& (0+255),f,b
  1305  000AC6                     l163:
  1306                           
  1307                           ;doprnt.c: 852: }
  1308                           ;doprnt.c: 1112: if(prec <= 12)
  1309                           
  1310                           ; BSR set to: 0
  1311                           
  1312                           ; BSR set to: 0
  1313                           
  1314                           ; BSR set to: 0
  1315  000AC6  0100               	movlb	0	; () banked
  1316  000AC8  BF86               	btfsc	(printf@prec+1)& (0+255),7,b
  1317  000ACA  D006               	goto	u2440
  1318  000ACC  5186               	movf	(printf@prec+1)& (0+255),w,b
  1319  000ACE  E11B               	bnz	l2469
  1320  000AD0  0E0D               	movlw	13
  1321  000AD2  5D85               	subwf	printf@prec& (0+255),w,b
  1322  000AD4  B0D8               	btfsc	status,0,c
  1323  000AD6  D017               	goto	l164
  1324  000AD8                     u2440:
  1325                           
  1326                           ; BSR set to: 0
  1327                           ;doprnt.c: 1113: fval += fround(prec);
  1328  000AD8  C087  F041         	movff	printf@fval,___ftadd@f1
  1329  000ADC  C088  F042         	movff	printf@fval+1,___ftadd@f1+1
  1330  000AE0  C089  F043         	movff	printf@fval+2,___ftadd@f1+2
  1331  000AE4  5185               	movf	printf@prec& (0+255),w,b
  1332  000AE6  ECAA  F009         	call	_fround
  1333  000AEA  C037  F044         	movff	?_fround,___ftadd@f2
  1334  000AEE  C038  F045         	movff	?_fround+1,___ftadd@f2+1
  1335  000AF2  C039  F046         	movff	?_fround+2,___ftadd@f2+2
  1336  000AF6  ECD3  F00A         	call	___ftadd	;wreg free
  1337  000AFA  C041  F087         	movff	?___ftadd,printf@fval
  1338  000AFE  C042  F088         	movff	?___ftadd+1,printf@fval+1
  1339  000B02  C043  F089         	movff	?___ftadd+2,printf@fval+2
  1340  000B06                     l164:
  1341  000B06                     l2469:
  1342                           
  1343                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1344  000B06  0100               	movlb	0	; () banked
  1345  000B08  BF80               	btfsc	(printf@exp+1)& (0+255),7,b
  1346  000B0A  D006               	goto	u2450
  1347  000B0C  5180               	movf	(printf@exp+1)& (0+255),w,b
  1348  000B0E  E120               	bnz	l2477
  1349  000B10  0E0A               	movlw	10
  1350  000B12  5D7F               	subwf	printf@exp& (0+255),w,b
  1351  000B14  B0D8               	btfsc	status,0,c
  1352  000B16  D01C               	goto	u2480
  1353  000B18                     u2450:
  1354                           
  1355                           ; BSR set to: 0
  1356  000B18  5187               	movf	printf@fval& (0+255),w,b
  1357  000B1A  1188               	iorwf	(printf@fval+1)& (0+255),w,b
  1358  000B1C  1189               	iorwf	(printf@fval+2)& (0+255),w,b
  1359  000B1E  B4D8               	btfsc	status,2,c
  1360  000B20  D056               	goto	l165
  1361                           
  1362                           ; BSR set to: 0
  1363  000B22  C087  F03E         	movff	printf@fval,___fttol@f1
  1364  000B26  C088  F03F         	movff	printf@fval+1,___fttol@f1+1
  1365  000B2A  C089  F040         	movff	printf@fval+2,___fttol@f1+2
  1366  000B2E  ECD7  F00C         	call	___fttol	;wreg free
  1367  000B32  503E               	movf	?___fttol,w,c
  1368  000B34  103F               	iorwf	?___fttol+1,w,c
  1369  000B36  1040               	iorwf	?___fttol+2,w,c
  1370  000B38  1041               	iorwf	?___fttol+3,w,c
  1371  000B3A  A4D8               	btfss	status,2,c
  1372  000B3C  D048               	goto	l165
  1373  000B3E  0100               	movlb	0	; () banked
  1374  000B40  BF80               	btfsc	(printf@exp+1)& (0+255),7,b
  1375  000B42  D045               	goto	l165
  1376  000B44  5180               	movf	(printf@exp+1)& (0+255),w,b
  1377  000B46  E104               	bnz	l2477
  1378  000B48  0E02               	movlw	2
  1379  000B4A  5D7F               	subwf	printf@exp& (0+255),w,b
  1380  000B4C  A0D8               	btfss	status,0,c
  1381  000B4E  D03F               	goto	l165
  1382  000B50                     u2480:
  1383  000B50                     l2477:
  1384                           
  1385                           ; BSR set to: 0
  1386                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1387  000B50  C081  F014         	movff	printf@tmpval,___ftge@ff1
  1388  000B54  C082  F015         	movff	printf@tmpval+1,___ftge@ff1+1
  1389  000B58  C083  F016         	movff	printf@tmpval+2,___ftge@ff1+2
  1390  000B5C  0E70               	movlw	112
  1391  000B5E  6E17               	movwf	___ftge@ff2,c
  1392  000B60  0E89               	movlw	137
  1393  000B62  6E18               	movwf	___ftge@ff2+1,c
  1394  000B64  0E40               	movlw	64
  1395  000B66  6E19               	movwf	___ftge@ff2+2,c
  1396  000B68  EC4B  F00F         	call	___ftge	;wreg free
  1397  000B6C  B0D8               	btfsc	status,0,c
  1398  000B6E  D003               	goto	l168
  1399                           
  1400                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1401  000B70  0100               	movlb	0	; () banked
  1402  000B72  0EF7               	movlw	247
  1403  000B74  D002               	goto	L1
  1404  000B76                     l168:
  1405                           
  1406                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1407                           
  1408                           ; BSR set to: 0
  1409  000B76  0100               	movlb	0	; () banked
  1410  000B78  0EF8               	movlw	248
  1411  000B7A                     L1:
  1412  000B7A  277F               	addwf	printf@exp& (0+255),f,b
  1413  000B7C  0EFF               	movlw	255
  1414  000B7E  2380               	addwfc	(printf@exp+1)& (0+255),f,b
  1415                           
  1416                           ; BSR set to: 0
  1417                           ;doprnt.c: 1124: }
  1418                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1419                           
  1420                           ; BSR set to: 0
  1421  000B80  517F               	movf	printf@exp& (0+255),w,b
  1422  000B82  ECA6  F007         	call	_scale
  1423  000B86  C037  F081         	movff	?_scale,printf@tmpval
  1424  000B8A  C038  F082         	movff	?_scale+1,printf@tmpval+1
  1425  000B8E  C039  F083         	movff	?_scale+2,printf@tmpval+2
  1426                           
  1427                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1428  000B92  C087  F014         	movff	printf@fval,__tdiv_to_l_@f1
  1429  000B96  C088  F015         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1430  000B9A  C089  F016         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1431  000B9E  C081  F017         	movff	printf@tmpval,__tdiv_to_l_@f2
  1432  000BA2  C082  F018         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1433  000BA6  C083  F019         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1434  000BAA  ECAA  F00B         	call	__tdiv_to_l_	;wreg free
  1435  000BAE  C014  F07B         	movff	?__tdiv_to_l_,printf@val
  1436  000BB2  C015  F07C         	movff	?__tdiv_to_l_+1,printf@val+1
  1437  000BB6  C016  F07D         	movff	?__tdiv_to_l_+2,printf@val+2
  1438  000BBA  C017  F07E         	movff	?__tdiv_to_l_+3,printf@val+3
  1439                           
  1440                           ;doprnt.c: 1129: fval = 0.0;
  1441  000BBE  0E00               	movlw	0
  1442  000BC0  0100               	movlb	0	; () banked
  1443  000BC2  6F87               	movwf	printf@fval& (0+255),b
  1444  000BC4  0E00               	movlw	0
  1445  000BC6  6F88               	movwf	(printf@fval+1)& (0+255),b
  1446  000BC8  0E00               	movlw	0
  1447  000BCA  6F89               	movwf	(printf@fval+2)& (0+255),b
  1448                           
  1449                           ;doprnt.c: 1130: } else {
  1450  000BCC  D033               	goto	l174
  1451  000BCE                     l165:
  1452                           
  1453                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1454                           
  1455                           ; BSR set to: 0
  1456  000BCE  C087  F03E         	movff	printf@fval,___fttol@f1
  1457  000BD2  C088  F03F         	movff	printf@fval+1,___fttol@f1+1
  1458  000BD6  C089  F040         	movff	printf@fval+2,___fttol@f1+2
  1459  000BDA  ECD7  F00C         	call	___fttol	;wreg free
  1460  000BDE  C03E  F07B         	movff	?___fttol,printf@val
  1461  000BE2  C03F  F07C         	movff	?___fttol+1,printf@val+1
  1462  000BE6  C040  F07D         	movff	?___fttol+2,printf@val+2
  1463  000BEA  C041  F07E         	movff	?___fttol+3,printf@val+3
  1464                           
  1465                           ;doprnt.c: 1132: fval -= (double)val;
  1466  000BEE  C087  F063         	movff	printf@fval,___ftsub@f1
  1467  000BF2  C088  F064         	movff	printf@fval+1,___ftsub@f1+1
  1468  000BF6  C089  F065         	movff	printf@fval+2,___ftsub@f1+2
  1469  000BFA  C07B  F01C         	movff	printf@val,___lltoft@c
  1470  000BFE  C07C  F01D         	movff	printf@val+1,___lltoft@c+1
  1471  000C02  C07D  F01E         	movff	printf@val+2,___lltoft@c+2
  1472  000C06  C07E  F01F         	movff	printf@val+3,___lltoft@c+3
  1473  000C0A  ECFC  F010         	call	___lltoft	;wreg free
  1474  000C0E  C01C  F066         	movff	?___lltoft,___ftsub@f2
  1475  000C12  C01D  F067         	movff	?___lltoft+1,___ftsub@f2+1
  1476  000C16  C01E  F068         	movff	?___lltoft+2,___ftsub@f2+2
  1477  000C1A  EC2A  F011         	call	___ftsub	;wreg free
  1478  000C1E  C063  F087         	movff	?___ftsub,printf@fval
  1479  000C22  C064  F088         	movff	?___ftsub+1,printf@fval+1
  1480  000C26  C065  F089         	movff	?___ftsub+2,printf@fval+2
  1481                           
  1482                           ;doprnt.c: 1133: exp = 0;
  1483  000C2A  0E00               	movlw	0
  1484  000C2C  0100               	movlb	0	; () banked
  1485  000C2E  6F80               	movwf	(printf@exp+1)& (0+255),b
  1486  000C30  0E00               	movlw	0
  1487  000C32  6F7F               	movwf	printf@exp& (0+255),b
  1488  000C34                     l174:
  1489                           
  1490                           ; BSR set to: 0
  1491                           ;doprnt.c: 1134: }
  1492                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1493                           
  1494                           ; BSR set to: 0
  1495  000C34  0E01               	movlw	1
  1496  000C36  6F8A               	movwf	printf@c& (0+255),b
  1497  000C38                     l2497:
  1498                           
  1499                           ; BSR set to: 0
  1500  000C38  0E0A               	movlw	10
  1501  000C3A  198A               	xorwf	printf@c& (0+255),w,b
  1502  000C3C  B4D8               	btfsc	status,2,c
  1503  000C3E  D018               	goto	u2520
  1504                           
  1505                           ; BSR set to: 0
  1506                           ;doprnt.c: 1137: if(val < dpowers[c])
  1507                           
  1508                           ; BSR set to: 0
  1509                           
  1510                           ; BSR set to: 0
  1511  000C40  518A               	movf	printf@c& (0+255),w,b
  1512  000C42  0D04               	mullw	4
  1513  000C44  0E01               	movlw	low _dpowers
  1514  000C46  24F3               	addwf	prodl,w,c
  1515  000C48  6EF6               	movwf	tblptrl,c
  1516  000C4A  0E08               	movlw	high _dpowers
  1517  000C4C  20F4               	addwfc	prodh,w,c
  1518  000C4E  6EF7               	movwf	tblptrh,c
  1519  000C50                     	if	0	;There are less than 3 active tblptr bytes
  1520  000C50                     	endif
  1521  000C50  0009               	tblrd		*+
  1522  000C52  50F5               	movf	tablat,w,c
  1523  000C54  5D7B               	subwf	printf@val& (0+255),w,b
  1524  000C56  0009               	tblrd		*+
  1525  000C58  50F5               	movf	tablat,w,c
  1526  000C5A  597C               	subwfb	(printf@val+1)& (0+255),w,b
  1527  000C5C  0009               	tblrd		*+
  1528  000C5E  50F5               	movf	tablat,w,c
  1529  000C60  597D               	subwfb	(printf@val+2)& (0+255),w,b
  1530  000C62  0009               	tblrd		*+
  1531  000C64  50F5               	movf	tablat,w,c
  1532  000C66  597E               	subwfb	(printf@val+3)& (0+255),w,b
  1533  000C68  A0D8               	btfss	status,0,c
  1534  000C6A  D002               	goto	u2520
  1535                           
  1536                           ; BSR set to: 0
  1537                           
  1538                           ; BSR set to: 0
  1539                           
  1540                           ; BSR set to: 0
  1541                           ;doprnt.c: 1138: break;
  1542  000C6C  2B8A               	incf	printf@c& (0+255),f,b
  1543  000C6E  D7E4               	goto	l2497
  1544  000C70                     u2520:
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;doprnt.c: 1175: {
  1548                           ;doprnt.c: 1188: if(flag & 0x03)
  1549                           
  1550                           ; BSR set to: 0
  1551  000C70  0E03               	movlw	3
  1552  000C72  1579               	andwf	printf@flag& (0+255),w,b
  1553  000C74  6F6E               	movwf	??_printf& (0+255),b
  1554  000C76  0E00               	movlw	0
  1555  000C78  157A               	andwf	(printf@flag+1)& (0+255),w,b
  1556  000C7A  6F6F               	movwf	(??_printf+1)& (0+255),b
  1557  000C7C  516E               	movf	??_printf& (0+255),w,b
  1558  000C7E  116F               	iorwf	(??_printf+1)& (0+255),w,b
  1559  000C80  B4D8               	btfsc	status,2,c
  1560  000C82  D04A               	goto	l179
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;doprnt.c: 1190: (putch('-') );
  1564  000C84  0E2D               	movlw	45
  1565  000C86  ECE7  F011         	call	_putch
  1566                           
  1567                           ;doprnt.c: 1195: }
  1568                           ;doprnt.c: 1196: while(c--) {
  1569  000C8A  D046               	goto	l179
  1570  000C8C                     
  1571                           ;doprnt.c: 1200: {
  1572                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1573  000C8C  C07B  F014         	movff	printf@val,___lldiv@dividend
  1574  000C90  C07C  F015         	movff	printf@val+1,___lldiv@dividend+1
  1575  000C94  C07D  F016         	movff	printf@val+2,___lldiv@dividend+2
  1576  000C98  C07E  F017         	movff	printf@val+3,___lldiv@dividend+3
  1577  000C9C  0100               	movlb	0	; () banked
  1578  000C9E  518A               	movf	printf@c& (0+255),w,b
  1579  000CA0  0D04               	mullw	4
  1580  000CA2  0E01               	movlw	low _dpowers
  1581  000CA4  24F3               	addwf	prodl,w,c
  1582  000CA6  6EF6               	movwf	tblptrl,c
  1583  000CA8  0E08               	movlw	high _dpowers
  1584  000CAA  20F4               	addwfc	prodh,w,c
  1585  000CAC  6EF7               	movwf	tblptrh,c
  1586  000CAE                     	if	0	;There are less than 3 active tblptr bytes
  1587  000CAE                     	endif
  1588  000CAE  0009               	tblrd		*+
  1589  000CB0  CFF5 F018          	movff	tablat,___lldiv@divisor
  1590  000CB4  0009               	tblrd		*+
  1591  000CB6  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  1592  000CBA  0009               	tblrd		*+
  1593  000CBC  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  1594  000CC0  000A               	tblrd		*-
  1595  000CC2  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  1596  000CC6  ECD5  F00F         	call	___lldiv	;wreg free
  1597  000CCA  C014  F081         	movff	?___lldiv,printf@tmpval
  1598  000CCE  C015  F082         	movff	?___lldiv+1,printf@tmpval+1
  1599  000CD2  C016  F083         	movff	?___lldiv+2,printf@tmpval+2
  1600  000CD6  C017  F084         	movff	?___lldiv+3,printf@tmpval+3
  1601                           
  1602                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1603  000CDA  C081  F014         	movff	printf@tmpval,___llmod@dividend
  1604  000CDE  C082  F015         	movff	printf@tmpval+1,___llmod@dividend+1
  1605  000CE2  C083  F016         	movff	printf@tmpval+2,___llmod@dividend+2
  1606  000CE6  C084  F017         	movff	printf@tmpval+3,___llmod@dividend+3
  1607  000CEA  0E0A               	movlw	10
  1608  000CEC  6E18               	movwf	___llmod@divisor,c
  1609  000CEE  0E00               	movlw	0
  1610  000CF0  6E19               	movwf	___llmod@divisor+1,c
  1611  000CF2  0E00               	movlw	0
  1612  000CF4  6E1A               	movwf	___llmod@divisor+2,c
  1613  000CF6  0E00               	movlw	0
  1614  000CF8  6E1B               	movwf	___llmod@divisor+3,c
  1615  000CFA  ECC9  F010         	call	___llmod	;wreg free
  1616  000CFE  C014  F081         	movff	?___llmod,printf@tmpval
  1617  000D02  C015  F082         	movff	?___llmod+1,printf@tmpval+1
  1618  000D06  C016  F083         	movff	?___llmod+2,printf@tmpval+2
  1619  000D0A  C017  F084         	movff	?___llmod+3,printf@tmpval+3
  1620                           
  1621                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1622  000D0E  0100               	movlb	0	; () banked
  1623  000D10  5181               	movf	printf@tmpval& (0+255),w,b
  1624  000D12  0F30               	addlw	48
  1625  000D14  ECE7  F011         	call	_putch
  1626  000D18                     l179:
  1627  000D18  0100               	movlb	0	; () banked
  1628  000D1A  078A               	decf	printf@c& (0+255),f,b
  1629  000D1C  298A               	incf	printf@c& (0+255),w,b
  1630  000D1E  B4D8               	btfsc	status,2,c
  1631  000D20  D008               	goto	l182
  1632  000D22  D7B4               	goto	l180
  1633  000D24                     l2521:
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;doprnt.c: 1208: (putch('0') );
  1637  000D24  0E30               	movlw	48
  1638  000D26  ECE7  F011         	call	_putch
  1639                           
  1640                           ;doprnt.c: 1209: exp--;
  1641  000D2A  0100               	movlb	0	; () banked
  1642  000D2C  077F               	decf	printf@exp& (0+255),f,b
  1643  000D2E  A0D8               	btfss	status,0,c
  1644  000D30  0780               	decf	(printf@exp+1)& (0+255),f,b
  1645  000D32                     l182:
  1646                           
  1647                           ; BSR set to: 0
  1648                           
  1649                           ; BSR set to: 0
  1650  000D32  BF80               	btfsc	(printf@exp+1)& (0+255),7,b
  1651  000D34  D005               	goto	u2550
  1652  000D36  5180               	movf	(printf@exp+1)& (0+255),w,b
  1653  000D38  E1F5               	bnz	l2521
  1654  000D3A  057F               	decf	printf@exp& (0+255),w,b
  1655  000D3C  B0D8               	btfsc	status,0,c
  1656  000D3E  D7F2               	goto	l183
  1657  000D40                     u2550:
  1658                           
  1659                           ; BSR set to: 0
  1660                           ;doprnt.c: 1210: }
  1661                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1662                           
  1663                           ; BSR set to: 0
  1664  000D40  BF86               	btfsc	(printf@prec+1)& (0+255),7,b
  1665  000D42  D009               	goto	l185
  1666  000D44  5186               	movf	(printf@prec+1)& (0+255),w,b
  1667  000D46  E104               	bnz	u2560
  1668  000D48  0E09               	movlw	9
  1669  000D4A  5D85               	subwf	printf@prec& (0+255),w,b
  1670  000D4C  A0D8               	btfss	status,0,c
  1671  000D4E  D003               	goto	l185
  1672  000D50                     u2560:
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1676  000D50  0E08               	movlw	8
  1677  000D52  6F8A               	movwf	printf@c& (0+255),b
  1678  000D54  D002               	goto	l186
  1679  000D56                     l185:
  1680                           
  1681                           ; BSR set to: 0
  1682                           ;doprnt.c: 1213: else
  1683                           ;doprnt.c: 1214: c = prec;
  1684  000D56  C085  F08A         	movff	printf@prec,printf@c
  1685  000D5A                     l186:
  1686                           
  1687                           ; BSR set to: 0
  1688                           ;doprnt.c: 1215: prec -= c;
  1689                           
  1690                           ; BSR set to: 0
  1691  000D5A  518A               	movf	printf@c& (0+255),w,b
  1692  000D5C  5F85               	subwf	printf@prec& (0+255),f,b
  1693  000D5E  0E00               	movlw	0
  1694  000D60  BF8A               	btfsc	printf@c& (0+255),7,b
  1695  000D62  0EFF               	movlw	255
  1696  000D64  5B86               	subwfb	(printf@prec+1)& (0+255),f,b
  1697                           
  1698                           ; BSR set to: 0
  1699                           ;doprnt.c: 1219: if(c)
  1700  000D66  518A               	movf	printf@c& (0+255),w,b
  1701  000D68  B4D8               	btfsc	status,2,c
  1702  000D6A  D003               	goto	l187
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;doprnt.c: 1221: (putch('.') );
  1706  000D6C  0E2E               	movlw	46
  1707  000D6E  ECE7  F011         	call	_putch
  1708  000D72                     l187:
  1709                           
  1710                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1711  000D72  0100               	movlb	0	; () banked
  1712  000D74  518A               	movf	printf@c& (0+255),w,b
  1713  000D76  ECA6  F007         	call	_scale
  1714  000D7A  C037  F074         	movff	?_scale,_printf$936
  1715  000D7E  C038  F075         	movff	?_scale+1,_printf$936+1
  1716  000D82  C039  F076         	movff	?_scale+2,_printf$936+2
  1717                           
  1718                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1719  000D86  C087  F02B         	movff	printf@fval,___ftmul@f2
  1720  000D8A  C088  F02C         	movff	printf@fval+1,___ftmul@f2+1
  1721  000D8E  C089  F02D         	movff	printf@fval+2,___ftmul@f2+2
  1722  000D92  C074  F028         	movff	_printf$936,___ftmul@f1
  1723  000D96  C075  F029         	movff	_printf$936+1,___ftmul@f1+1
  1724  000D9A  C076  F02A         	movff	_printf$936+2,___ftmul@f1+2
  1725  000D9E  EC53  F00D         	call	___ftmul	;wreg free
  1726  000DA2  C028  F03E         	movff	?___ftmul,___fttol@f1
  1727  000DA6  C029  F03F         	movff	?___ftmul+1,___fttol@f1+1
  1728  000DAA  C02A  F040         	movff	?___ftmul+2,___fttol@f1+2
  1729  000DAE  ECD7  F00C         	call	___fttol	;wreg free
  1730  000DB2  C03E  F07B         	movff	?___fttol,printf@val
  1731  000DB6  C03F  F07C         	movff	?___fttol+1,printf@val+1
  1732  000DBA  C040  F07D         	movff	?___fttol+2,printf@val+2
  1733  000DBE  C041  F07E         	movff	?___fttol+3,printf@val+3
  1734                           
  1735                           ;doprnt.c: 1228: while(c--) {
  1736  000DC2  D06D               	goto	l188
  1737  000DC4                     
  1738                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1739  000DC4  C07B  F014         	movff	printf@val,___lldiv@dividend
  1740  000DC8  C07C  F015         	movff	printf@val+1,___lldiv@dividend+1
  1741  000DCC  C07D  F016         	movff	printf@val+2,___lldiv@dividend+2
  1742  000DD0  C07E  F017         	movff	printf@val+3,___lldiv@dividend+3
  1743  000DD4  0100               	movlb	0	; () banked
  1744  000DD6  518A               	movf	printf@c& (0+255),w,b
  1745  000DD8  0D04               	mullw	4
  1746  000DDA  0E01               	movlw	low _dpowers
  1747  000DDC  24F3               	addwf	prodl,w,c
  1748  000DDE  6EF6               	movwf	tblptrl,c
  1749  000DE0  0E08               	movlw	high _dpowers
  1750  000DE2  20F4               	addwfc	prodh,w,c
  1751  000DE4  6EF7               	movwf	tblptrh,c
  1752  000DE6                     	if	0	;There are less than 3 active tblptr bytes
  1753  000DE6                     	endif
  1754  000DE6  0009               	tblrd		*+
  1755  000DE8  CFF5 F018          	movff	tablat,___lldiv@divisor
  1756  000DEC  0009               	tblrd		*+
  1757  000DEE  CFF5 F019          	movff	tablat,___lldiv@divisor+1
  1758  000DF2  0009               	tblrd		*+
  1759  000DF4  CFF5 F01A          	movff	tablat,___lldiv@divisor+2
  1760  000DF8  000A               	tblrd		*-
  1761  000DFA  CFF5 F01B          	movff	tablat,___lldiv@divisor+3
  1762  000DFE  ECD5  F00F         	call	___lldiv	;wreg free
  1763  000E02  C014  F081         	movff	?___lldiv,printf@tmpval
  1764  000E06  C015  F082         	movff	?___lldiv+1,printf@tmpval+1
  1765  000E0A  C016  F083         	movff	?___lldiv+2,printf@tmpval+2
  1766  000E0E  C017  F084         	movff	?___lldiv+3,printf@tmpval+3
  1767                           
  1768                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1769  000E12  C081  F014         	movff	printf@tmpval,___llmod@dividend
  1770  000E16  C082  F015         	movff	printf@tmpval+1,___llmod@dividend+1
  1771  000E1A  C083  F016         	movff	printf@tmpval+2,___llmod@dividend+2
  1772  000E1E  C084  F017         	movff	printf@tmpval+3,___llmod@dividend+3
  1773  000E22  0E0A               	movlw	10
  1774  000E24  6E18               	movwf	___llmod@divisor,c
  1775  000E26  0E00               	movlw	0
  1776  000E28  6E19               	movwf	___llmod@divisor+1,c
  1777  000E2A  0E00               	movlw	0
  1778  000E2C  6E1A               	movwf	___llmod@divisor+2,c
  1779  000E2E  0E00               	movlw	0
  1780  000E30  6E1B               	movwf	___llmod@divisor+3,c
  1781  000E32  ECC9  F010         	call	___llmod	;wreg free
  1782  000E36  C014  F081         	movff	?___llmod,printf@tmpval
  1783  000E3A  C015  F082         	movff	?___llmod+1,printf@tmpval+1
  1784  000E3E  C016  F083         	movff	?___llmod+2,printf@tmpval+2
  1785  000E42  C017  F084         	movff	?___llmod+3,printf@tmpval+3
  1786                           
  1787                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1788  000E46  0100               	movlb	0	; () banked
  1789  000E48  5181               	movf	printf@tmpval& (0+255),w,b
  1790  000E4A  0F30               	addlw	48
  1791  000E4C  ECE7  F011         	call	_putch
  1792                           
  1793                           ;doprnt.c: 1232: val %= dpowers[c];
  1794  000E50  C07B  F014         	movff	printf@val,___llmod@dividend
  1795  000E54  C07C  F015         	movff	printf@val+1,___llmod@dividend+1
  1796  000E58  C07D  F016         	movff	printf@val+2,___llmod@dividend+2
  1797  000E5C  C07E  F017         	movff	printf@val+3,___llmod@dividend+3
  1798  000E60  0100               	movlb	0	; () banked
  1799  000E62  518A               	movf	printf@c& (0+255),w,b
  1800  000E64  0D04               	mullw	4
  1801  000E66  0E01               	movlw	low _dpowers
  1802  000E68  24F3               	addwf	prodl,w,c
  1803  000E6A  6EF6               	movwf	tblptrl,c
  1804  000E6C  0E08               	movlw	high _dpowers
  1805  000E6E  20F4               	addwfc	prodh,w,c
  1806  000E70  6EF7               	movwf	tblptrh,c
  1807  000E72                     	if	0	;There are less than 3 active tblptr bytes
  1808  000E72                     	endif
  1809  000E72  0009               	tblrd		*+
  1810  000E74  CFF5 F018          	movff	tablat,___llmod@divisor
  1811  000E78  0009               	tblrd		*+
  1812  000E7A  CFF5 F019          	movff	tablat,___llmod@divisor+1
  1813  000E7E  0009               	tblrd		*+
  1814  000E80  CFF5 F01A          	movff	tablat,___llmod@divisor+2
  1815  000E84  000A               	tblrd		*-
  1816  000E86  CFF5 F01B          	movff	tablat,___llmod@divisor+3
  1817  000E8A  ECC9  F010         	call	___llmod	;wreg free
  1818  000E8E  C014  F07B         	movff	?___llmod,printf@val
  1819  000E92  C015  F07C         	movff	?___llmod+1,printf@val+1
  1820  000E96  C016  F07D         	movff	?___llmod+2,printf@val+2
  1821  000E9A  C017  F07E         	movff	?___llmod+3,printf@val+3
  1822  000E9E                     l188:
  1823  000E9E  0100               	movlb	0	; () banked
  1824  000EA0  078A               	decf	printf@c& (0+255),f,b
  1825  000EA2  298A               	incf	printf@c& (0+255),w,b
  1826  000EA4  B4D8               	btfsc	status,2,c
  1827  000EA6  D008               	goto	l191
  1828  000EA8  D78D               	goto	l189
  1829  000EAA                     
  1830                           ; BSR set to: 0
  1831                           ;doprnt.c: 1236: (putch('0') );
  1832                           
  1833                           ; BSR set to: 0
  1834  000EAA  0E30               	movlw	48
  1835  000EAC  ECE7  F011         	call	_putch
  1836                           
  1837                           ;doprnt.c: 1237: prec--;
  1838  000EB0  0100               	movlb	0	; () banked
  1839  000EB2  0785               	decf	printf@prec& (0+255),f,b
  1840  000EB4  A0D8               	btfss	status,0,c
  1841  000EB6  0786               	decf	(printf@prec+1)& (0+255),f,b
  1842  000EB8                     l191:
  1843                           
  1844                           ; BSR set to: 0
  1845                           
  1846                           ; BSR set to: 0
  1847  000EB8  5185               	movf	printf@prec& (0+255),w,b
  1848  000EBA  1186               	iorwf	(printf@prec+1)& (0+255),w,b
  1849  000EBC  B4D8               	btfsc	status,2,c
  1850  000EBE  D038               	goto	l198
  1851  000EC0  D7F4               	goto	l192
  1852  000EC2                     l156:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;doprnt.c: 1246: }
  1856                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1857                           
  1858                           ; BSR set to: 0
  1859  000EC2  5185               	movf	printf@prec& (0+255),w,b
  1860  000EC4  1186               	iorwf	(printf@prec+1)& (0+255),w,b
  1861  000EC6  A4D8               	btfss	status,2,c
  1862  000EC8  D008               	goto	l194
  1863                           
  1864                           ; BSR set to: 0
  1865  000ECA  517B               	movf	printf@val& (0+255),w,b
  1866  000ECC  117C               	iorwf	(printf@val+1)& (0+255),w,b
  1867  000ECE  117D               	iorwf	(printf@val+2)& (0+255),w,b
  1868  000ED0  117E               	iorwf	(printf@val+3)& (0+255),w,b
  1869  000ED2  A4D8               	btfss	status,2,c
  1870  000ED4  D002               	goto	l194
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;doprnt.c: 1291: prec++;
  1874  000ED6  4B85               	infsnz	printf@prec& (0+255),f,b
  1875  000ED8  2B86               	incf	(printf@prec+1)& (0+255),f,b
  1876  000EDA                     l194:
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;doprnt.c: 1339: if(c < prec)
  1880                           
  1881                           ; BSR set to: 0
  1882  000EDA  0E80               	movlw	128
  1883  000EDC  BF8A               	btfsc	printf@c& (0+255),7,b
  1884  000EDE  0E7F               	movlw	127
  1885  000EE0  6F6E               	movwf	??_printf& (0+255),b
  1886  000EE2  5185               	movf	printf@prec& (0+255),w,b
  1887  000EE4  5D8A               	subwf	printf@c& (0+255),w,b
  1888  000EE6  5186               	movf	(printf@prec+1)& (0+255),w,b
  1889  000EE8  0A80               	xorlw	128
  1890  000EEA  596E               	subwfb	??_printf& (0+255),w,b
  1891  000EEC  B0D8               	btfsc	status,0,c
  1892  000EEE  D003               	goto	l195
  1893                           
  1894                           ; BSR set to: 0
  1895                           ;doprnt.c: 1340: c = prec;
  1896  000EF0  C085  F08A         	movff	printf@prec,printf@c
  1897  000EF4  D010               	goto	l197
  1898  000EF6                     l195:
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;doprnt.c: 1341: else if(prec < c)
  1902                           
  1903                           ; BSR set to: 0
  1904  000EF6  5186               	movf	(printf@prec+1)& (0+255),w,b
  1905  000EF8  0A80               	xorlw	128
  1906  000EFA  6F6E               	movwf	??_printf& (0+255),b
  1907  000EFC  518A               	movf	printf@c& (0+255),w,b
  1908  000EFE  5D85               	subwf	printf@prec& (0+255),w,b
  1909  000F00  0E80               	movlw	128
  1910  000F02  BF8A               	btfsc	printf@c& (0+255),7,b
  1911  000F04  0E7F               	movlw	127
  1912  000F06  596E               	subwfb	??_printf& (0+255),w,b
  1913  000F08  B0D8               	btfsc	status,0,c
  1914  000F0A  D005               	goto	l197
  1915                           
  1916                           ; BSR set to: 0
  1917                           ;doprnt.c: 1342: prec = c;
  1918  000F0C  518A               	movf	printf@c& (0+255),w,b
  1919  000F0E  6F85               	movwf	printf@prec& (0+255),b
  1920  000F10  6B86               	clrf	(printf@prec+1)& (0+255),b
  1921  000F12  BF85               	btfsc	printf@prec& (0+255),7,b
  1922  000F14  0786               	decf	(printf@prec+1)& (0+255),f,b
  1923  000F16                     l197:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;doprnt.c: 1422: {
  1927                           ;doprnt.c: 1438: if(flag & 0x03)
  1928                           
  1929                           ; BSR set to: 0
  1930                           
  1931                           ; BSR set to: 0
  1932  000F16  0E03               	movlw	3
  1933  000F18  1579               	andwf	printf@flag& (0+255),w,b
  1934  000F1A  6F6E               	movwf	??_printf& (0+255),b
  1935  000F1C  0E00               	movlw	0
  1936  000F1E  157A               	andwf	(printf@flag+1)& (0+255),w,b
  1937  000F20  6F6F               	movwf	(??_printf+1)& (0+255),b
  1938  000F22  516E               	movf	??_printf& (0+255),w,b
  1939  000F24  116F               	iorwf	(??_printf+1)& (0+255),w,b
  1940  000F26  B4D8               	btfsc	status,2,c
  1941  000F28  D003               	goto	l198
  1942                           
  1943                           ; BSR set to: 0
  1944                           ;doprnt.c: 1439: (putch('-') );
  1945  000F2A  0E2D               	movlw	45
  1946  000F2C  ECE7  F011         	call	_putch
  1947  000F30                     l198:
  1948  000F30  C069  FFF6         	movff	printf@f,tblptrl
  1949  000F34  C06A  FFF7         	movff	printf@f+1,tblptrh
  1950  000F38  0100               	movlb	0	; () banked
  1951  000F3A  4B69               	infsnz	printf@f& (0+255),f,b
  1952  000F3C  2B6A               	incf	(printf@f+1)& (0+255),f,b
  1953  000F3E                     	if	0	;tblptru may be non-zero
  1954  000F3E                     	endif
  1955  000F3E                     	if	0	;tblptru may be non-zero
  1956  000F3E                     	endif
  1957  000F3E  0008               	tblrd		*
  1958  000F40  CFF5 F08A          	movff	tablat,printf@c
  1959  000F44  518A               	movf	printf@c& (0+255),w,b
  1960  000F46  B4D8               	btfsc	status,2,c
  1961  000F48  0012               	return	
  1962  000F4A  D4A3               	goto	l143
  1963  000F4C                     __end_of_printf:
  1964                           	opt stack 0
  1965                           tblptru	equ	0xFF8
  1966                           tblptrh	equ	0xFF7
  1967                           tblptrl	equ	0xFF6
  1968                           tablat	equ	0xFF5
  1969                           prodh	equ	0xFF4
  1970                           prodl	equ	0xFF3
  1971                           intcon	equ	0xFF2
  1972                           wreg	equ	0xFE8
  1973                           postinc2	equ	0xFDE
  1974                           postdec2	equ	0xFDD
  1975                           fsr2h	equ	0xFDA
  1976                           fsr2l	equ	0xFD9
  1977                           status	equ	0xFD8
  1978                           
  1979 ;; *************** function _scale *****************
  1980 ;; Defined at:
  1981 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  scl             1    wreg     char 
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;  scl             1   60[COMRAM] char 
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  3   54[COMRAM] char 
  1988 ;; Registers used:
  1989 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1995 ;;      Params:         3       0       0       0       0       0       0       0       0
  1996 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1997 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1998 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1999 ;;Total ram usage:        7 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    3
  2002 ;; This function calls:
  2003 ;;		___awdiv
  2004 ;;		___awmod
  2005 ;;		___ftmul
  2006 ;;		___wmul
  2007 ;; This function is called by:
  2008 ;;		_printf
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011                           
  2012                           	psect	text2
  2013  000F4C                     __ptext2:
  2014                           	opt stack 0
  2015  000F4C                     _scale:
  2016                           	opt stack 26
  2017                           
  2018                           ; BSR set to: 0
  2019                           ;incstack = 0
  2020                           ;scale@scl stored from wreg
  2021  000F4C  6E3D               	movwf	scale@scl,c
  2022                           
  2023                           ;doprnt.c: 428: if(scl < 0) {
  2024  000F4E  AE3D               	btfss	scale@scl,7,c
  2025  000F50  D101               	goto	l132
  2026                           
  2027                           ;doprnt.c: 429: scl = -scl;
  2028  000F52  6C3D               	negf	scale@scl,c
  2029                           
  2030                           ;doprnt.c: 430: if(scl>=110)
  2031  000F54  503D               	movf	scale@scl,w,c
  2032  000F56  0A80               	xorlw	128
  2033  000F58  0F12               	addlw	-238
  2034  000F5A  A0D8               	btfss	status,0,c
  2035  000F5C  D091               	goto	l133
  2036                           
  2037                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2038  000F5E  0E00               	movlw	0
  2039  000F60  6E25               	movwf	___wmul@multiplicand+1,c
  2040  000F62  0E03               	movlw	3
  2041  000F64  6E24               	movwf	___wmul@multiplicand,c
  2042  000F66  0E00               	movlw	0
  2043  000F68  6E1D               	movwf	___awdiv@divisor+1,c
  2044  000F6A  0E0A               	movlw	10
  2045  000F6C  6E1C               	movwf	___awdiv@divisor,c
  2046  000F6E  0E00               	movlw	0
  2047  000F70  6E17               	movwf	___awmod@divisor+1,c
  2048  000F72  0E64               	movlw	100
  2049  000F74  6E16               	movwf	___awmod@divisor,c
  2050  000F76  503D               	movf	scale@scl,w,c
  2051  000F78  6E14               	movwf	___awmod@dividend,c
  2052  000F7A  6A15               	clrf	___awmod@dividend+1,c
  2053  000F7C  BE14               	btfsc	___awmod@dividend,7,c
  2054  000F7E  0615               	decf	___awmod@dividend+1,f,c
  2055  000F80  EC91  F010         	call	___awmod	;wreg free
  2056  000F84  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2057  000F88  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2058  000F8C  EC93  F00F         	call	___awdiv	;wreg free
  2059  000F90  0E09               	movlw	9
  2060  000F92  241A               	addwf	?___awdiv,w,c
  2061  000F94  6E22               	movwf	___wmul@multiplier,c
  2062  000F96  0E00               	movlw	0
  2063  000F98  201B               	addwfc	?___awdiv+1,w,c
  2064  000F9A  6E23               	movwf	___wmul@multiplier+1,c
  2065  000F9C  EC7A  F011         	call	___wmul	;wreg free
  2066  000FA0  0E50               	movlw	low __npowers_
  2067  000FA2  2422               	addwf	?___wmul,w,c
  2068  000FA4  6EF6               	movwf	tblptrl,c
  2069  000FA6  0E08               	movlw	high __npowers_
  2070  000FA8  2023               	addwfc	?___wmul+1,w,c
  2071  000FAA  6EF7               	movwf	tblptrh,c
  2072  000FAC                     	if	0	;There are less than 3 active tblptr bytes
  2073  000FAC                     	endif
  2074  000FAC  0009               	tblrd		*+
  2075  000FAE  CFF5 F02B          	movff	tablat,___ftmul@f2
  2076  000FB2  0009               	tblrd		*+
  2077  000FB4  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2078  000FB8  000A               	tblrd		*-
  2079  000FBA  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2080  000FBE  0E00               	movlw	0
  2081  000FC0  6E1D               	movwf	___awdiv@divisor+1,c
  2082  000FC2  0E64               	movlw	100
  2083  000FC4  6E1C               	movwf	___awdiv@divisor,c
  2084  000FC6  503D               	movf	scale@scl,w,c
  2085  000FC8  6E1A               	movwf	___awdiv@dividend,c
  2086  000FCA  6A1B               	clrf	___awdiv@dividend+1,c
  2087  000FCC  BE1A               	btfsc	___awdiv@dividend,7,c
  2088  000FCE  061B               	decf	___awdiv@dividend+1,f,c
  2089  000FD0  EC93  F00F         	call	___awdiv	;wreg free
  2090  000FD4  0E12               	movlw	18
  2091  000FD6  241A               	addwf	?___awdiv,w,c
  2092  000FD8  6E22               	movwf	___wmul@multiplier,c
  2093  000FDA  0E00               	movlw	0
  2094  000FDC  201B               	addwfc	?___awdiv+1,w,c
  2095  000FDE  6E23               	movwf	___wmul@multiplier+1,c
  2096  000FE0  0E00               	movlw	0
  2097  000FE2  6E25               	movwf	___wmul@multiplicand+1,c
  2098  000FE4  0E03               	movlw	3
  2099  000FE6  6E24               	movwf	___wmul@multiplicand,c
  2100  000FE8  EC7A  F011         	call	___wmul	;wreg free
  2101  000FEC  0E50               	movlw	low __npowers_
  2102  000FEE  2422               	addwf	?___wmul,w,c
  2103  000FF0  6EF6               	movwf	tblptrl,c
  2104  000FF2  0E08               	movlw	high __npowers_
  2105  000FF4  2023               	addwfc	?___wmul+1,w,c
  2106  000FF6  6EF7               	movwf	tblptrh,c
  2107  000FF8                     	if	0	;There are less than 3 active tblptr bytes
  2108  000FF8                     	endif
  2109  000FF8  0009               	tblrd		*+
  2110  000FFA  CFF5 F028          	movff	tablat,___ftmul@f1
  2111  000FFE  0009               	tblrd		*+
  2112  001000  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2113  001004  000A               	tblrd		*-
  2114  001006  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2115  00100A  EC53  F00D         	call	___ftmul	;wreg free
  2116  00100E  C028  F03A         	movff	?___ftmul,_scale$935
  2117  001012  C029  F03B         	movff	?___ftmul+1,_scale$935+1
  2118  001016  C02A  F03C         	movff	?___ftmul+2,_scale$935+2
  2119                           
  2120                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2121  00101A  C03A  F028         	movff	_scale$935,___ftmul@f1
  2122  00101E  C03B  F029         	movff	_scale$935+1,___ftmul@f1+1
  2123  001022  C03C  F02A         	movff	_scale$935+2,___ftmul@f1+2
  2124  001026  0E00               	movlw	0
  2125  001028  6E25               	movwf	___wmul@multiplicand+1,c
  2126  00102A  0E03               	movlw	3
  2127  00102C  6E24               	movwf	___wmul@multiplicand,c
  2128  00102E  0E00               	movlw	0
  2129  001030  6E17               	movwf	___awmod@divisor+1,c
  2130  001032  0E0A               	movlw	10
  2131  001034  6E16               	movwf	___awmod@divisor,c
  2132  001036  503D               	movf	scale@scl,w,c
  2133  001038  6E14               	movwf	___awmod@dividend,c
  2134  00103A  6A15               	clrf	___awmod@dividend+1,c
  2135  00103C  BE14               	btfsc	___awmod@dividend,7,c
  2136  00103E  0615               	decf	___awmod@dividend+1,f,c
  2137  001040  EC91  F010         	call	___awmod	;wreg free
  2138  001044  C014  F022         	movff	?___awmod,___wmul@multiplier
  2139  001048  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2140  00104C  EC7A  F011         	call	___wmul	;wreg free
  2141  001050  0E50               	movlw	low __npowers_
  2142  001052  2422               	addwf	?___wmul,w,c
  2143  001054  6EF6               	movwf	tblptrl,c
  2144  001056  0E08               	movlw	high __npowers_
  2145  001058  2023               	addwfc	?___wmul+1,w,c
  2146  00105A  6EF7               	movwf	tblptrh,c
  2147  00105C                     	if	0	;There are less than 3 active tblptr bytes
  2148  00105C                     	endif
  2149  00105C  0009               	tblrd		*+
  2150  00105E  CFF5 F02B          	movff	tablat,___ftmul@f2
  2151  001062  0009               	tblrd		*+
  2152  001064  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2153  001068  000A               	tblrd		*-
  2154  00106A  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2155  00106E  EC53  F00D         	call	___ftmul	;wreg free
  2156  001072  C028  F037         	movff	?___ftmul,?_scale
  2157  001076  C029  F038         	movff	?___ftmul+1,?_scale+1
  2158  00107A  C02A  F039         	movff	?___ftmul+2,?_scale+2
  2159  00107E  0012               	return	
  2160  001080                     l133:
  2161                           
  2162                           ;doprnt.c: 432: else if(scl > 10)
  2163  001080  503D               	movf	scale@scl,w,c
  2164  001082  0A80               	xorlw	128
  2165  001084  0F75               	addlw	-139
  2166  001086  A0D8               	btfss	status,0,c
  2167  001088  D053               	goto	l136
  2168                           
  2169                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2170  00108A  0E00               	movlw	0
  2171  00108C  6E1D               	movwf	___awdiv@divisor+1,c
  2172  00108E  0E0A               	movlw	10
  2173  001090  6E1C               	movwf	___awdiv@divisor,c
  2174  001092  503D               	movf	scale@scl,w,c
  2175  001094  6E1A               	movwf	___awdiv@dividend,c
  2176  001096  6A1B               	clrf	___awdiv@dividend+1,c
  2177  001098  BE1A               	btfsc	___awdiv@dividend,7,c
  2178  00109A  061B               	decf	___awdiv@dividend+1,f,c
  2179  00109C  EC93  F00F         	call	___awdiv	;wreg free
  2180  0010A0  0E09               	movlw	9
  2181  0010A2  241A               	addwf	?___awdiv,w,c
  2182  0010A4  6E22               	movwf	___wmul@multiplier,c
  2183  0010A6  0E00               	movlw	0
  2184  0010A8  201B               	addwfc	?___awdiv+1,w,c
  2185  0010AA  6E23               	movwf	___wmul@multiplier+1,c
  2186  0010AC  0E00               	movlw	0
  2187  0010AE  6E25               	movwf	___wmul@multiplicand+1,c
  2188  0010B0  0E03               	movlw	3
  2189  0010B2  6E24               	movwf	___wmul@multiplicand,c
  2190  0010B4  EC7A  F011         	call	___wmul	;wreg free
  2191  0010B8  0E50               	movlw	low __npowers_
  2192  0010BA  2422               	addwf	?___wmul,w,c
  2193  0010BC  6EF6               	movwf	tblptrl,c
  2194  0010BE  0E08               	movlw	high __npowers_
  2195  0010C0  2023               	addwfc	?___wmul+1,w,c
  2196  0010C2  6EF7               	movwf	tblptrh,c
  2197  0010C4                     	if	0	;There are less than 3 active tblptr bytes
  2198  0010C4                     	endif
  2199  0010C4  0009               	tblrd		*+
  2200  0010C6  CFF5 F028          	movff	tablat,___ftmul@f1
  2201  0010CA  0009               	tblrd		*+
  2202  0010CC  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2203  0010D0  000A               	tblrd		*-
  2204  0010D2  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2205  0010D6  0E00               	movlw	0
  2206  0010D8  6E25               	movwf	___wmul@multiplicand+1,c
  2207  0010DA  0E03               	movlw	3
  2208  0010DC  6E24               	movwf	___wmul@multiplicand,c
  2209  0010DE  0E00               	movlw	0
  2210  0010E0  6E17               	movwf	___awmod@divisor+1,c
  2211  0010E2  0E0A               	movlw	10
  2212  0010E4  6E16               	movwf	___awmod@divisor,c
  2213  0010E6  503D               	movf	scale@scl,w,c
  2214  0010E8  6E14               	movwf	___awmod@dividend,c
  2215  0010EA  6A15               	clrf	___awmod@dividend+1,c
  2216  0010EC  BE14               	btfsc	___awmod@dividend,7,c
  2217  0010EE  0615               	decf	___awmod@dividend+1,f,c
  2218  0010F0  EC91  F010         	call	___awmod	;wreg free
  2219  0010F4  C014  F022         	movff	?___awmod,___wmul@multiplier
  2220  0010F8  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2221  0010FC  EC7A  F011         	call	___wmul	;wreg free
  2222  001100  0E50               	movlw	low __npowers_
  2223  001102  2422               	addwf	?___wmul,w,c
  2224  001104  6EF6               	movwf	tblptrl,c
  2225  001106  0E08               	movlw	high __npowers_
  2226  001108  2023               	addwfc	?___wmul+1,w,c
  2227  00110A  6EF7               	movwf	tblptrh,c
  2228  00110C                     	if	0	;There are less than 3 active tblptr bytes
  2229  00110C                     	endif
  2230  00110C  0009               	tblrd		*+
  2231  00110E  CFF5 F02B          	movff	tablat,___ftmul@f2
  2232  001112  0009               	tblrd		*+
  2233  001114  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2234  001118  000A               	tblrd		*-
  2235  00111A  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2236  00111E  EC53  F00D         	call	___ftmul	;wreg free
  2237  001122  C028  F037         	movff	?___ftmul,?_scale
  2238  001126  C029  F038         	movff	?___ftmul+1,?_scale+1
  2239  00112A  C02A  F039         	movff	?___ftmul+2,?_scale+2
  2240  00112E  0012               	return	
  2241  001130                     l136:
  2242                           
  2243                           ;doprnt.c: 434: return _npowers_[scl];
  2244  001130  503D               	movf	scale@scl,w,c
  2245  001132  0D03               	mullw	3
  2246  001134  0E50               	movlw	low __npowers_
  2247  001136  24F3               	addwf	prodl,w,c
  2248  001138  6EF6               	movwf	tblptrl,c
  2249  00113A  0E08               	movlw	high __npowers_
  2250  00113C  20F4               	addwfc	prodh,w,c
  2251  00113E  6EF7               	movwf	tblptrh,c
  2252  001140                     	if	0	;There are less than 3 active tblptr bytes
  2253  001140                     	endif
  2254  001140  0009               	tblrd		*+
  2255  001142  CFF5 F037          	movff	tablat,?_scale
  2256  001146  0009               	tblrd		*+
  2257  001148  CFF5 F038          	movff	tablat,?_scale+1
  2258  00114C  000A               	tblrd		*-
  2259  00114E  CFF5 F039          	movff	tablat,?_scale+2
  2260  001152  0012               	return	
  2261  001154                     l132:
  2262                           
  2263                           ;doprnt.c: 435: }
  2264                           ;doprnt.c: 436: if(scl>=110)
  2265  001154  503D               	movf	scale@scl,w,c
  2266  001156  0A80               	xorlw	128
  2267  001158  0F12               	addlw	-238
  2268  00115A  A0D8               	btfss	status,0,c
  2269  00115C  D091               	goto	l137
  2270                           
  2271                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2272  00115E  0E00               	movlw	0
  2273  001160  6E25               	movwf	___wmul@multiplicand+1,c
  2274  001162  0E03               	movlw	3
  2275  001164  6E24               	movwf	___wmul@multiplicand,c
  2276  001166  0E00               	movlw	0
  2277  001168  6E1D               	movwf	___awdiv@divisor+1,c
  2278  00116A  0E0A               	movlw	10
  2279  00116C  6E1C               	movwf	___awdiv@divisor,c
  2280  00116E  0E00               	movlw	0
  2281  001170  6E17               	movwf	___awmod@divisor+1,c
  2282  001172  0E64               	movlw	100
  2283  001174  6E16               	movwf	___awmod@divisor,c
  2284  001176  503D               	movf	scale@scl,w,c
  2285  001178  6E14               	movwf	___awmod@dividend,c
  2286  00117A  6A15               	clrf	___awmod@dividend+1,c
  2287  00117C  BE14               	btfsc	___awmod@dividend,7,c
  2288  00117E  0615               	decf	___awmod@dividend+1,f,c
  2289  001180  EC91  F010         	call	___awmod	;wreg free
  2290  001184  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2291  001188  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2292  00118C  EC93  F00F         	call	___awdiv	;wreg free
  2293  001190  0E09               	movlw	9
  2294  001192  241A               	addwf	?___awdiv,w,c
  2295  001194  6E22               	movwf	___wmul@multiplier,c
  2296  001196  0E00               	movlw	0
  2297  001198  201B               	addwfc	?___awdiv+1,w,c
  2298  00119A  6E23               	movwf	___wmul@multiplier+1,c
  2299  00119C  EC7A  F011         	call	___wmul	;wreg free
  2300  0011A0  0E29               	movlw	low __powers_
  2301  0011A2  2422               	addwf	?___wmul,w,c
  2302  0011A4  6EF6               	movwf	tblptrl,c
  2303  0011A6  0E08               	movlw	high __powers_
  2304  0011A8  2023               	addwfc	?___wmul+1,w,c
  2305  0011AA  6EF7               	movwf	tblptrh,c
  2306  0011AC                     	if	0	;There are less than 3 active tblptr bytes
  2307  0011AC                     	endif
  2308  0011AC  0009               	tblrd		*+
  2309  0011AE  CFF5 F02B          	movff	tablat,___ftmul@f2
  2310  0011B2  0009               	tblrd		*+
  2311  0011B4  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2312  0011B8  000A               	tblrd		*-
  2313  0011BA  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2314  0011BE  0E00               	movlw	0
  2315  0011C0  6E1D               	movwf	___awdiv@divisor+1,c
  2316  0011C2  0E64               	movlw	100
  2317  0011C4  6E1C               	movwf	___awdiv@divisor,c
  2318  0011C6  503D               	movf	scale@scl,w,c
  2319  0011C8  6E1A               	movwf	___awdiv@dividend,c
  2320  0011CA  6A1B               	clrf	___awdiv@dividend+1,c
  2321  0011CC  BE1A               	btfsc	___awdiv@dividend,7,c
  2322  0011CE  061B               	decf	___awdiv@dividend+1,f,c
  2323  0011D0  EC93  F00F         	call	___awdiv	;wreg free
  2324  0011D4  0E12               	movlw	18
  2325  0011D6  241A               	addwf	?___awdiv,w,c
  2326  0011D8  6E22               	movwf	___wmul@multiplier,c
  2327  0011DA  0E00               	movlw	0
  2328  0011DC  201B               	addwfc	?___awdiv+1,w,c
  2329  0011DE  6E23               	movwf	___wmul@multiplier+1,c
  2330  0011E0  0E00               	movlw	0
  2331  0011E2  6E25               	movwf	___wmul@multiplicand+1,c
  2332  0011E4  0E03               	movlw	3
  2333  0011E6  6E24               	movwf	___wmul@multiplicand,c
  2334  0011E8  EC7A  F011         	call	___wmul	;wreg free
  2335  0011EC  0E29               	movlw	low __powers_
  2336  0011EE  2422               	addwf	?___wmul,w,c
  2337  0011F0  6EF6               	movwf	tblptrl,c
  2338  0011F2  0E08               	movlw	high __powers_
  2339  0011F4  2023               	addwfc	?___wmul+1,w,c
  2340  0011F6  6EF7               	movwf	tblptrh,c
  2341  0011F8                     	if	0	;There are less than 3 active tblptr bytes
  2342  0011F8                     	endif
  2343  0011F8  0009               	tblrd		*+
  2344  0011FA  CFF5 F028          	movff	tablat,___ftmul@f1
  2345  0011FE  0009               	tblrd		*+
  2346  001200  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2347  001204  000A               	tblrd		*-
  2348  001206  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2349  00120A  EC53  F00D         	call	___ftmul	;wreg free
  2350  00120E  C028  F03A         	movff	?___ftmul,_scale$935
  2351  001212  C029  F03B         	movff	?___ftmul+1,_scale$935+1
  2352  001216  C02A  F03C         	movff	?___ftmul+2,_scale$935+2
  2353                           
  2354                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2355  00121A  C03A  F028         	movff	_scale$935,___ftmul@f1
  2356  00121E  C03B  F029         	movff	_scale$935+1,___ftmul@f1+1
  2357  001222  C03C  F02A         	movff	_scale$935+2,___ftmul@f1+2
  2358  001226  0E00               	movlw	0
  2359  001228  6E25               	movwf	___wmul@multiplicand+1,c
  2360  00122A  0E03               	movlw	3
  2361  00122C  6E24               	movwf	___wmul@multiplicand,c
  2362  00122E  0E00               	movlw	0
  2363  001230  6E17               	movwf	___awmod@divisor+1,c
  2364  001232  0E0A               	movlw	10
  2365  001234  6E16               	movwf	___awmod@divisor,c
  2366  001236  503D               	movf	scale@scl,w,c
  2367  001238  6E14               	movwf	___awmod@dividend,c
  2368  00123A  6A15               	clrf	___awmod@dividend+1,c
  2369  00123C  BE14               	btfsc	___awmod@dividend,7,c
  2370  00123E  0615               	decf	___awmod@dividend+1,f,c
  2371  001240  EC91  F010         	call	___awmod	;wreg free
  2372  001244  C014  F022         	movff	?___awmod,___wmul@multiplier
  2373  001248  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2374  00124C  EC7A  F011         	call	___wmul	;wreg free
  2375  001250  0E29               	movlw	low __powers_
  2376  001252  2422               	addwf	?___wmul,w,c
  2377  001254  6EF6               	movwf	tblptrl,c
  2378  001256  0E08               	movlw	high __powers_
  2379  001258  2023               	addwfc	?___wmul+1,w,c
  2380  00125A  6EF7               	movwf	tblptrh,c
  2381  00125C                     	if	0	;There are less than 3 active tblptr bytes
  2382  00125C                     	endif
  2383  00125C  0009               	tblrd		*+
  2384  00125E  CFF5 F02B          	movff	tablat,___ftmul@f2
  2385  001262  0009               	tblrd		*+
  2386  001264  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2387  001268  000A               	tblrd		*-
  2388  00126A  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2389  00126E  EC53  F00D         	call	___ftmul	;wreg free
  2390  001272  C028  F037         	movff	?___ftmul,?_scale
  2391  001276  C029  F038         	movff	?___ftmul+1,?_scale+1
  2392  00127A  C02A  F039         	movff	?___ftmul+2,?_scale+2
  2393  00127E  0012               	return	
  2394  001280                     l137:
  2395                           
  2396                           ;doprnt.c: 438: else if(scl > 10)
  2397  001280  503D               	movf	scale@scl,w,c
  2398  001282  0A80               	xorlw	128
  2399  001284  0F75               	addlw	-139
  2400  001286  A0D8               	btfss	status,0,c
  2401  001288  D053               	goto	l139
  2402                           
  2403                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2404  00128A  0E00               	movlw	0
  2405  00128C  6E1D               	movwf	___awdiv@divisor+1,c
  2406  00128E  0E0A               	movlw	10
  2407  001290  6E1C               	movwf	___awdiv@divisor,c
  2408  001292  503D               	movf	scale@scl,w,c
  2409  001294  6E1A               	movwf	___awdiv@dividend,c
  2410  001296  6A1B               	clrf	___awdiv@dividend+1,c
  2411  001298  BE1A               	btfsc	___awdiv@dividend,7,c
  2412  00129A  061B               	decf	___awdiv@dividend+1,f,c
  2413  00129C  EC93  F00F         	call	___awdiv	;wreg free
  2414  0012A0  0E09               	movlw	9
  2415  0012A2  241A               	addwf	?___awdiv,w,c
  2416  0012A4  6E22               	movwf	___wmul@multiplier,c
  2417  0012A6  0E00               	movlw	0
  2418  0012A8  201B               	addwfc	?___awdiv+1,w,c
  2419  0012AA  6E23               	movwf	___wmul@multiplier+1,c
  2420  0012AC  0E00               	movlw	0
  2421  0012AE  6E25               	movwf	___wmul@multiplicand+1,c
  2422  0012B0  0E03               	movlw	3
  2423  0012B2  6E24               	movwf	___wmul@multiplicand,c
  2424  0012B4  EC7A  F011         	call	___wmul	;wreg free
  2425  0012B8  0E29               	movlw	low __powers_
  2426  0012BA  2422               	addwf	?___wmul,w,c
  2427  0012BC  6EF6               	movwf	tblptrl,c
  2428  0012BE  0E08               	movlw	high __powers_
  2429  0012C0  2023               	addwfc	?___wmul+1,w,c
  2430  0012C2  6EF7               	movwf	tblptrh,c
  2431  0012C4                     	if	0	;There are less than 3 active tblptr bytes
  2432  0012C4                     	endif
  2433  0012C4  0009               	tblrd		*+
  2434  0012C6  CFF5 F028          	movff	tablat,___ftmul@f1
  2435  0012CA  0009               	tblrd		*+
  2436  0012CC  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2437  0012D0  000A               	tblrd		*-
  2438  0012D2  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2439  0012D6  0E00               	movlw	0
  2440  0012D8  6E25               	movwf	___wmul@multiplicand+1,c
  2441  0012DA  0E03               	movlw	3
  2442  0012DC  6E24               	movwf	___wmul@multiplicand,c
  2443  0012DE  0E00               	movlw	0
  2444  0012E0  6E17               	movwf	___awmod@divisor+1,c
  2445  0012E2  0E0A               	movlw	10
  2446  0012E4  6E16               	movwf	___awmod@divisor,c
  2447  0012E6  503D               	movf	scale@scl,w,c
  2448  0012E8  6E14               	movwf	___awmod@dividend,c
  2449  0012EA  6A15               	clrf	___awmod@dividend+1,c
  2450  0012EC  BE14               	btfsc	___awmod@dividend,7,c
  2451  0012EE  0615               	decf	___awmod@dividend+1,f,c
  2452  0012F0  EC91  F010         	call	___awmod	;wreg free
  2453  0012F4  C014  F022         	movff	?___awmod,___wmul@multiplier
  2454  0012F8  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2455  0012FC  EC7A  F011         	call	___wmul	;wreg free
  2456  001300  0E29               	movlw	low __powers_
  2457  001302  2422               	addwf	?___wmul,w,c
  2458  001304  6EF6               	movwf	tblptrl,c
  2459  001306  0E08               	movlw	high __powers_
  2460  001308  2023               	addwfc	?___wmul+1,w,c
  2461  00130A  6EF7               	movwf	tblptrh,c
  2462  00130C                     	if	0	;There are less than 3 active tblptr bytes
  2463  00130C                     	endif
  2464  00130C  0009               	tblrd		*+
  2465  00130E  CFF5 F02B          	movff	tablat,___ftmul@f2
  2466  001312  0009               	tblrd		*+
  2467  001314  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2468  001318  000A               	tblrd		*-
  2469  00131A  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2470  00131E  EC53  F00D         	call	___ftmul	;wreg free
  2471  001322  C028  F037         	movff	?___ftmul,?_scale
  2472  001326  C029  F038         	movff	?___ftmul+1,?_scale+1
  2473  00132A  C02A  F039         	movff	?___ftmul+2,?_scale+2
  2474  00132E  0012               	return	
  2475  001330                     l139:
  2476                           
  2477                           ;doprnt.c: 440: return _powers_[scl];
  2478  001330  503D               	movf	scale@scl,w,c
  2479  001332  0D03               	mullw	3
  2480  001334  0E29               	movlw	low __powers_
  2481  001336  24F3               	addwf	prodl,w,c
  2482  001338  6EF6               	movwf	tblptrl,c
  2483  00133A  0E08               	movlw	high __powers_
  2484  00133C  20F4               	addwfc	prodh,w,c
  2485  00133E  6EF7               	movwf	tblptrh,c
  2486  001340                     	if	0	;There are less than 3 active tblptr bytes
  2487  001340                     	endif
  2488  001340  0009               	tblrd		*+
  2489  001342  CFF5 F037          	movff	tablat,?_scale
  2490  001346  0009               	tblrd		*+
  2491  001348  CFF5 F038          	movff	tablat,?_scale+1
  2492  00134C  000A               	tblrd		*-
  2493  00134E  CFF5 F039          	movff	tablat,?_scale+2
  2494  001352  0012               	return	
  2495  001354                     __end_of_scale:
  2496                           	opt stack 0
  2497                           tblptru	equ	0xFF8
  2498                           tblptrh	equ	0xFF7
  2499                           tblptrl	equ	0xFF6
  2500                           tablat	equ	0xFF5
  2501                           prodh	equ	0xFF4
  2502                           prodl	equ	0xFF3
  2503                           intcon	equ	0xFF2
  2504                           wreg	equ	0xFE8
  2505                           postinc2	equ	0xFDE
  2506                           postdec2	equ	0xFDD
  2507                           fsr2h	equ	0xFDA
  2508                           fsr2l	equ	0xFD9
  2509                           status	equ	0xFD8
  2510                           
  2511 ;; *************** function _putch *****************
  2512 ;; Defined at:
  2513 ;;		line 71 in file "main.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;  data            1    wreg     unsigned char 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  data            1   24[COMRAM] unsigned char 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, status,2, status,0, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2527 ;;      Params:         0       0       0       0       0       0       0       0       0
  2528 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2530 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2531 ;;Total ram usage:        1 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    4
  2534 ;; This function calls:
  2535 ;;		_escreve_lcd
  2536 ;; This function is called by:
  2537 ;;		_printf
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text3
  2542  0023CE                     __ptext3:
  2543                           	opt stack 0
  2544  0023CE                     _putch:
  2545                           	opt stack 25
  2546                           
  2547                           ;incstack = 0
  2548                           ;putch@data stored from wreg
  2549  0023CE  6E19               	movwf	putch@data,c
  2550                           
  2551                           ;main.c: 72: escreve_lcd(data);
  2552  0023D0  5019               	movf	putch@data,w,c
  2553  0023D2  ECE0  F011         	call	_escreve_lcd
  2554  0023D6  0012               	return		;funcret
  2555  0023D8                     __end_of_putch:
  2556                           	opt stack 0
  2557                           tblptru	equ	0xFF8
  2558                           tblptrh	equ	0xFF7
  2559                           tblptrl	equ	0xFF6
  2560                           tablat	equ	0xFF5
  2561                           prodh	equ	0xFF4
  2562                           prodl	equ	0xFF3
  2563                           intcon	equ	0xFF2
  2564                           wreg	equ	0xFE8
  2565                           postinc2	equ	0xFDE
  2566                           postdec2	equ	0xFDD
  2567                           fsr2h	equ	0xFDA
  2568                           fsr2l	equ	0xFD9
  2569                           status	equ	0xFD8
  2570                           
  2571 ;; *************** function _escreve_lcd *****************
  2572 ;; Defined at:
  2573 ;;		line 33 in file "lcd.c"
  2574 ;; Parameters:    Size  Location     Type
  2575 ;;  c               1    wreg     unsigned char 
  2576 ;; Auto vars:     Size  Location     Type
  2577 ;;  c               1   23[COMRAM] unsigned char 
  2578 ;; Return value:  Size  Location     Type
  2579 ;;                  1    wreg      void 
  2580 ;; Registers used:
  2581 ;;		wreg, status,2, status,0, cstack
  2582 ;; Tracked objects:
  2583 ;;		On entry : 0/0
  2584 ;;		On exit  : 0/0
  2585 ;;		Unchanged: 0/0
  2586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2587 ;;      Params:         0       0       0       0       0       0       0       0       0
  2588 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2589 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2590 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2591 ;;Total ram usage:        1 bytes
  2592 ;; Hardware stack levels used:    1
  2593 ;; Hardware stack levels required when called:    3
  2594 ;; This function calls:
  2595 ;;		_envia_byte_lcd
  2596 ;; This function is called by:
  2597 ;;		_putch
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600                           
  2601                           	psect	text4
  2602  0023C0                     __ptext4:
  2603                           	opt stack 0
  2604  0023C0                     _escreve_lcd:
  2605                           	opt stack 25
  2606                           
  2607                           ;incstack = 0
  2608                           ;escreve_lcd@c stored from wreg
  2609  0023C0  6E18               	movwf	escreve_lcd@c,c
  2610  0023C2  C018  F016         	movff	escreve_lcd@c,envia_byte_lcd@dado
  2611  0023C6  0E01               	movlw	1
  2612  0023C8  EC4B  F011         	call	_envia_byte_lcd
  2613  0023CC  0012               	return		;funcret
  2614  0023CE                     __end_of_escreve_lcd:
  2615                           	opt stack 0
  2616                           tblptru	equ	0xFF8
  2617                           tblptrh	equ	0xFF7
  2618                           tblptrl	equ	0xFF6
  2619                           tablat	equ	0xFF5
  2620                           prodh	equ	0xFF4
  2621                           prodl	equ	0xFF3
  2622                           intcon	equ	0xFF2
  2623                           wreg	equ	0xFE8
  2624                           postinc2	equ	0xFDE
  2625                           postdec2	equ	0xFDD
  2626                           fsr2h	equ	0xFDA
  2627                           fsr2l	equ	0xFD9
  2628                           status	equ	0xFD8
  2629                           
  2630 ;; *************** function _isdigit *****************
  2631 ;; Defined at:
  2632 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\isdigit.c"
  2633 ;; Parameters:    Size  Location     Type
  2634 ;;  c               1    wreg     unsigned char 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;  c               1   21[COMRAM] unsigned char 
  2637 ;; Return value:  Size  Location     Type
  2638 ;;		None               void
  2639 ;; Registers used:
  2640 ;;		wreg, status,2, status,0
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2646 ;;      Params:         0       0       0       0       0       0       0       0       0
  2647 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2648 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2649 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2650 ;;Total ram usage:        3 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    1
  2653 ;; This function calls:
  2654 ;;		Nothing
  2655 ;; This function is called by:
  2656 ;;		_printf
  2657 ;; This function uses a non-reentrant model
  2658 ;;
  2659                           
  2660                           	psect	text5
  2661  002362                     __ptext5:
  2662                           	opt stack 0
  2663  002362                     _isdigit:
  2664                           	opt stack 28
  2665                           
  2666                           ;incstack = 0
  2667                           ;isdigit@c stored from wreg
  2668  002362  6E16               	movwf	isdigit@c,c
  2669  002364  0E00               	movlw	0
  2670  002366  6E15               	movwf	_isdigit$595,c
  2671  002368  0E3A               	movlw	58
  2672  00236A  6016               	cpfslt	isdigit@c,c
  2673  00236C  D005               	goto	l564
  2674  00236E  0E2F               	movlw	47
  2675  002370  6416               	cpfsgt	isdigit@c,c
  2676  002372  D002               	goto	l564
  2677  002374  0E01               	movlw	1
  2678  002376  6E15               	movwf	_isdigit$595,c
  2679  002378                     l564:
  2680  002378  C015  F014         	movff	_isdigit$595,??_isdigit
  2681  00237C  3014               	rrcf	??_isdigit,w,c
  2682  00237E  0012               	return	
  2683  002380                     __end_of_isdigit:
  2684                           	opt stack 0
  2685                           tblptru	equ	0xFF8
  2686                           tblptrh	equ	0xFF7
  2687                           tblptrl	equ	0xFF6
  2688                           tablat	equ	0xFF5
  2689                           prodh	equ	0xFF4
  2690                           prodl	equ	0xFF3
  2691                           intcon	equ	0xFF2
  2692                           wreg	equ	0xFE8
  2693                           postinc2	equ	0xFDE
  2694                           postdec2	equ	0xFDD
  2695                           fsr2h	equ	0xFDA
  2696                           fsr2l	equ	0xFD9
  2697                           status	equ	0xFD8
  2698                           
  2699 ;; *************** function _fround *****************
  2700 ;; Defined at:
  2701 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\doprnt.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  prec            1    wreg     unsigned char 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  prec            1   63[COMRAM] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;                  3   54[COMRAM] unsigned char 
  2708 ;; Registers used:
  2709 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2710 ;; Tracked objects:
  2711 ;;		On entry : 0/0
  2712 ;;		On exit  : 0/0
  2713 ;;		Unchanged: 0/0
  2714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2715 ;;      Params:         3       0       0       0       0       0       0       0       0
  2716 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2718 ;;      Totals:        10       0       0       0       0       0       0       0       0
  2719 ;;Total ram usage:       10 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; Hardware stack levels required when called:    3
  2722 ;; This function calls:
  2723 ;;		___awdiv
  2724 ;;		___awmod
  2725 ;;		___ftmul
  2726 ;;		___wmul
  2727 ;; This function is called by:
  2728 ;;		_printf
  2729 ;; This function uses a non-reentrant model
  2730 ;;
  2731                           
  2732                           	psect	text6
  2733  001354                     __ptext6:
  2734                           	opt stack 0
  2735  001354                     _fround:
  2736                           	opt stack 26
  2737                           
  2738                           ;incstack = 0
  2739                           ;fround@prec stored from wreg
  2740  001354  6E40               	movwf	fround@prec,c
  2741                           
  2742                           ;doprnt.c: 413: if(prec>=110)
  2743  001356  0E6D               	movlw	109
  2744  001358  6440               	cpfsgt	fround@prec,c
  2745  00135A  D09F               	goto	l126
  2746                           
  2747                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2748  00135C  0E00               	movlw	0
  2749  00135E  6E25               	movwf	___wmul@multiplicand+1,c
  2750  001360  0E03               	movlw	3
  2751  001362  6E24               	movwf	___wmul@multiplicand,c
  2752  001364  0E00               	movlw	0
  2753  001366  6E1D               	movwf	___awdiv@divisor+1,c
  2754  001368  0E0A               	movlw	10
  2755  00136A  6E1C               	movwf	___awdiv@divisor,c
  2756  00136C  0E00               	movlw	0
  2757  00136E  6E17               	movwf	___awmod@divisor+1,c
  2758  001370  0E64               	movlw	100
  2759  001372  6E16               	movwf	___awmod@divisor,c
  2760  001374  C040  F014         	movff	fround@prec,___awmod@dividend
  2761  001378  6A15               	clrf	___awmod@dividend+1,c
  2762  00137A  EC91  F010         	call	___awmod	;wreg free
  2763  00137E  C014  F01A         	movff	?___awmod,___awdiv@dividend
  2764  001382  C015  F01B         	movff	?___awmod+1,___awdiv@dividend+1
  2765  001386  EC93  F00F         	call	___awdiv	;wreg free
  2766  00138A  0E09               	movlw	9
  2767  00138C  241A               	addwf	?___awdiv,w,c
  2768  00138E  6E22               	movwf	___wmul@multiplier,c
  2769  001390  0E00               	movlw	0
  2770  001392  201B               	addwfc	?___awdiv+1,w,c
  2771  001394  6E23               	movwf	___wmul@multiplier+1,c
  2772  001396  EC7A  F011         	call	___wmul	;wreg free
  2773  00139A  0E50               	movlw	low __npowers_
  2774  00139C  2422               	addwf	?___wmul,w,c
  2775  00139E  6EF6               	movwf	tblptrl,c
  2776  0013A0  0E08               	movlw	high __npowers_
  2777  0013A2  2023               	addwfc	?___wmul+1,w,c
  2778  0013A4  6EF7               	movwf	tblptrh,c
  2779  0013A6                     	if	0	;There are less than 3 active tblptr bytes
  2780  0013A6                     	endif
  2781  0013A6  0009               	tblrd		*+
  2782  0013A8  CFF5 F02B          	movff	tablat,___ftmul@f2
  2783  0013AC  0009               	tblrd		*+
  2784  0013AE  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2785  0013B2  000A               	tblrd		*-
  2786  0013B4  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2787  0013B8  0E00               	movlw	0
  2788  0013BA  6E1D               	movwf	___awdiv@divisor+1,c
  2789  0013BC  0E64               	movlw	100
  2790  0013BE  6E1C               	movwf	___awdiv@divisor,c
  2791  0013C0  C040  F01A         	movff	fround@prec,___awdiv@dividend
  2792  0013C4  6A1B               	clrf	___awdiv@dividend+1,c
  2793  0013C6  EC93  F00F         	call	___awdiv	;wreg free
  2794  0013CA  0E12               	movlw	18
  2795  0013CC  241A               	addwf	?___awdiv,w,c
  2796  0013CE  6E22               	movwf	___wmul@multiplier,c
  2797  0013D0  0E00               	movlw	0
  2798  0013D2  201B               	addwfc	?___awdiv+1,w,c
  2799  0013D4  6E23               	movwf	___wmul@multiplier+1,c
  2800  0013D6  0E00               	movlw	0
  2801  0013D8  6E25               	movwf	___wmul@multiplicand+1,c
  2802  0013DA  0E03               	movlw	3
  2803  0013DC  6E24               	movwf	___wmul@multiplicand,c
  2804  0013DE  EC7A  F011         	call	___wmul	;wreg free
  2805  0013E2  0E50               	movlw	low __npowers_
  2806  0013E4  2422               	addwf	?___wmul,w,c
  2807  0013E6  6EF6               	movwf	tblptrl,c
  2808  0013E8  0E08               	movlw	high __npowers_
  2809  0013EA  2023               	addwfc	?___wmul+1,w,c
  2810  0013EC  6EF7               	movwf	tblptrh,c
  2811  0013EE                     	if	0	;There are less than 3 active tblptr bytes
  2812  0013EE                     	endif
  2813  0013EE  0009               	tblrd		*+
  2814  0013F0  CFF5 F028          	movff	tablat,___ftmul@f1
  2815  0013F4  0009               	tblrd		*+
  2816  0013F6  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2817  0013FA  000A               	tblrd		*-
  2818  0013FC  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2819  001400  EC53  F00D         	call	___ftmul	;wreg free
  2820  001404  C028  F03D         	movff	?___ftmul,_fround$933
  2821  001408  C029  F03E         	movff	?___ftmul+1,_fround$933+1
  2822  00140C  C02A  F03F         	movff	?___ftmul+2,_fround$933+2
  2823                           
  2824                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2825  001410  0E00               	movlw	0
  2826  001412  6E25               	movwf	___wmul@multiplicand+1,c
  2827  001414  0E03               	movlw	3
  2828  001416  6E24               	movwf	___wmul@multiplicand,c
  2829  001418  0E00               	movlw	0
  2830  00141A  6E17               	movwf	___awmod@divisor+1,c
  2831  00141C  0E0A               	movlw	10
  2832  00141E  6E16               	movwf	___awmod@divisor,c
  2833  001420  C040  F014         	movff	fround@prec,___awmod@dividend
  2834  001424  6A15               	clrf	___awmod@dividend+1,c
  2835  001426  EC91  F010         	call	___awmod	;wreg free
  2836  00142A  C014  F022         	movff	?___awmod,___wmul@multiplier
  2837  00142E  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2838  001432  EC7A  F011         	call	___wmul	;wreg free
  2839  001436  0E50               	movlw	low __npowers_
  2840  001438  2422               	addwf	?___wmul,w,c
  2841  00143A  6EF6               	movwf	tblptrl,c
  2842  00143C  0E08               	movlw	high __npowers_
  2843  00143E  2023               	addwfc	?___wmul+1,w,c
  2844  001440  6EF7               	movwf	tblptrh,c
  2845  001442                     	if	0	;There are less than 3 active tblptr bytes
  2846  001442                     	endif
  2847  001442  0009               	tblrd		*+
  2848  001444  CFF5 F02B          	movff	tablat,___ftmul@f2
  2849  001448  0009               	tblrd		*+
  2850  00144A  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2851  00144E  000A               	tblrd		*-
  2852  001450  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2853  001454  C03D  F028         	movff	_fround$933,___ftmul@f1
  2854  001458  C03E  F029         	movff	_fround$933+1,___ftmul@f1+1
  2855  00145C  C03F  F02A         	movff	_fround$933+2,___ftmul@f1+2
  2856  001460  EC53  F00D         	call	___ftmul	;wreg free
  2857  001464  C028  F03A         	movff	?___ftmul,_fround$934
  2858  001468  C029  F03B         	movff	?___ftmul+1,_fround$934+1
  2859  00146C  C02A  F03C         	movff	?___ftmul+2,_fround$934+2
  2860                           
  2861                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2862  001470  C03A  F028         	movff	_fround$934,___ftmul@f1
  2863  001474  C03B  F029         	movff	_fround$934+1,___ftmul@f1+1
  2864  001478  C03C  F02A         	movff	_fround$934+2,___ftmul@f1+2
  2865  00147C  0E00               	movlw	0
  2866  00147E  6E2B               	movwf	___ftmul@f2,c
  2867  001480  0E00               	movlw	0
  2868  001482  6E2C               	movwf	___ftmul@f2+1,c
  2869  001484  0E3F               	movlw	63
  2870  001486  6E2D               	movwf	___ftmul@f2+2,c
  2871  001488  EC53  F00D         	call	___ftmul	;wreg free
  2872  00148C  C028  F037         	movff	?___ftmul,?_fround
  2873  001490  C029  F038         	movff	?___ftmul+1,?_fround+1
  2874  001494  C02A  F039         	movff	?___ftmul+2,?_fround+2
  2875  001498  0012               	return	
  2876  00149A                     l126:
  2877                           
  2878                           ;doprnt.c: 415: else if(prec > 10)
  2879  00149A  0E0A               	movlw	10
  2880  00149C  6440               	cpfsgt	fround@prec,c
  2881  00149E  D063               	goto	l129
  2882                           
  2883                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2884  0014A0  0E00               	movlw	0
  2885  0014A2  6E25               	movwf	___wmul@multiplicand+1,c
  2886  0014A4  0E03               	movlw	3
  2887  0014A6  6E24               	movwf	___wmul@multiplicand,c
  2888  0014A8  0E00               	movlw	0
  2889  0014AA  6E17               	movwf	___awmod@divisor+1,c
  2890  0014AC  0E0A               	movlw	10
  2891  0014AE  6E16               	movwf	___awmod@divisor,c
  2892  0014B0  C040  F014         	movff	fround@prec,___awmod@dividend
  2893  0014B4  6A15               	clrf	___awmod@dividend+1,c
  2894  0014B6  EC91  F010         	call	___awmod	;wreg free
  2895  0014BA  C014  F022         	movff	?___awmod,___wmul@multiplier
  2896  0014BE  C015  F023         	movff	?___awmod+1,___wmul@multiplier+1
  2897  0014C2  EC7A  F011         	call	___wmul	;wreg free
  2898  0014C6  0E50               	movlw	low __npowers_
  2899  0014C8  2422               	addwf	?___wmul,w,c
  2900  0014CA  6EF6               	movwf	tblptrl,c
  2901  0014CC  0E08               	movlw	high __npowers_
  2902  0014CE  2023               	addwfc	?___wmul+1,w,c
  2903  0014D0  6EF7               	movwf	tblptrh,c
  2904  0014D2                     	if	0	;There are less than 3 active tblptr bytes
  2905  0014D2                     	endif
  2906  0014D2  0009               	tblrd		*+
  2907  0014D4  CFF5 F02B          	movff	tablat,___ftmul@f2
  2908  0014D8  0009               	tblrd		*+
  2909  0014DA  CFF5 F02C          	movff	tablat,___ftmul@f2+1
  2910  0014DE  000A               	tblrd		*-
  2911  0014E0  CFF5 F02D          	movff	tablat,___ftmul@f2+2
  2912  0014E4  0E00               	movlw	0
  2913  0014E6  6E1D               	movwf	___awdiv@divisor+1,c
  2914  0014E8  0E0A               	movlw	10
  2915  0014EA  6E1C               	movwf	___awdiv@divisor,c
  2916  0014EC  C040  F01A         	movff	fround@prec,___awdiv@dividend
  2917  0014F0  6A1B               	clrf	___awdiv@dividend+1,c
  2918  0014F2  EC93  F00F         	call	___awdiv	;wreg free
  2919  0014F6  0E09               	movlw	9
  2920  0014F8  241A               	addwf	?___awdiv,w,c
  2921  0014FA  6E22               	movwf	___wmul@multiplier,c
  2922  0014FC  0E00               	movlw	0
  2923  0014FE  201B               	addwfc	?___awdiv+1,w,c
  2924  001500  6E23               	movwf	___wmul@multiplier+1,c
  2925  001502  0E00               	movlw	0
  2926  001504  6E25               	movwf	___wmul@multiplicand+1,c
  2927  001506  0E03               	movlw	3
  2928  001508  6E24               	movwf	___wmul@multiplicand,c
  2929  00150A  EC7A  F011         	call	___wmul	;wreg free
  2930  00150E  0E50               	movlw	low __npowers_
  2931  001510  2422               	addwf	?___wmul,w,c
  2932  001512  6EF6               	movwf	tblptrl,c
  2933  001514  0E08               	movlw	high __npowers_
  2934  001516  2023               	addwfc	?___wmul+1,w,c
  2935  001518  6EF7               	movwf	tblptrh,c
  2936  00151A                     	if	0	;There are less than 3 active tblptr bytes
  2937  00151A                     	endif
  2938  00151A  0009               	tblrd		*+
  2939  00151C  CFF5 F028          	movff	tablat,___ftmul@f1
  2940  001520  0009               	tblrd		*+
  2941  001522  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2942  001526  000A               	tblrd		*-
  2943  001528  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2944  00152C  EC53  F00D         	call	___ftmul	;wreg free
  2945  001530  C028  F03D         	movff	?___ftmul,_fround$933
  2946  001534  C029  F03E         	movff	?___ftmul+1,_fround$933+1
  2947  001538  C02A  F03F         	movff	?___ftmul+2,_fround$933+2
  2948                           
  2949                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2950  00153C  C03D  F028         	movff	_fround$933,___ftmul@f1
  2951  001540  C03E  F029         	movff	_fround$933+1,___ftmul@f1+1
  2952  001544  C03F  F02A         	movff	_fround$933+2,___ftmul@f1+2
  2953  001548  0E00               	movlw	0
  2954  00154A  6E2B               	movwf	___ftmul@f2,c
  2955  00154C  0E00               	movlw	0
  2956  00154E  6E2C               	movwf	___ftmul@f2+1,c
  2957  001550  0E3F               	movlw	63
  2958  001552  6E2D               	movwf	___ftmul@f2+2,c
  2959  001554  EC53  F00D         	call	___ftmul	;wreg free
  2960  001558  C028  F037         	movff	?___ftmul,?_fround
  2961  00155C  C029  F038         	movff	?___ftmul+1,?_fround+1
  2962  001560  C02A  F039         	movff	?___ftmul+2,?_fround+2
  2963  001564  0012               	return	
  2964  001566                     l129:
  2965                           
  2966                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2967  001566  5040               	movf	fround@prec,w,c
  2968  001568  0D03               	mullw	3
  2969  00156A  0E50               	movlw	low __npowers_
  2970  00156C  24F3               	addwf	prodl,w,c
  2971  00156E  6EF6               	movwf	tblptrl,c
  2972  001570  0E08               	movlw	high __npowers_
  2973  001572  20F4               	addwfc	prodh,w,c
  2974  001574  6EF7               	movwf	tblptrh,c
  2975  001576                     	if	0	;There are less than 3 active tblptr bytes
  2976  001576                     	endif
  2977  001576  0009               	tblrd		*+
  2978  001578  CFF5 F028          	movff	tablat,___ftmul@f1
  2979  00157C  0009               	tblrd		*+
  2980  00157E  CFF5 F029          	movff	tablat,___ftmul@f1+1
  2981  001582  000A               	tblrd		*-
  2982  001584  CFF5 F02A          	movff	tablat,___ftmul@f1+2
  2983  001588  0E00               	movlw	0
  2984  00158A  6E2B               	movwf	___ftmul@f2,c
  2985  00158C  0E00               	movlw	0
  2986  00158E  6E2C               	movwf	___ftmul@f2+1,c
  2987  001590  0E3F               	movlw	63
  2988  001592  6E2D               	movwf	___ftmul@f2+2,c
  2989  001594  EC53  F00D         	call	___ftmul	;wreg free
  2990  001598  C028  F037         	movff	?___ftmul,?_fround
  2991  00159C  C029  F038         	movff	?___ftmul+1,?_fround+1
  2992  0015A0  C02A  F039         	movff	?___ftmul+2,?_fround+2
  2993  0015A4  0012               	return	
  2994  0015A6                     __end_of_fround:
  2995                           	opt stack 0
  2996                           tblptru	equ	0xFF8
  2997                           tblptrh	equ	0xFF7
  2998                           tblptrl	equ	0xFF6
  2999                           tablat	equ	0xFF5
  3000                           prodh	equ	0xFF4
  3001                           prodl	equ	0xFF3
  3002                           intcon	equ	0xFF2
  3003                           wreg	equ	0xFE8
  3004                           postinc2	equ	0xFDE
  3005                           postdec2	equ	0xFDD
  3006                           fsr2h	equ	0xFDA
  3007                           fsr2l	equ	0xFD9
  3008                           status	equ	0xFD8
  3009                           
  3010 ;; *************** function ___wmul *****************
  3011 ;; Defined at:
  3012 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\Umul16.c"
  3013 ;; Parameters:    Size  Location     Type
  3014 ;;  multiplier      2   33[COMRAM] unsigned int 
  3015 ;;  multiplicand    2   35[COMRAM] unsigned int 
  3016 ;; Auto vars:     Size  Location     Type
  3017 ;;  product         2   37[COMRAM] unsigned int 
  3018 ;; Return value:  Size  Location     Type
  3019 ;;                  2   33[COMRAM] unsigned int 
  3020 ;; Registers used:
  3021 ;;		wreg, status,2, status,0, prodl, prodh
  3022 ;; Tracked objects:
  3023 ;;		On entry : 0/0
  3024 ;;		On exit  : 0/0
  3025 ;;		Unchanged: 0/0
  3026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3027 ;;      Params:         4       0       0       0       0       0       0       0       0
  3028 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3029 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3030 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3031 ;;Total ram usage:        6 bytes
  3032 ;; Hardware stack levels used:    1
  3033 ;; Hardware stack levels required when called:    1
  3034 ;; This function calls:
  3035 ;;		Nothing
  3036 ;; This function is called by:
  3037 ;;		_fround
  3038 ;;		_scale
  3039 ;;		_printf
  3040 ;; This function uses a non-reentrant model
  3041 ;;
  3042                           
  3043                           	psect	text7
  3044  0022F4                     __ptext7:
  3045                           	opt stack 0
  3046  0022F4                     ___wmul:
  3047                           	opt stack 27
  3048                           
  3049                           ;incstack = 0
  3050  0022F4  5022               	movf	___wmul@multiplier,w,c
  3051  0022F6  0224               	mulwf	___wmul@multiplicand,c
  3052  0022F8  CFF3 F026          	movff	prodl,___wmul@product
  3053  0022FC  CFF4 F027          	movff	prodh,___wmul@product+1
  3054  002300  5022               	movf	___wmul@multiplier,w,c
  3055  002302  0225               	mulwf	___wmul@multiplicand+1,c
  3056  002304  50F3               	movf	prodl,w,c
  3057  002306  2627               	addwf	___wmul@product+1,f,c
  3058  002308  5023               	movf	___wmul@multiplier+1,w,c
  3059  00230A  0224               	mulwf	___wmul@multiplicand,c
  3060  00230C  50F3               	movf	prodl,w,c
  3061  00230E  2627               	addwf	___wmul@product+1,f,c
  3062  002310  C026  F022         	movff	___wmul@product,?___wmul
  3063  002314  C027  F023         	movff	___wmul@product+1,?___wmul+1
  3064  002318  0012               	return	
  3065  00231A                     __end_of___wmul:
  3066                           	opt stack 0
  3067                           tblptru	equ	0xFF8
  3068                           tblptrh	equ	0xFF7
  3069                           tblptrl	equ	0xFF6
  3070                           tablat	equ	0xFF5
  3071                           prodh	equ	0xFF4
  3072                           prodl	equ	0xFF3
  3073                           intcon	equ	0xFF2
  3074                           wreg	equ	0xFE8
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function ___ftmul *****************
  3082 ;; Defined at:
  3083 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  f1              3   39[COMRAM] float 
  3086 ;;  f2              3   42[COMRAM] float 
  3087 ;; Auto vars:     Size  Location     Type
  3088 ;;  f3_as_produc    3   49[COMRAM] unsigned um
  3089 ;;  sign            1   53[COMRAM] unsigned char 
  3090 ;;  cntr            1   52[COMRAM] unsigned char 
  3091 ;;  exp             1   48[COMRAM] unsigned char 
  3092 ;; Return value:  Size  Location     Type
  3093 ;;                  3   39[COMRAM] float 
  3094 ;; Registers used:
  3095 ;;		wreg, status,2, status,0, cstack
  3096 ;; Tracked objects:
  3097 ;;		On entry : 0/0
  3098 ;;		On exit  : 0/0
  3099 ;;		Unchanged: 0/0
  3100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3101 ;;      Params:         6       0       0       0       0       0       0       0       0
  3102 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3103 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3104 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3105 ;;Total ram usage:       15 bytes
  3106 ;; Hardware stack levels used:    1
  3107 ;; Hardware stack levels required when called:    2
  3108 ;; This function calls:
  3109 ;;		___ftpack
  3110 ;; This function is called by:
  3111 ;;		_fround
  3112 ;;		_scale
  3113 ;;		_printf
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text8
  3118  001AA6                     __ptext8:
  3119                           	opt stack 0
  3120  001AA6                     ___ftmul:
  3121                           	opt stack 26
  3122                           
  3123                           ;incstack = 0
  3124  001AA6  C02A  F02E         	movff	___ftmul@f1+2,??___ftmul
  3125  001AAA  6A2F               	clrf	(??___ftmul+1)& (0+255),c
  3126  001AAC  6A30               	clrf	(??___ftmul+2)& (0+255),c
  3127  001AAE  3429               	rlcf	___ftmul@f1+1,w,c
  3128  001AB0  362E               	rlcf	??___ftmul& (0+255),f,c
  3129  001AB2  E301               	bnc	u1671
  3130  001AB4  802F               	bsf	(??___ftmul+1)& (0+255),0,c
  3131  001AB6                     u1671:
  3132  001AB6  502E               	movf	??___ftmul,w,c
  3133  001AB8  6E31               	movwf	___ftmul@exp,c
  3134  001ABA  5031               	movf	___ftmul@exp,w,c
  3135  001ABC  A4D8               	btfss	status,2,c
  3136  001ABE  D007               	goto	l528
  3137  001AC0  0E00               	movlw	0
  3138  001AC2  6E28               	movwf	?___ftmul,c
  3139  001AC4  0E00               	movlw	0
  3140  001AC6  6E29               	movwf	?___ftmul+1,c
  3141  001AC8  0E00               	movlw	0
  3142  001ACA  6E2A               	movwf	?___ftmul+2,c
  3143  001ACC  0012               	return	
  3144  001ACE                     l528:
  3145  001ACE  C02D  F02E         	movff	___ftmul@f2+2,??___ftmul
  3146  001AD2  6A2F               	clrf	(??___ftmul+1)& (0+255),c
  3147  001AD4  6A30               	clrf	(??___ftmul+2)& (0+255),c
  3148  001AD6  342C               	rlcf	___ftmul@f2+1,w,c
  3149  001AD8  362E               	rlcf	??___ftmul& (0+255),f,c
  3150  001ADA  E301               	bnc	u1691
  3151  001ADC  802F               	bsf	(??___ftmul+1)& (0+255),0,c
  3152  001ADE                     u1691:
  3153  001ADE  502E               	movf	??___ftmul,w,c
  3154  001AE0  6E36               	movwf	___ftmul@sign,c
  3155  001AE2  5036               	movf	___ftmul@sign,w,c
  3156  001AE4  A4D8               	btfss	status,2,c
  3157  001AE6  D007               	goto	l530
  3158  001AE8  0E00               	movlw	0
  3159  001AEA  6E28               	movwf	?___ftmul,c
  3160  001AEC  0E00               	movlw	0
  3161  001AEE  6E29               	movwf	?___ftmul+1,c
  3162  001AF0  0E00               	movlw	0
  3163  001AF2  6E2A               	movwf	?___ftmul+2,c
  3164  001AF4  0012               	return	
  3165  001AF6                     l530:
  3166  001AF6  5036               	movf	___ftmul@sign,w,c
  3167  001AF8  0F7B               	addlw	123
  3168  001AFA  2631               	addwf	___ftmul@exp,f,c
  3169  001AFC  C02A  F036         	movff	___ftmul@f1+2,___ftmul@sign
  3170  001B00  502D               	movf	___ftmul@f2+2,w,c
  3171  001B02  1A36               	xorwf	___ftmul@sign,f,c
  3172  001B04  0E80               	movlw	128
  3173  001B06  1636               	andwf	___ftmul@sign,f,c
  3174  001B08  8E29               	bsf	___ftmul@f1+1,7,c
  3175  001B0A  8E2C               	bsf	___ftmul@f2+1,7,c
  3176  001B0C  0EFF               	movlw	255
  3177  001B0E  162B               	andwf	___ftmul@f2,f,c
  3178  001B10  0EFF               	movlw	255
  3179  001B12  162C               	andwf	___ftmul@f2+1,f,c
  3180  001B14  0E00               	movlw	0
  3181  001B16  162D               	andwf	___ftmul@f2+2,f,c
  3182  001B18  0E00               	movlw	0
  3183  001B1A  6E32               	movwf	___ftmul@f3_as_product,c
  3184  001B1C  0E00               	movlw	0
  3185  001B1E  6E33               	movwf	___ftmul@f3_as_product+1,c
  3186  001B20  0E00               	movlw	0
  3187  001B22  6E34               	movwf	___ftmul@f3_as_product+2,c
  3188  001B24  0E07               	movlw	7
  3189  001B26  6E35               	movwf	___ftmul@cntr,c
  3190  001B28  A028               	btfss	___ftmul@f1,0,c
  3191  001B2A  D006               	goto	l532
  3192  001B2C  502B               	movf	___ftmul@f2,w,c
  3193  001B2E  2632               	addwf	___ftmul@f3_as_product,f,c
  3194  001B30  502C               	movf	___ftmul@f2+1,w,c
  3195  001B32  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  3196  001B34  502D               	movf	___ftmul@f2+2,w,c
  3197  001B36  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  3198  001B38                     l532:
  3199  001B38  90D8               	bcf	status,0,c
  3200  001B3A  322A               	rrcf	___ftmul@f1+2,f,c
  3201  001B3C  3229               	rrcf	___ftmul@f1+1,f,c
  3202  001B3E  3228               	rrcf	___ftmul@f1,f,c
  3203  001B40  90D8               	bcf	status,0,c
  3204  001B42  362B               	rlcf	___ftmul@f2,f,c
  3205  001B44  362C               	rlcf	___ftmul@f2+1,f,c
  3206  001B46  362D               	rlcf	___ftmul@f2+2,f,c
  3207  001B48  2E35               	decfsz	___ftmul@cntr,f,c
  3208  001B4A  D7EE               	goto	l531
  3209  001B4C  0E09               	movlw	9
  3210  001B4E  6E35               	movwf	___ftmul@cntr,c
  3211  001B50  A028               	btfss	___ftmul@f1,0,c
  3212  001B52  D006               	goto	l535
  3213  001B54  502B               	movf	___ftmul@f2,w,c
  3214  001B56  2632               	addwf	___ftmul@f3_as_product,f,c
  3215  001B58  502C               	movf	___ftmul@f2+1,w,c
  3216  001B5A  2233               	addwfc	___ftmul@f3_as_product+1,f,c
  3217  001B5C  502D               	movf	___ftmul@f2+2,w,c
  3218  001B5E  2234               	addwfc	___ftmul@f3_as_product+2,f,c
  3219  001B60                     l535:
  3220  001B60  90D8               	bcf	status,0,c
  3221  001B62  322A               	rrcf	___ftmul@f1+2,f,c
  3222  001B64  3229               	rrcf	___ftmul@f1+1,f,c
  3223  001B66  3228               	rrcf	___ftmul@f1,f,c
  3224  001B68  90D8               	bcf	status,0,c
  3225  001B6A  3234               	rrcf	___ftmul@f3_as_product+2,f,c
  3226  001B6C  3233               	rrcf	___ftmul@f3_as_product+1,f,c
  3227  001B6E  3232               	rrcf	___ftmul@f3_as_product,f,c
  3228  001B70  2E35               	decfsz	___ftmul@cntr,f,c
  3229  001B72  D7EE               	goto	l534
  3230  001B74  C032  F014         	movff	___ftmul@f3_as_product,___ftpack@arg
  3231  001B78  C033  F015         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3232  001B7C  C034  F016         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3233  001B80  C031  F017         	movff	___ftmul@exp,___ftpack@exp
  3234  001B84  C036  F018         	movff	___ftmul@sign,___ftpack@sign
  3235  001B88  EC9F  F00E         	call	___ftpack	;wreg free
  3236  001B8C  C014  F028         	movff	?___ftpack,?___ftmul
  3237  001B90  C015  F029         	movff	?___ftpack+1,?___ftmul+1
  3238  001B94  C016  F02A         	movff	?___ftpack+2,?___ftmul+2
  3239  001B98  0012               	return	
  3240  001B9A                     __end_of___ftmul:
  3241                           	opt stack 0
  3242                           tblptru	equ	0xFF8
  3243                           tblptrh	equ	0xFF7
  3244                           tblptrl	equ	0xFF6
  3245                           tablat	equ	0xFF5
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           intcon	equ	0xFF2
  3249                           wreg	equ	0xFE8
  3250                           postinc2	equ	0xFDE
  3251                           postdec2	equ	0xFDD
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function ___awmod *****************
  3257 ;; Defined at:
  3258 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awmod.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  dividend        2   19[COMRAM] int 
  3261 ;;  divisor         2   21[COMRAM] int 
  3262 ;; Auto vars:     Size  Location     Type
  3263 ;;  sign            1   24[COMRAM] unsigned char 
  3264 ;;  counter         1   23[COMRAM] unsigned char 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  2   19[COMRAM] int 
  3267 ;; Registers used:
  3268 ;;		wreg, status,2, status,0
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3274 ;;      Params:         4       0       0       0       0       0       0       0       0
  3275 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3276 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3277 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3278 ;;Total ram usage:        6 bytes
  3279 ;; Hardware stack levels used:    1
  3280 ;; Hardware stack levels required when called:    1
  3281 ;; This function calls:
  3282 ;;		Nothing
  3283 ;; This function is called by:
  3284 ;;		_fround
  3285 ;;		_scale
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text9
  3290  002122                     __ptext9:
  3291                           	opt stack 0
  3292  002122                     ___awmod:
  3293                           	opt stack 27
  3294                           
  3295                           ;incstack = 0
  3296  002122  0E00               	movlw	0
  3297  002124  6E19               	movwf	___awmod@sign,c
  3298  002126  AE15               	btfss	___awmod@dividend+1,7,c
  3299  002128  D006               	goto	l381
  3300  00212A  6C14               	negf	___awmod@dividend,c
  3301  00212C  1E15               	comf	___awmod@dividend+1,f,c
  3302  00212E  B0D8               	btfsc	status,0,c
  3303  002130  2A15               	incf	___awmod@dividend+1,f,c
  3304  002132  0E01               	movlw	1
  3305  002134  6E19               	movwf	___awmod@sign,c
  3306  002136                     l381:
  3307  002136  AE17               	btfss	___awmod@divisor+1,7,c
  3308  002138  D004               	goto	l382
  3309  00213A  6C16               	negf	___awmod@divisor,c
  3310  00213C  1E17               	comf	___awmod@divisor+1,f,c
  3311  00213E  B0D8               	btfsc	status,0,c
  3312  002140  2A17               	incf	___awmod@divisor+1,f,c
  3313  002142                     l382:
  3314  002142  5016               	movf	___awmod@divisor,w,c
  3315  002144  1017               	iorwf	___awmod@divisor+1,w,c
  3316  002146  B4D8               	btfsc	status,2,c
  3317  002148  D018               	goto	l389
  3318  00214A  0E01               	movlw	1
  3319  00214C  6E18               	movwf	___awmod@counter,c
  3320  00214E  D004               	goto	l384
  3321  002150  90D8               	bcf	status,0,c
  3322  002152  3616               	rlcf	___awmod@divisor,f,c
  3323  002154  3617               	rlcf	___awmod@divisor+1,f,c
  3324  002156  2A18               	incf	___awmod@counter,f,c
  3325  002158                     l384:
  3326  002158  AE17               	btfss	___awmod@divisor+1,7,c
  3327  00215A  D7FA               	goto	l385
  3328  00215C                     u1820:
  3329  00215C  5016               	movf	___awmod@divisor,w,c
  3330  00215E  5C14               	subwf	___awmod@dividend,w,c
  3331  002160  5017               	movf	___awmod@divisor+1,w,c
  3332  002162  5815               	subwfb	___awmod@dividend+1,w,c
  3333  002164  A0D8               	btfss	status,0,c
  3334  002166  D004               	goto	l388
  3335  002168  5016               	movf	___awmod@divisor,w,c
  3336  00216A  5E14               	subwf	___awmod@dividend,f,c
  3337  00216C  5017               	movf	___awmod@divisor+1,w,c
  3338  00216E  5A15               	subwfb	___awmod@dividend+1,f,c
  3339  002170                     l388:
  3340  002170  90D8               	bcf	status,0,c
  3341  002172  3217               	rrcf	___awmod@divisor+1,f,c
  3342  002174  3216               	rrcf	___awmod@divisor,f,c
  3343  002176  2E18               	decfsz	___awmod@counter,f,c
  3344  002178  D7F1               	goto	u1820
  3345  00217A                     l389:
  3346  00217A  5019               	movf	___awmod@sign,w,c
  3347  00217C  B4D8               	btfsc	status,2,c
  3348  00217E  D004               	goto	l390
  3349  002180  6C14               	negf	___awmod@dividend,c
  3350  002182  1E15               	comf	___awmod@dividend+1,f,c
  3351  002184  B0D8               	btfsc	status,0,c
  3352  002186  2A15               	incf	___awmod@dividend+1,f,c
  3353  002188                     l390:
  3354  002188  C014  F014         	movff	___awmod@dividend,?___awmod
  3355  00218C  C015  F015         	movff	___awmod@dividend+1,?___awmod+1
  3356  002190  0012               	return	
  3357  002192                     __end_of___awmod:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           intcon	equ	0xFF2
  3366                           wreg	equ	0xFE8
  3367                           postinc2	equ	0xFDE
  3368                           postdec2	equ	0xFDD
  3369                           fsr2h	equ	0xFDA
  3370                           fsr2l	equ	0xFD9
  3371                           status	equ	0xFD8
  3372                           
  3373 ;; *************** function ___awdiv *****************
  3374 ;; Defined at:
  3375 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  3376 ;; Parameters:    Size  Location     Type
  3377 ;;  dividend        2   25[COMRAM] int 
  3378 ;;  divisor         2   27[COMRAM] int 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  quotient        2   31[COMRAM] int 
  3381 ;;  sign            1   30[COMRAM] unsigned char 
  3382 ;;  counter         1   29[COMRAM] unsigned char 
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  2   25[COMRAM] int 
  3385 ;; Registers used:
  3386 ;;		wreg, status,2, status,0
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3392 ;;      Params:         4       0       0       0       0       0       0       0       0
  3393 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3394 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3395 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3396 ;;Total ram usage:        8 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    1
  3399 ;; This function calls:
  3400 ;;		Nothing
  3401 ;; This function is called by:
  3402 ;;		_fround
  3403 ;;		_scale
  3404 ;;		_printf
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text10
  3409  001F26                     __ptext10:
  3410                           	opt stack 0
  3411  001F26                     ___awdiv:
  3412                           	opt stack 27
  3413                           
  3414                           ;incstack = 0
  3415  001F26  0E00               	movlw	0
  3416  001F28  6E1F               	movwf	___awdiv@sign,c
  3417  001F2A  AE1D               	btfss	___awdiv@divisor+1,7,c
  3418  001F2C  D006               	goto	l368
  3419  001F2E  6C1C               	negf	___awdiv@divisor,c
  3420  001F30  1E1D               	comf	___awdiv@divisor+1,f,c
  3421  001F32  B0D8               	btfsc	status,0,c
  3422  001F34  2A1D               	incf	___awdiv@divisor+1,f,c
  3423  001F36  0E01               	movlw	1
  3424  001F38  6E1F               	movwf	___awdiv@sign,c
  3425  001F3A                     l368:
  3426  001F3A  AE1B               	btfss	___awdiv@dividend+1,7,c
  3427  001F3C  D006               	goto	l369
  3428  001F3E  6C1A               	negf	___awdiv@dividend,c
  3429  001F40  1E1B               	comf	___awdiv@dividend+1,f,c
  3430  001F42  B0D8               	btfsc	status,0,c
  3431  001F44  2A1B               	incf	___awdiv@dividend+1,f,c
  3432  001F46  0E01               	movlw	1
  3433  001F48  1A1F               	xorwf	___awdiv@sign,f,c
  3434  001F4A                     l369:
  3435  001F4A  0E00               	movlw	0
  3436  001F4C  6E21               	movwf	___awdiv@quotient+1,c
  3437  001F4E  0E00               	movlw	0
  3438  001F50  6E20               	movwf	___awdiv@quotient,c
  3439  001F52  501C               	movf	___awdiv@divisor,w,c
  3440  001F54  101D               	iorwf	___awdiv@divisor+1,w,c
  3441  001F56  B4D8               	btfsc	status,2,c
  3442  001F58  D01C               	goto	l376
  3443  001F5A  0E01               	movlw	1
  3444  001F5C  6E1E               	movwf	___awdiv@counter,c
  3445  001F5E  D004               	goto	l371
  3446  001F60  90D8               	bcf	status,0,c
  3447  001F62  361C               	rlcf	___awdiv@divisor,f,c
  3448  001F64  361D               	rlcf	___awdiv@divisor+1,f,c
  3449  001F66  2A1E               	incf	___awdiv@counter,f,c
  3450  001F68                     l371:
  3451  001F68  AE1D               	btfss	___awdiv@divisor+1,7,c
  3452  001F6A  D7FA               	goto	l372
  3453  001F6C                     u1760:
  3454  001F6C  90D8               	bcf	status,0,c
  3455  001F6E  3620               	rlcf	___awdiv@quotient,f,c
  3456  001F70  3621               	rlcf	___awdiv@quotient+1,f,c
  3457  001F72  501C               	movf	___awdiv@divisor,w,c
  3458  001F74  5C1A               	subwf	___awdiv@dividend,w,c
  3459  001F76  501D               	movf	___awdiv@divisor+1,w,c
  3460  001F78  581B               	subwfb	___awdiv@dividend+1,w,c
  3461  001F7A  A0D8               	btfss	status,0,c
  3462  001F7C  D005               	goto	l375
  3463  001F7E  501C               	movf	___awdiv@divisor,w,c
  3464  001F80  5E1A               	subwf	___awdiv@dividend,f,c
  3465  001F82  501D               	movf	___awdiv@divisor+1,w,c
  3466  001F84  5A1B               	subwfb	___awdiv@dividend+1,f,c
  3467  001F86  8020               	bsf	___awdiv@quotient,0,c
  3468  001F88                     l375:
  3469  001F88  90D8               	bcf	status,0,c
  3470  001F8A  321D               	rrcf	___awdiv@divisor+1,f,c
  3471  001F8C  321C               	rrcf	___awdiv@divisor,f,c
  3472  001F8E  2E1E               	decfsz	___awdiv@counter,f,c
  3473  001F90  D7ED               	goto	u1760
  3474  001F92                     l376:
  3475  001F92  501F               	movf	___awdiv@sign,w,c
  3476  001F94  B4D8               	btfsc	status,2,c
  3477  001F96  D004               	goto	l377
  3478  001F98  6C20               	negf	___awdiv@quotient,c
  3479  001F9A  1E21               	comf	___awdiv@quotient+1,f,c
  3480  001F9C  B0D8               	btfsc	status,0,c
  3481  001F9E  2A21               	incf	___awdiv@quotient+1,f,c
  3482  001FA0                     l377:
  3483  001FA0  C020  F01A         	movff	___awdiv@quotient,?___awdiv
  3484  001FA4  C021  F01B         	movff	___awdiv@quotient+1,?___awdiv+1
  3485  001FA8  0012               	return	
  3486  001FAA                     __end_of___awdiv:
  3487                           	opt stack 0
  3488                           tblptru	equ	0xFF8
  3489                           tblptrh	equ	0xFF7
  3490                           tblptrl	equ	0xFF6
  3491                           tablat	equ	0xFF5
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           intcon	equ	0xFF2
  3495                           wreg	equ	0xFE8
  3496                           postinc2	equ	0xFDE
  3497                           postdec2	equ	0xFDD
  3498                           fsr2h	equ	0xFDA
  3499                           fsr2l	equ	0xFD9
  3500                           status	equ	0xFD8
  3501                           
  3502 ;; *************** function __tdiv_to_l_ *****************
  3503 ;; Defined at:
  3504 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdivl.c"
  3505 ;; Parameters:    Size  Location     Type
  3506 ;;  f1              3   19[COMRAM] float 
  3507 ;;  f2              3   22[COMRAM] float 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  quot            4   28[COMRAM] unsigned long 
  3510 ;;  exp1            1   33[COMRAM] unsigned char 
  3511 ;;  cntr            1   32[COMRAM] unsigned char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  4   19[COMRAM] unsigned long 
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3521 ;;      Params:         6       0       0       0       0       0       0       0       0
  3522 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3523 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3524 ;;      Totals:        15       0       0       0       0       0       0       0       0
  3525 ;;Total ram usage:       15 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    1
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_printf
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text11
  3536  001754                     __ptext11:
  3537                           	opt stack 0
  3538  001754                     __tdiv_to_l_:
  3539                           	opt stack 28
  3540                           
  3541                           ;incstack = 0
  3542  001754  C016  F01A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3543  001758  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3544  00175A  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3545  00175C  3415               	rlcf	__tdiv_to_l_@f1+1,w,c
  3546  00175E  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3547  001760  E301               	bnc	u1941
  3548  001762  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3549  001764                     u1941:
  3550  001764  501A               	movf	??__tdiv_to_l_,w,c
  3551  001766  6E22               	movwf	__tdiv_to_l_@exp1,c
  3552  001768  5022               	movf	__tdiv_to_l_@exp1,w,c
  3553  00176A  A4D8               	btfss	status,2,c
  3554  00176C  D009               	goto	l504
  3555  00176E  0E00               	movlw	0
  3556  001770  6E14               	movwf	?__tdiv_to_l_,c
  3557  001772  0E00               	movlw	0
  3558  001774  6E15               	movwf	?__tdiv_to_l_+1,c
  3559  001776  0E00               	movlw	0
  3560  001778  6E16               	movwf	?__tdiv_to_l_+2,c
  3561  00177A  0E00               	movlw	0
  3562  00177C  6E17               	movwf	?__tdiv_to_l_+3,c
  3563  00177E  0012               	return	
  3564  001780                     l504:
  3565  001780  C019  F01A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3566  001784  6A1B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3567  001786  6A1C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3568  001788  3418               	rlcf	__tdiv_to_l_@f2+1,w,c
  3569  00178A  361A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3570  00178C  E301               	bnc	u1961
  3571  00178E  801B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3572  001790                     u1961:
  3573  001790  501A               	movf	??__tdiv_to_l_,w,c
  3574  001792  6E21               	movwf	__tdiv_to_l_@cntr,c
  3575  001794  5021               	movf	__tdiv_to_l_@cntr,w,c
  3576  001796  A4D8               	btfss	status,2,c
  3577  001798  D009               	goto	l506
  3578  00179A  0E00               	movlw	0
  3579  00179C  6E14               	movwf	?__tdiv_to_l_,c
  3580  00179E  0E00               	movlw	0
  3581  0017A0  6E15               	movwf	?__tdiv_to_l_+1,c
  3582  0017A2  0E00               	movlw	0
  3583  0017A4  6E16               	movwf	?__tdiv_to_l_+2,c
  3584  0017A6  0E00               	movlw	0
  3585  0017A8  6E17               	movwf	?__tdiv_to_l_+3,c
  3586  0017AA  0012               	return	
  3587  0017AC                     l506:
  3588  0017AC  8E15               	bsf	__tdiv_to_l_@f1+1,7,c
  3589  0017AE  0EFF               	movlw	255
  3590  0017B0  1614               	andwf	__tdiv_to_l_@f1,f,c
  3591  0017B2  0EFF               	movlw	255
  3592  0017B4  1615               	andwf	__tdiv_to_l_@f1+1,f,c
  3593  0017B6  0E00               	movlw	0
  3594  0017B8  1616               	andwf	__tdiv_to_l_@f1+2,f,c
  3595  0017BA  8E18               	bsf	__tdiv_to_l_@f2+1,7,c
  3596  0017BC  0EFF               	movlw	255
  3597  0017BE  1617               	andwf	__tdiv_to_l_@f2,f,c
  3598  0017C0  0EFF               	movlw	255
  3599  0017C2  1618               	andwf	__tdiv_to_l_@f2+1,f,c
  3600  0017C4  0E00               	movlw	0
  3601  0017C6  1619               	andwf	__tdiv_to_l_@f2+2,f,c
  3602  0017C8  0E00               	movlw	0
  3603  0017CA  6E1D               	movwf	__tdiv_to_l_@quot,c
  3604  0017CC  0E00               	movlw	0
  3605  0017CE  6E1E               	movwf	__tdiv_to_l_@quot+1,c
  3606  0017D0  0E00               	movlw	0
  3607  0017D2  6E1F               	movwf	__tdiv_to_l_@quot+2,c
  3608  0017D4  0E00               	movlw	0
  3609  0017D6  6E20               	movwf	__tdiv_to_l_@quot+3,c
  3610  0017D8  0E7F               	movlw	127
  3611  0017DA  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  3612  0017DC  5021               	movf	__tdiv_to_l_@cntr,w,c
  3613  0017DE  0F98               	addlw	152
  3614  0017E0  5E22               	subwf	__tdiv_to_l_@exp1,f,c
  3615  0017E2  0E18               	movlw	24
  3616  0017E4  6E21               	movwf	__tdiv_to_l_@cntr,c
  3617  0017E6                     l507:
  3618  0017E6  90D8               	bcf	status,0,c
  3619  0017E8  361D               	rlcf	__tdiv_to_l_@quot,f,c
  3620  0017EA  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  3621  0017EC  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  3622  0017EE  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  3623  0017F0  5017               	movf	__tdiv_to_l_@f2,w,c
  3624  0017F2  5C14               	subwf	__tdiv_to_l_@f1,w,c
  3625  0017F4  5018               	movf	__tdiv_to_l_@f2+1,w,c
  3626  0017F6  5815               	subwfb	__tdiv_to_l_@f1+1,w,c
  3627  0017F8  5019               	movf	__tdiv_to_l_@f2+2,w,c
  3628  0017FA  5816               	subwfb	__tdiv_to_l_@f1+2,w,c
  3629  0017FC  A0D8               	btfss	status,0,c
  3630  0017FE  D007               	goto	l508
  3631  001800  5017               	movf	__tdiv_to_l_@f2,w,c
  3632  001802  5E14               	subwf	__tdiv_to_l_@f1,f,c
  3633  001804  5018               	movf	__tdiv_to_l_@f2+1,w,c
  3634  001806  5A15               	subwfb	__tdiv_to_l_@f1+1,f,c
  3635  001808  5019               	movf	__tdiv_to_l_@f2+2,w,c
  3636  00180A  5A16               	subwfb	__tdiv_to_l_@f1+2,f,c
  3637  00180C  801D               	bsf	__tdiv_to_l_@quot,0,c
  3638  00180E                     l508:
  3639  00180E  90D8               	bcf	status,0,c
  3640  001810  3614               	rlcf	__tdiv_to_l_@f1,f,c
  3641  001812  3615               	rlcf	__tdiv_to_l_@f1+1,f,c
  3642  001814  3616               	rlcf	__tdiv_to_l_@f1+2,f,c
  3643  001816  2E21               	decfsz	__tdiv_to_l_@cntr,f,c
  3644  001818  D7E6               	goto	l507
  3645  00181A  AE22               	btfss	__tdiv_to_l_@exp1,7,c
  3646  00181C  D016               	goto	l510
  3647  00181E  5022               	movf	__tdiv_to_l_@exp1,w,c
  3648  001820  0A80               	xorlw	128
  3649  001822  0F97               	addlw	151
  3650  001824  B0D8               	btfsc	status,0,c
  3651  001826  D009               	goto	l511
  3652  001828  0E00               	movlw	0
  3653  00182A  6E14               	movwf	?__tdiv_to_l_,c
  3654  00182C  0E00               	movlw	0
  3655  00182E  6E15               	movwf	?__tdiv_to_l_+1,c
  3656  001830  0E00               	movlw	0
  3657  001832  6E16               	movwf	?__tdiv_to_l_+2,c
  3658  001834  0E00               	movlw	0
  3659  001836  6E17               	movwf	?__tdiv_to_l_+3,c
  3660  001838  0012               	return	
  3661  00183A                     l511:
  3662  00183A  90D8               	bcf	status,0,c
  3663  00183C  3220               	rrcf	__tdiv_to_l_@quot+3,f,c
  3664  00183E  321F               	rrcf	__tdiv_to_l_@quot+2,f,c
  3665  001840  321E               	rrcf	__tdiv_to_l_@quot+1,f,c
  3666  001842  321D               	rrcf	__tdiv_to_l_@quot,f,c
  3667  001844  3E22               	incfsz	__tdiv_to_l_@exp1,f,c
  3668  001846  D7F9               	goto	l511
  3669  001848  D015               	goto	u2020
  3670  00184A                     l510:
  3671  00184A  0E17               	movlw	23
  3672  00184C  6422               	cpfsgt	__tdiv_to_l_@exp1,c
  3673  00184E  D00F               	goto	l516
  3674  001850  0E00               	movlw	0
  3675  001852  6E14               	movwf	?__tdiv_to_l_,c
  3676  001854  0E00               	movlw	0
  3677  001856  6E15               	movwf	?__tdiv_to_l_+1,c
  3678  001858  0E00               	movlw	0
  3679  00185A  6E16               	movwf	?__tdiv_to_l_+2,c
  3680  00185C  0E00               	movlw	0
  3681  00185E  6E17               	movwf	?__tdiv_to_l_+3,c
  3682  001860  0012               	return	
  3683  001862  90D8               	bcf	status,0,c
  3684  001864  361D               	rlcf	__tdiv_to_l_@quot,f,c
  3685  001866  361E               	rlcf	__tdiv_to_l_@quot+1,f,c
  3686  001868  361F               	rlcf	__tdiv_to_l_@quot+2,f,c
  3687  00186A  3620               	rlcf	__tdiv_to_l_@quot+3,f,c
  3688  00186C  0622               	decf	__tdiv_to_l_@exp1,f,c
  3689  00186E                     l516:
  3690  00186E  5022               	movf	__tdiv_to_l_@exp1,w,c
  3691  001870  A4D8               	btfss	status,2,c
  3692  001872  D7F7               	goto	l517
  3693  001874                     u2020:
  3694  001874  C01D  F014         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3695  001878  C01E  F015         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3696  00187C  C01F  F016         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3697  001880  C020  F017         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3698  001884  0012               	return		;funcret
  3699  001886                     __end_of__tdiv_to_l_:
  3700                           	opt stack 0
  3701                           tblptru	equ	0xFF8
  3702                           tblptrh	equ	0xFF7
  3703                           tblptrl	equ	0xFF6
  3704                           tablat	equ	0xFF5
  3705                           prodh	equ	0xFF4
  3706                           prodl	equ	0xFF3
  3707                           intcon	equ	0xFF2
  3708                           wreg	equ	0xFE8
  3709                           postinc2	equ	0xFDE
  3710                           postdec2	equ	0xFDD
  3711                           fsr2h	equ	0xFDA
  3712                           fsr2l	equ	0xFD9
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function __div_to_l_ *****************
  3716 ;; Defined at:
  3717 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fldivl.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;  f1              3   19[COMRAM] unsigned long 
  3720 ;;  f2              3   22[COMRAM] unsigned long 
  3721 ;; Auto vars:     Size  Location     Type
  3722 ;;  quot            4   25[COMRAM] unsigned long 
  3723 ;;  exp1            1   30[COMRAM] unsigned char 
  3724 ;;  cntr            1   29[COMRAM] unsigned char 
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  4   19[COMRAM] unsigned long 
  3727 ;; Registers used:
  3728 ;;		wreg, status,2, status,0
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3734 ;;      Params:         6       0       0       0       0       0       0       0       0
  3735 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3736 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3737 ;;      Totals:        12       0       0       0       0       0       0       0       0
  3738 ;;Total ram usage:       12 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    1
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_printf
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text12
  3749  001886                     __ptext12:
  3750                           	opt stack 0
  3751  001886                     __div_to_l_:
  3752                           	opt stack 28
  3753                           
  3754                           ;incstack = 0
  3755  001886  3416               	rlcf	__div_to_l_@f1+2,w,c
  3756  001888  3417               	rlcf	__div_to_l_@f1+3,w,c
  3757  00188A  6E1F               	movwf	__div_to_l_@exp1,c
  3758  00188C  501F               	movf	__div_to_l_@exp1,w,c
  3759  00188E  A4D8               	btfss	status,2,c
  3760  001890  D009               	goto	l400
  3761  001892  0E00               	movlw	0
  3762  001894  6E14               	movwf	?__div_to_l_,c
  3763  001896  0E00               	movlw	0
  3764  001898  6E15               	movwf	?__div_to_l_+1,c
  3765  00189A  0E00               	movlw	0
  3766  00189C  6E16               	movwf	?__div_to_l_+2,c
  3767  00189E  0E00               	movlw	0
  3768  0018A0  6E17               	movwf	?__div_to_l_+3,c
  3769  0018A2  0012               	return	
  3770  0018A4                     l400:
  3771  0018A4  3419               	rlcf	__div_to_l_@f2+2,w,c
  3772  0018A6  341A               	rlcf	__div_to_l_@f2+3,w,c
  3773  0018A8  6E1E               	movwf	__div_to_l_@cntr,c
  3774  0018AA  501E               	movf	__div_to_l_@cntr,w,c
  3775  0018AC  A4D8               	btfss	status,2,c
  3776  0018AE  D009               	goto	l402
  3777  0018B0  0E00               	movlw	0
  3778  0018B2  6E14               	movwf	?__div_to_l_,c
  3779  0018B4  0E00               	movlw	0
  3780  0018B6  6E15               	movwf	?__div_to_l_+1,c
  3781  0018B8  0E00               	movlw	0
  3782  0018BA  6E16               	movwf	?__div_to_l_+2,c
  3783  0018BC  0E00               	movlw	0
  3784  0018BE  6E17               	movwf	?__div_to_l_+3,c
  3785  0018C0  0012               	return	
  3786  0018C2                     l402:
  3787  0018C2  8E16               	bsf	__div_to_l_@f1+2,7,c
  3788  0018C4  0EFF               	movlw	255
  3789  0018C6  1614               	andwf	__div_to_l_@f1,f,c
  3790  0018C8  0EFF               	movlw	255
  3791  0018CA  1615               	andwf	__div_to_l_@f1+1,f,c
  3792  0018CC  0EFF               	movlw	255
  3793  0018CE  1616               	andwf	__div_to_l_@f1+2,f,c
  3794  0018D0  0E00               	movlw	0
  3795  0018D2  1617               	andwf	__div_to_l_@f1+3,f,c
  3796  0018D4  8E19               	bsf	__div_to_l_@f2+2,7,c
  3797  0018D6  0EFF               	movlw	255
  3798  0018D8  1617               	andwf	__div_to_l_@f2,f,c
  3799  0018DA  0EFF               	movlw	255
  3800  0018DC  1618               	andwf	__div_to_l_@f2+1,f,c
  3801  0018DE  0EFF               	movlw	255
  3802  0018E0  1619               	andwf	__div_to_l_@f2+2,f,c
  3803  0018E2  0E00               	movlw	0
  3804  0018E4  161A               	andwf	__div_to_l_@f2+3,f,c
  3805  0018E6  0E00               	movlw	0
  3806  0018E8  6E1A               	movwf	__div_to_l_@quot,c
  3807  0018EA  0E00               	movlw	0
  3808  0018EC  6E1B               	movwf	__div_to_l_@quot+1,c
  3809  0018EE  0E00               	movlw	0
  3810  0018F0  6E1C               	movwf	__div_to_l_@quot+2,c
  3811  0018F2  0E00               	movlw	0
  3812  0018F4  6E1D               	movwf	__div_to_l_@quot+3,c
  3813  0018F6  0E7F               	movlw	127
  3814  0018F8  5E1F               	subwf	__div_to_l_@exp1,f,c
  3815  0018FA  501E               	movf	__div_to_l_@cntr,w,c
  3816  0018FC  0FA0               	addlw	160
  3817  0018FE  5E1F               	subwf	__div_to_l_@exp1,f,c
  3818  001900  0E20               	movlw	32
  3819  001902  6E1E               	movwf	__div_to_l_@cntr,c
  3820  001904  90D8               	bcf	status,0,c
  3821  001906  361A               	rlcf	__div_to_l_@quot,f,c
  3822  001908  361B               	rlcf	__div_to_l_@quot+1,f,c
  3823  00190A  361C               	rlcf	__div_to_l_@quot+2,f,c
  3824  00190C  361D               	rlcf	__div_to_l_@quot+3,f,c
  3825  00190E  5017               	movf	__div_to_l_@f2,w,c
  3826  001910  5C14               	subwf	__div_to_l_@f1,w,c
  3827  001912  5018               	movf	__div_to_l_@f2+1,w,c
  3828  001914  5815               	subwfb	__div_to_l_@f1+1,w,c
  3829  001916  5019               	movf	__div_to_l_@f2+2,w,c
  3830  001918  5816               	subwfb	__div_to_l_@f1+2,w,c
  3831  00191A  501A               	movf	__div_to_l_@f2+3,w,c
  3832  00191C  5817               	subwfb	__div_to_l_@f1+3,w,c
  3833  00191E  A0D8               	btfss	status,0,c
  3834  001920  D009               	goto	l404
  3835  001922  5017               	movf	__div_to_l_@f2,w,c
  3836  001924  5E14               	subwf	__div_to_l_@f1,f,c
  3837  001926  5018               	movf	__div_to_l_@f2+1,w,c
  3838  001928  5A15               	subwfb	__div_to_l_@f1+1,f,c
  3839  00192A  5019               	movf	__div_to_l_@f2+2,w,c
  3840  00192C  5A16               	subwfb	__div_to_l_@f1+2,f,c
  3841  00192E  501A               	movf	__div_to_l_@f2+3,w,c
  3842  001930  5A17               	subwfb	__div_to_l_@f1+3,f,c
  3843  001932  801A               	bsf	__div_to_l_@quot,0,c
  3844  001934                     l404:
  3845  001934  90D8               	bcf	status,0,c
  3846  001936  3614               	rlcf	__div_to_l_@f1,f,c
  3847  001938  3615               	rlcf	__div_to_l_@f1+1,f,c
  3848  00193A  3616               	rlcf	__div_to_l_@f1+2,f,c
  3849  00193C  3617               	rlcf	__div_to_l_@f1+3,f,c
  3850  00193E  2E1E               	decfsz	__div_to_l_@cntr,f,c
  3851  001940  D7E1               	goto	l403
  3852  001942  AE1F               	btfss	__div_to_l_@exp1,7,c
  3853  001944  D016               	goto	l406
  3854  001946  501F               	movf	__div_to_l_@exp1,w,c
  3855  001948  0A80               	xorlw	128
  3856  00194A  0F9F               	addlw	159
  3857  00194C  B0D8               	btfsc	status,0,c
  3858  00194E  D009               	goto	l407
  3859  001950  0E00               	movlw	0
  3860  001952  6E14               	movwf	?__div_to_l_,c
  3861  001954  0E00               	movlw	0
  3862  001956  6E15               	movwf	?__div_to_l_+1,c
  3863  001958  0E00               	movlw	0
  3864  00195A  6E16               	movwf	?__div_to_l_+2,c
  3865  00195C  0E00               	movlw	0
  3866  00195E  6E17               	movwf	?__div_to_l_+3,c
  3867  001960  0012               	return	
  3868  001962                     l407:
  3869  001962  90D8               	bcf	status,0,c
  3870  001964  321D               	rrcf	__div_to_l_@quot+3,f,c
  3871  001966  321C               	rrcf	__div_to_l_@quot+2,f,c
  3872  001968  321B               	rrcf	__div_to_l_@quot+1,f,c
  3873  00196A  321A               	rrcf	__div_to_l_@quot,f,c
  3874  00196C  3E1F               	incfsz	__div_to_l_@exp1,f,c
  3875  00196E  D7F9               	goto	l407
  3876  001970  D015               	goto	u2090
  3877  001972                     l406:
  3878  001972  0E1F               	movlw	31
  3879  001974  641F               	cpfsgt	__div_to_l_@exp1,c
  3880  001976  D00F               	goto	l412
  3881  001978  0E00               	movlw	0
  3882  00197A  6E14               	movwf	?__div_to_l_,c
  3883  00197C  0E00               	movlw	0
  3884  00197E  6E15               	movwf	?__div_to_l_+1,c
  3885  001980  0E00               	movlw	0
  3886  001982  6E16               	movwf	?__div_to_l_+2,c
  3887  001984  0E00               	movlw	0
  3888  001986  6E17               	movwf	?__div_to_l_+3,c
  3889  001988  0012               	return	
  3890  00198A  90D8               	bcf	status,0,c
  3891  00198C  361A               	rlcf	__div_to_l_@quot,f,c
  3892  00198E  361B               	rlcf	__div_to_l_@quot+1,f,c
  3893  001990  361C               	rlcf	__div_to_l_@quot+2,f,c
  3894  001992  361D               	rlcf	__div_to_l_@quot+3,f,c
  3895  001994  061F               	decf	__div_to_l_@exp1,f,c
  3896  001996                     l412:
  3897  001996  501F               	movf	__div_to_l_@exp1,w,c
  3898  001998  A4D8               	btfss	status,2,c
  3899  00199A  D7F7               	goto	l413
  3900  00199C                     u2090:
  3901  00199C  C01A  F014         	movff	__div_to_l_@quot,?__div_to_l_
  3902  0019A0  C01B  F015         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3903  0019A4  C01C  F016         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3904  0019A8  C01D  F017         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3905  0019AC  0012               	return		;funcret
  3906  0019AE                     __end_of__div_to_l_:
  3907                           	opt stack 0
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           intcon	equ	0xFF2
  3915                           wreg	equ	0xFE8
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function ___lltoft *****************
  3923 ;; Defined at:
  3924 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lltoft.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;  c               4   27[COMRAM] unsigned long 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;  exp             1   35[COMRAM] unsigned char 
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  3   27[COMRAM] float 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3938 ;;      Params:         4       0       0       0       0       0       0       0       0
  3939 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3940 ;;      Temps:          4       0       0       0       0       0       0       0       0
  3941 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3942 ;;Total ram usage:        9 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    2
  3945 ;; This function calls:
  3946 ;;		___ftpack
  3947 ;; This function is called by:
  3948 ;;		_printf
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text13
  3953  0021F8                     __ptext13:
  3954                           	opt stack 0
  3955  0021F8                     ___lltoft:
  3956                           	opt stack 27
  3957                           
  3958                           ;incstack = 0
  3959  0021F8  0E8E               	movlw	142
  3960  0021FA  6E24               	movwf	___lltoft@exp,c
  3961  0021FC  D006               	goto	l611
  3962  0021FE  90D8               	bcf	status,0,c
  3963  002200  321F               	rrcf	___lltoft@c+3,f,c
  3964  002202  321E               	rrcf	___lltoft@c+2,f,c
  3965  002204  321D               	rrcf	___lltoft@c+1,f,c
  3966  002206  321C               	rrcf	___lltoft@c,f,c
  3967  002208  2A24               	incf	___lltoft@exp,f,c
  3968  00220A                     l611:
  3969  00220A  0E00               	movlw	0
  3970  00220C  141C               	andwf	___lltoft@c,w,c
  3971  00220E  6E20               	movwf	??___lltoft& (0+255),c
  3972  002210  0E00               	movlw	0
  3973  002212  141D               	andwf	___lltoft@c+1,w,c
  3974  002214  6E21               	movwf	(??___lltoft+1)& (0+255),c
  3975  002216  0E00               	movlw	0
  3976  002218  141E               	andwf	___lltoft@c+2,w,c
  3977  00221A  6E22               	movwf	(??___lltoft+2)& (0+255),c
  3978  00221C  0EFF               	movlw	255
  3979  00221E  141F               	andwf	___lltoft@c+3,w,c
  3980  002220  6E23               	movwf	(??___lltoft+3)& (0+255),c
  3981  002222  5020               	movf	??___lltoft,w,c
  3982  002224  1021               	iorwf	??___lltoft+1,w,c
  3983  002226  1022               	iorwf	??___lltoft+2,w,c
  3984  002228  1023               	iorwf	??___lltoft+3,w,c
  3985  00222A  A4D8               	btfss	status,2,c
  3986  00222C  D7E8               	goto	l612
  3987  00222E  C01C  F014         	movff	___lltoft@c,___ftpack@arg
  3988  002232  C01D  F015         	movff	___lltoft@c+1,___ftpack@arg+1
  3989  002236  C01E  F016         	movff	___lltoft@c+2,___ftpack@arg+2
  3990  00223A  C024  F017         	movff	___lltoft@exp,___ftpack@exp
  3991  00223E  0E00               	movlw	0
  3992  002240  6E18               	movwf	___ftpack@sign,c
  3993  002242  EC9F  F00E         	call	___ftpack	;wreg free
  3994  002246  C014  F01C         	movff	?___ftpack,?___lltoft
  3995  00224A  C015  F01D         	movff	?___ftpack+1,?___lltoft+1
  3996  00224E  C016  F01E         	movff	?___ftpack+2,?___lltoft+2
  3997  002252  0012               	return	
  3998  002254                     __end_of___lltoft:
  3999                           	opt stack 0
  4000                           tblptru	equ	0xFF8
  4001                           tblptrh	equ	0xFF7
  4002                           tblptrl	equ	0xFF6
  4003                           tablat	equ	0xFF5
  4004                           prodh	equ	0xFF4
  4005                           prodl	equ	0xFF3
  4006                           intcon	equ	0xFF2
  4007                           wreg	equ	0xFE8
  4008                           postinc2	equ	0xFDE
  4009                           postdec2	equ	0xFDD
  4010                           fsr2h	equ	0xFDA
  4011                           fsr2l	equ	0xFD9
  4012                           status	equ	0xFD8
  4013                           
  4014 ;; *************** function ___llmod *****************
  4015 ;; Defined at:
  4016 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\llmod.c"
  4017 ;; Parameters:    Size  Location     Type
  4018 ;;  dividend        4   19[COMRAM] unsigned long 
  4019 ;;  divisor         4   23[COMRAM] unsigned long 
  4020 ;; Auto vars:     Size  Location     Type
  4021 ;;  counter         1   27[COMRAM] unsigned char 
  4022 ;; Return value:  Size  Location     Type
  4023 ;;                  4   19[COMRAM] unsigned long 
  4024 ;; Registers used:
  4025 ;;		wreg, status,2, status,0
  4026 ;; Tracked objects:
  4027 ;;		On entry : 0/0
  4028 ;;		On exit  : 0/0
  4029 ;;		Unchanged: 0/0
  4030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4031 ;;      Params:         8       0       0       0       0       0       0       0       0
  4032 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4033 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4034 ;;      Totals:         9       0       0       0       0       0       0       0       0
  4035 ;;Total ram usage:        9 bytes
  4036 ;; Hardware stack levels used:    1
  4037 ;; Hardware stack levels required when called:    1
  4038 ;; This function calls:
  4039 ;;		Nothing
  4040 ;; This function is called by:
  4041 ;;		_printf
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text14
  4046  002192                     __ptext14:
  4047                           	opt stack 0
  4048  002192                     ___llmod:
  4049                           	opt stack 28
  4050                           
  4051                           ;incstack = 0
  4052  002192  5018               	movf	___llmod@divisor,w,c
  4053  002194  1019               	iorwf	___llmod@divisor+1,w,c
  4054  002196  101A               	iorwf	___llmod@divisor+2,w,c
  4055  002198  101B               	iorwf	___llmod@divisor+3,w,c
  4056  00219A  B4D8               	btfsc	status,2,c
  4057  00219C  D024               	goto	l605
  4058  00219E  0E01               	movlw	1
  4059  0021A0  6E1C               	movwf	___llmod@counter,c
  4060  0021A2  D006               	goto	l600
  4061  0021A4  90D8               	bcf	status,0,c
  4062  0021A6  3618               	rlcf	___llmod@divisor,f,c
  4063  0021A8  3619               	rlcf	___llmod@divisor+1,f,c
  4064  0021AA  361A               	rlcf	___llmod@divisor+2,f,c
  4065  0021AC  361B               	rlcf	___llmod@divisor+3,f,c
  4066  0021AE  2A1C               	incf	___llmod@counter,f,c
  4067  0021B0                     l600:
  4068  0021B0  AE1B               	btfss	___llmod@divisor+3,7,c
  4069  0021B2  D7F8               	goto	l601
  4070  0021B4                     u2270:
  4071  0021B4  5018               	movf	___llmod@divisor,w,c
  4072  0021B6  5C14               	subwf	___llmod@dividend,w,c
  4073  0021B8  5019               	movf	___llmod@divisor+1,w,c
  4074  0021BA  5815               	subwfb	___llmod@dividend+1,w,c
  4075  0021BC  501A               	movf	___llmod@divisor+2,w,c
  4076  0021BE  5816               	subwfb	___llmod@dividend+2,w,c
  4077  0021C0  501B               	movf	___llmod@divisor+3,w,c
  4078  0021C2  5817               	subwfb	___llmod@dividend+3,w,c
  4079  0021C4  A0D8               	btfss	status,0,c
  4080  0021C6  D008               	goto	l604
  4081  0021C8  5018               	movf	___llmod@divisor,w,c
  4082  0021CA  5E14               	subwf	___llmod@dividend,f,c
  4083  0021CC  5019               	movf	___llmod@divisor+1,w,c
  4084  0021CE  5A15               	subwfb	___llmod@dividend+1,f,c
  4085  0021D0  501A               	movf	___llmod@divisor+2,w,c
  4086  0021D2  5A16               	subwfb	___llmod@dividend+2,f,c
  4087  0021D4  501B               	movf	___llmod@divisor+3,w,c
  4088  0021D6  5A17               	subwfb	___llmod@dividend+3,f,c
  4089  0021D8                     l604:
  4090  0021D8  90D8               	bcf	status,0,c
  4091  0021DA  321B               	rrcf	___llmod@divisor+3,f,c
  4092  0021DC  321A               	rrcf	___llmod@divisor+2,f,c
  4093  0021DE  3219               	rrcf	___llmod@divisor+1,f,c
  4094  0021E0  3218               	rrcf	___llmod@divisor,f,c
  4095  0021E2  2E1C               	decfsz	___llmod@counter,f,c
  4096  0021E4  D7E7               	goto	u2270
  4097  0021E6                     l605:
  4098  0021E6  C014  F014         	movff	___llmod@dividend,?___llmod
  4099  0021EA  C015  F015         	movff	___llmod@dividend+1,?___llmod+1
  4100  0021EE  C016  F016         	movff	___llmod@dividend+2,?___llmod+2
  4101  0021F2  C017  F017         	movff	___llmod@dividend+3,?___llmod+3
  4102  0021F6  0012               	return		;funcret
  4103  0021F8                     __end_of___llmod:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           prodh	equ	0xFF4
  4110                           prodl	equ	0xFF3
  4111                           intcon	equ	0xFF2
  4112                           wreg	equ	0xFE8
  4113                           postinc2	equ	0xFDE
  4114                           postdec2	equ	0xFDD
  4115                           fsr2h	equ	0xFDA
  4116                           fsr2l	equ	0xFD9
  4117                           status	equ	0xFD8
  4118                           
  4119 ;; *************** function ___lldiv *****************
  4120 ;; Defined at:
  4121 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lldiv.c"
  4122 ;; Parameters:    Size  Location     Type
  4123 ;;  dividend        4   19[COMRAM] unsigned long 
  4124 ;;  divisor         4   23[COMRAM] unsigned long 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  quotient        4   27[COMRAM] unsigned long 
  4127 ;;  counter         1   31[COMRAM] unsigned char 
  4128 ;; Return value:  Size  Location     Type
  4129 ;;                  4   19[COMRAM] unsigned long 
  4130 ;; Registers used:
  4131 ;;		wreg, status,2, status,0
  4132 ;; Tracked objects:
  4133 ;;		On entry : 0/0
  4134 ;;		On exit  : 0/0
  4135 ;;		Unchanged: 0/0
  4136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4137 ;;      Params:         8       0       0       0       0       0       0       0       0
  4138 ;;      Locals:         5       0       0       0       0       0       0       0       0
  4139 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4140 ;;      Totals:        13       0       0       0       0       0       0       0       0
  4141 ;;Total ram usage:       13 bytes
  4142 ;; Hardware stack levels used:    1
  4143 ;; Hardware stack levels required when called:    1
  4144 ;; This function calls:
  4145 ;;		Nothing
  4146 ;; This function is called by:
  4147 ;;		_printf
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           	psect	text15
  4152  001FAA                     __ptext15:
  4153                           	opt stack 0
  4154  001FAA                     ___lldiv:
  4155                           	opt stack 28
  4156                           
  4157                           ;incstack = 0
  4158  001FAA  0E00               	movlw	0
  4159  001FAC  6E1C               	movwf	___lldiv@quotient,c
  4160  001FAE  0E00               	movlw	0
  4161  001FB0  6E1D               	movwf	___lldiv@quotient+1,c
  4162  001FB2  0E00               	movlw	0
  4163  001FB4  6E1E               	movwf	___lldiv@quotient+2,c
  4164  001FB6  0E00               	movlw	0
  4165  001FB8  6E1F               	movwf	___lldiv@quotient+3,c
  4166  001FBA  5018               	movf	___lldiv@divisor,w,c
  4167  001FBC  1019               	iorwf	___lldiv@divisor+1,w,c
  4168  001FBE  101A               	iorwf	___lldiv@divisor+2,w,c
  4169  001FC0  101B               	iorwf	___lldiv@divisor+3,w,c
  4170  001FC2  B4D8               	btfsc	status,2,c
  4171  001FC4  D02A               	goto	l595
  4172  001FC6  0E01               	movlw	1
  4173  001FC8  6E20               	movwf	___lldiv@counter,c
  4174  001FCA  D006               	goto	l590
  4175  001FCC  90D8               	bcf	status,0,c
  4176  001FCE  3618               	rlcf	___lldiv@divisor,f,c
  4177  001FD0  3619               	rlcf	___lldiv@divisor+1,f,c
  4178  001FD2  361A               	rlcf	___lldiv@divisor+2,f,c
  4179  001FD4  361B               	rlcf	___lldiv@divisor+3,f,c
  4180  001FD6  2A20               	incf	___lldiv@counter,f,c
  4181  001FD8                     l590:
  4182  001FD8  AE1B               	btfss	___lldiv@divisor+3,7,c
  4183  001FDA  D7F8               	goto	l591
  4184  001FDC                     u2240:
  4185  001FDC  90D8               	bcf	status,0,c
  4186  001FDE  361C               	rlcf	___lldiv@quotient,f,c
  4187  001FE0  361D               	rlcf	___lldiv@quotient+1,f,c
  4188  001FE2  361E               	rlcf	___lldiv@quotient+2,f,c
  4189  001FE4  361F               	rlcf	___lldiv@quotient+3,f,c
  4190  001FE6  5018               	movf	___lldiv@divisor,w,c
  4191  001FE8  5C14               	subwf	___lldiv@dividend,w,c
  4192  001FEA  5019               	movf	___lldiv@divisor+1,w,c
  4193  001FEC  5815               	subwfb	___lldiv@dividend+1,w,c
  4194  001FEE  501A               	movf	___lldiv@divisor+2,w,c
  4195  001FF0  5816               	subwfb	___lldiv@dividend+2,w,c
  4196  001FF2  501B               	movf	___lldiv@divisor+3,w,c
  4197  001FF4  5817               	subwfb	___lldiv@dividend+3,w,c
  4198  001FF6  A0D8               	btfss	status,0,c
  4199  001FF8  D009               	goto	l594
  4200  001FFA  5018               	movf	___lldiv@divisor,w,c
  4201  001FFC  5E14               	subwf	___lldiv@dividend,f,c
  4202  001FFE  5019               	movf	___lldiv@divisor+1,w,c
  4203  002000  5A15               	subwfb	___lldiv@dividend+1,f,c
  4204  002002  501A               	movf	___lldiv@divisor+2,w,c
  4205  002004  5A16               	subwfb	___lldiv@dividend+2,f,c
  4206  002006  501B               	movf	___lldiv@divisor+3,w,c
  4207  002008  5A17               	subwfb	___lldiv@dividend+3,f,c
  4208  00200A  801C               	bsf	___lldiv@quotient,0,c
  4209  00200C                     l594:
  4210  00200C  90D8               	bcf	status,0,c
  4211  00200E  321B               	rrcf	___lldiv@divisor+3,f,c
  4212  002010  321A               	rrcf	___lldiv@divisor+2,f,c
  4213  002012  3219               	rrcf	___lldiv@divisor+1,f,c
  4214  002014  3218               	rrcf	___lldiv@divisor,f,c
  4215  002016  2E20               	decfsz	___lldiv@counter,f,c
  4216  002018  D7E1               	goto	u2240
  4217  00201A                     l595:
  4218  00201A  C01C  F014         	movff	___lldiv@quotient,?___lldiv
  4219  00201E  C01D  F015         	movff	___lldiv@quotient+1,?___lldiv+1
  4220  002022  C01E  F016         	movff	___lldiv@quotient+2,?___lldiv+2
  4221  002026  C01F  F017         	movff	___lldiv@quotient+3,?___lldiv+3
  4222  00202A  0012               	return		;funcret
  4223  00202C                     __end_of___lldiv:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           prodh	equ	0xFF4
  4230                           prodl	equ	0xFF3
  4231                           intcon	equ	0xFF2
  4232                           wreg	equ	0xFE8
  4233                           postinc2	equ	0xFDE
  4234                           postdec2	equ	0xFDD
  4235                           fsr2h	equ	0xFDA
  4236                           fsr2l	equ	0xFD9
  4237                           status	equ	0xFD8
  4238                           
  4239 ;; *************** function ___fttol *****************
  4240 ;; Defined at:
  4241 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;  f1              3   61[COMRAM] float 
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  lval            4    1[BANK0 ] unsigned long 
  4246 ;;  exp1            1    5[BANK0 ] unsigned char 
  4247 ;;  sign1           1    0[BANK0 ] unsigned char 
  4248 ;; Return value:  Size  Location     Type
  4249 ;;                  4   61[COMRAM] long 
  4250 ;; Registers used:
  4251 ;;		wreg, status,2, status,0
  4252 ;; Tracked objects:
  4253 ;;		On entry : 0/0
  4254 ;;		On exit  : 0/0
  4255 ;;		Unchanged: 0/0
  4256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4257 ;;      Params:         4       0       0       0       0       0       0       0       0
  4258 ;;      Locals:         0       6       0       0       0       0       0       0       0
  4259 ;;      Temps:          5       0       0       0       0       0       0       0       0
  4260 ;;      Totals:         9       6       0       0       0       0       0       0       0
  4261 ;;Total ram usage:       15 bytes
  4262 ;; Hardware stack levels used:    1
  4263 ;; Hardware stack levels required when called:    1
  4264 ;; This function calls:
  4265 ;;		Nothing
  4266 ;; This function is called by:
  4267 ;;		_printf
  4268 ;; This function uses a non-reentrant model
  4269 ;;
  4270                           
  4271                           	psect	text16
  4272  0019AE                     __ptext16:
  4273                           	opt stack 0
  4274  0019AE                     ___fttol:
  4275                           	opt stack 28
  4276                           
  4277                           ;incstack = 0
  4278  0019AE  C040  F042         	movff	___fttol@f1+2,??___fttol
  4279  0019B2  6A43               	clrf	(??___fttol+1)& (0+255),c
  4280  0019B4  6A44               	clrf	(??___fttol+2)& (0+255),c
  4281  0019B6  343F               	rlcf	___fttol@f1+1,w,c
  4282  0019B8  3642               	rlcf	??___fttol& (0+255),f,c
  4283  0019BA  E301               	bnc	u2151
  4284  0019BC  8043               	bsf	(??___fttol+1)& (0+255),0,c
  4285  0019BE                     u2151:
  4286  0019BE  5042               	movf	??___fttol,w,c
  4287  0019C0  0100               	movlb	0	; () banked
  4288  0019C2  6F65               	movwf	___fttol@exp1& (0+255),b
  4289  0019C4  5165               	movf	___fttol@exp1& (0+255),w,b
  4290  0019C6  A4D8               	btfss	status,2,c
  4291  0019C8  D009               	goto	l549
  4292                           
  4293                           ; BSR set to: 0
  4294  0019CA  0E00               	movlw	0
  4295  0019CC  6E3E               	movwf	?___fttol,c
  4296  0019CE  0E00               	movlw	0
  4297  0019D0  6E3F               	movwf	?___fttol+1,c
  4298  0019D2  0E00               	movlw	0
  4299  0019D4  6E40               	movwf	?___fttol+2,c
  4300  0019D6  0E00               	movlw	0
  4301  0019D8  6E41               	movwf	?___fttol+3,c
  4302                           
  4303                           ; BSR set to: 0
  4304  0019DA  0012               	return	
  4305  0019DC                     l549:
  4306                           
  4307                           ; BSR set to: 0
  4308                           
  4309                           ; BSR set to: 0
  4310  0019DC  0E17               	movlw	23
  4311  0019DE  6E42               	movwf	??___fttol& (0+255),c
  4312  0019E0  C03E  F043         	movff	___fttol@f1,??___fttol+1
  4313  0019E4  C03F  F044         	movff	___fttol@f1+1,??___fttol+2
  4314  0019E8  C040  F045         	movff	___fttol@f1+2,??___fttol+3
  4315  0019EC  2842               	incf	??___fttol,w,c
  4316  0019EE  6E46               	movwf	(??___fttol+4)& (0+255),c
  4317  0019F0  D004               	goto	u2170
  4318  0019F2                     u2175:
  4319  0019F2  90D8               	bcf	status,0,c
  4320  0019F4  3245               	rrcf	??___fttol+3,f,c
  4321  0019F6  3244               	rrcf	??___fttol+2,f,c
  4322  0019F8  3243               	rrcf	??___fttol+1,f,c
  4323  0019FA                     u2170:
  4324  0019FA  2E46               	decfsz	(??___fttol+4)& (0+255),f,c
  4325  0019FC  D7FA               	goto	u2175
  4326  0019FE  5043               	movf	??___fttol+1,w,c
  4327  001A00  0100               	movlb	0	; () banked
  4328  001A02  6F60               	movwf	___fttol@sign1& (0+255),b
  4329                           
  4330                           ; BSR set to: 0
  4331  001A04  8E3F               	bsf	___fttol@f1+1,7,c
  4332                           
  4333                           ; BSR set to: 0
  4334  001A06  0EFF               	movlw	255
  4335  001A08  163E               	andwf	___fttol@f1,f,c
  4336  001A0A  0EFF               	movlw	255
  4337  001A0C  163F               	andwf	___fttol@f1+1,f,c
  4338  001A0E  0E00               	movlw	0
  4339  001A10  1640               	andwf	___fttol@f1+2,f,c
  4340                           
  4341                           ; BSR set to: 0
  4342  001A12  503E               	movf	___fttol@f1,w,c
  4343  001A14  6F61               	movwf	___fttol@lval& (0+255),b
  4344  001A16  503F               	movf	___fttol@f1+1,w,c
  4345  001A18  6F62               	movwf	(___fttol@lval+1)& (0+255),b
  4346  001A1A  5040               	movf	___fttol@f1+2,w,c
  4347  001A1C  6F63               	movwf	(___fttol@lval+2)& (0+255),b
  4348  001A1E  6B64               	clrf	(___fttol@lval+3)& (0+255),b
  4349                           
  4350                           ; BSR set to: 0
  4351  001A20  0E8E               	movlw	142
  4352  001A22  5F65               	subwf	___fttol@exp1& (0+255),f,b
  4353                           
  4354                           ; BSR set to: 0
  4355  001A24  AF65               	btfss	___fttol@exp1& (0+255),7,b
  4356  001A26  D016               	goto	l551
  4357                           
  4358                           ; BSR set to: 0
  4359  001A28  5165               	movf	___fttol@exp1& (0+255),w,b
  4360  001A2A  0A80               	xorlw	128
  4361  001A2C  0F8F               	addlw	143
  4362  001A2E  B0D8               	btfsc	status,0,c
  4363  001A30  D009               	goto	l552
  4364                           
  4365                           ; BSR set to: 0
  4366  001A32  0E00               	movlw	0
  4367  001A34  6E3E               	movwf	?___fttol,c
  4368  001A36  0E00               	movlw	0
  4369  001A38  6E3F               	movwf	?___fttol+1,c
  4370  001A3A  0E00               	movlw	0
  4371  001A3C  6E40               	movwf	?___fttol+2,c
  4372  001A3E  0E00               	movlw	0
  4373  001A40  6E41               	movwf	?___fttol+3,c
  4374                           
  4375                           ; BSR set to: 0
  4376  001A42  0012               	return	
  4377  001A44                     l552:
  4378                           
  4379                           ; BSR set to: 0
  4380                           
  4381                           ; BSR set to: 0
  4382                           
  4383                           ; BSR set to: 0
  4384  001A44  90D8               	bcf	status,0,c
  4385  001A46  3364               	rrcf	(___fttol@lval+3)& (0+255),f,b
  4386  001A48  3363               	rrcf	(___fttol@lval+2)& (0+255),f,b
  4387  001A4A  3362               	rrcf	(___fttol@lval+1)& (0+255),f,b
  4388  001A4C  3361               	rrcf	___fttol@lval& (0+255),f,b
  4389                           
  4390                           ; BSR set to: 0
  4391  001A4E  3F65               	incfsz	___fttol@exp1& (0+255),f,b
  4392  001A50  D7F9               	goto	l552
  4393                           
  4394                           ; BSR set to: 0
  4395  001A52  D015               	goto	u2210
  4396  001A54                     l551:
  4397                           
  4398                           ; BSR set to: 0
  4399                           
  4400                           ; BSR set to: 0
  4401  001A54  0E17               	movlw	23
  4402  001A56  6565               	cpfsgt	___fttol@exp1& (0+255),b
  4403  001A58  D00F               	goto	l557
  4404                           
  4405                           ; BSR set to: 0
  4406  001A5A  0E00               	movlw	0
  4407  001A5C  6E3E               	movwf	?___fttol,c
  4408  001A5E  0E00               	movlw	0
  4409  001A60  6E3F               	movwf	?___fttol+1,c
  4410  001A62  0E00               	movlw	0
  4411  001A64  6E40               	movwf	?___fttol+2,c
  4412  001A66  0E00               	movlw	0
  4413  001A68  6E41               	movwf	?___fttol+3,c
  4414                           
  4415                           ; BSR set to: 0
  4416  001A6A  0012               	return	
  4417  001A6C                     
  4418                           ; BSR set to: 0
  4419                           
  4420                           ; BSR set to: 0
  4421  001A6C  90D8               	bcf	status,0,c
  4422  001A6E  3761               	rlcf	___fttol@lval& (0+255),f,b
  4423  001A70  3762               	rlcf	(___fttol@lval+1)& (0+255),f,b
  4424  001A72  3763               	rlcf	(___fttol@lval+2)& (0+255),f,b
  4425  001A74  3764               	rlcf	(___fttol@lval+3)& (0+255),f,b
  4426  001A76  0765               	decf	___fttol@exp1& (0+255),f,b
  4427  001A78                     l557:
  4428                           
  4429                           ; BSR set to: 0
  4430                           
  4431                           ; BSR set to: 0
  4432  001A78  5165               	movf	___fttol@exp1& (0+255),w,b
  4433  001A7A  A4D8               	btfss	status,2,c
  4434  001A7C  D7F7               	goto	l558
  4435  001A7E                     u2210:
  4436                           
  4437                           ; BSR set to: 0
  4438                           
  4439                           ; BSR set to: 0
  4440                           
  4441                           ; BSR set to: 0
  4442  001A7E  5160               	movf	___fttol@sign1& (0+255),w,b
  4443  001A80  B4D8               	btfsc	status,2,c
  4444  001A82  D008               	goto	l560
  4445                           
  4446                           ; BSR set to: 0
  4447  001A84  1F64               	comf	(___fttol@lval+3)& (0+255),f,b
  4448  001A86  1F63               	comf	(___fttol@lval+2)& (0+255),f,b
  4449  001A88  1F62               	comf	(___fttol@lval+1)& (0+255),f,b
  4450  001A8A  6D61               	negf	___fttol@lval& (0+255),b
  4451  001A8C  0E00               	movlw	0
  4452  001A8E  2362               	addwfc	(___fttol@lval+1)& (0+255),f,b
  4453  001A90  2363               	addwfc	(___fttol@lval+2)& (0+255),f,b
  4454  001A92  2364               	addwfc	(___fttol@lval+3)& (0+255),f,b
  4455  001A94                     l560:
  4456                           
  4457                           ; BSR set to: 0
  4458                           
  4459                           ; BSR set to: 0
  4460  001A94  C061  F03E         	movff	___fttol@lval,?___fttol
  4461  001A98  C062  F03F         	movff	___fttol@lval+1,?___fttol+1
  4462  001A9C  C063  F040         	movff	___fttol@lval+2,?___fttol+2
  4463  001AA0  C064  F041         	movff	___fttol@lval+3,?___fttol+3
  4464  001AA4  0012               	return	
  4465  001AA6                     __end_of___fttol:
  4466                           	opt stack 0
  4467                           tblptru	equ	0xFF8
  4468                           tblptrh	equ	0xFF7
  4469                           tblptrl	equ	0xFF6
  4470                           tablat	equ	0xFF5
  4471                           prodh	equ	0xFF4
  4472                           prodl	equ	0xFF3
  4473                           intcon	equ	0xFF2
  4474                           wreg	equ	0xFE8
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function ___ftsub *****************
  4482 ;; Defined at:
  4483 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftsub.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  f1              3    3[BANK0 ] float 
  4486 ;;  f2              3    6[BANK0 ] float 
  4487 ;; Auto vars:     Size  Location     Type
  4488 ;;		None
  4489 ;; Return value:  Size  Location     Type
  4490 ;;                  3    3[BANK0 ] float 
  4491 ;; Registers used:
  4492 ;;		wreg, status,2, status,0, cstack
  4493 ;; Tracked objects:
  4494 ;;		On entry : 0/0
  4495 ;;		On exit  : 0/0
  4496 ;;		Unchanged: 0/0
  4497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4498 ;;      Params:         0       6       0       0       0       0       0       0       0
  4499 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4500 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4501 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4502 ;;Total ram usage:        6 bytes
  4503 ;; Hardware stack levels used:    1
  4504 ;; Hardware stack levels required when called:    3
  4505 ;; This function calls:
  4506 ;;		___ftadd
  4507 ;; This function is called by:
  4508 ;;		_printf
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text17
  4513  002254                     __ptext17:
  4514                           	opt stack 0
  4515  002254                     ___ftsub:
  4516                           	opt stack 26
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;incstack = 0
  4520  002254  0100               	movlb	0	; () banked
  4521  002256  5166               	movf	___ftsub@f2& (0+255),w,b
  4522  002258  1167               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  4523  00225A  1168               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  4524  00225C  B4D8               	btfsc	status,2,c
  4525  00225E  D006               	goto	l545
  4526                           
  4527                           ; BSR set to: 0
  4528  002260  0E00               	movlw	0
  4529  002262  1B66               	xorwf	___ftsub@f2& (0+255),f,b
  4530  002264  0E00               	movlw	0
  4531  002266  1B67               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  4532  002268  0E80               	movlw	128
  4533  00226A  1B68               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  4534  00226C                     l545:
  4535                           
  4536                           ; BSR set to: 0
  4537                           
  4538                           ; BSR set to: 0
  4539  00226C  C063  F041         	movff	___ftsub@f1,___ftadd@f1
  4540  002270  C064  F042         	movff	___ftsub@f1+1,___ftadd@f1+1
  4541  002274  C065  F043         	movff	___ftsub@f1+2,___ftadd@f1+2
  4542  002278  C066  F044         	movff	___ftsub@f2,___ftadd@f2
  4543  00227C  C067  F045         	movff	___ftsub@f2+1,___ftadd@f2+1
  4544  002280  C068  F046         	movff	___ftsub@f2+2,___ftadd@f2+2
  4545  002284  ECD3  F00A         	call	___ftadd	;wreg free
  4546  002288  C041  F063         	movff	?___ftadd,?___ftsub
  4547  00228C  C042  F064         	movff	?___ftadd+1,?___ftsub+1
  4548  002290  C043  F065         	movff	?___ftadd+2,?___ftsub+2
  4549  002294  0012               	return	
  4550  002296                     __end_of___ftsub:
  4551                           	opt stack 0
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           intcon	equ	0xFF2
  4559                           wreg	equ	0xFE8
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           
  4566 ;; *************** function ___ftadd *****************
  4567 ;; Defined at:
  4568 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  4569 ;; Parameters:    Size  Location     Type
  4570 ;;  f1              3   64[COMRAM] float 
  4571 ;;  f2              3   67[COMRAM] float 
  4572 ;; Auto vars:     Size  Location     Type
  4573 ;;  exp1            1    2[BANK0 ] unsigned char 
  4574 ;;  exp2            1    1[BANK0 ] unsigned char 
  4575 ;;  sign            1    0[BANK0 ] unsigned char 
  4576 ;; Return value:  Size  Location     Type
  4577 ;;                  3   64[COMRAM] float 
  4578 ;; Registers used:
  4579 ;;		wreg, status,2, status,0, cstack
  4580 ;; Tracked objects:
  4581 ;;		On entry : 0/0
  4582 ;;		On exit  : 0/0
  4583 ;;		Unchanged: 0/0
  4584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4585 ;;      Params:         6       0       0       0       0       0       0       0       0
  4586 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4587 ;;      Temps:          3       0       0       0       0       0       0       0       0
  4588 ;;      Totals:         9       3       0       0       0       0       0       0       0
  4589 ;;Total ram usage:       12 bytes
  4590 ;; Hardware stack levels used:    1
  4591 ;; Hardware stack levels required when called:    2
  4592 ;; This function calls:
  4593 ;;		___ftpack
  4594 ;; This function is called by:
  4595 ;;		_printf
  4596 ;;		___ftsub
  4597 ;; This function uses a non-reentrant model
  4598 ;;
  4599                           
  4600                           	psect	text18
  4601  0015A6                     __ptext18:
  4602                           	opt stack 0
  4603  0015A6                     ___ftadd:
  4604                           	opt stack 26
  4605                           
  4606                           ;incstack = 0
  4607  0015A6  C043  F047         	movff	___ftadd@f1+2,??___ftadd
  4608  0015AA  6A48               	clrf	(??___ftadd+1)& (0+255),c
  4609  0015AC  6A49               	clrf	(??___ftadd+2)& (0+255),c
  4610  0015AE  3442               	rlcf	___ftadd@f1+1,w,c
  4611  0015B0  3647               	rlcf	??___ftadd& (0+255),f,c
  4612  0015B2  E301               	bnc	u1461
  4613  0015B4  8048               	bsf	(??___ftadd+1)& (0+255),0,c
  4614  0015B6                     u1461:
  4615  0015B6  5047               	movf	??___ftadd,w,c
  4616  0015B8  0100               	movlb	0	; () banked
  4617  0015BA  6F62               	movwf	___ftadd@exp1& (0+255),b
  4618  0015BC  C046  F047         	movff	___ftadd@f2+2,??___ftadd
  4619  0015C0  6A48               	clrf	(??___ftadd+1)& (0+255),c
  4620  0015C2  6A49               	clrf	(??___ftadd+2)& (0+255),c
  4621  0015C4  3445               	rlcf	___ftadd@f2+1,w,c
  4622  0015C6  3647               	rlcf	??___ftadd& (0+255),f,c
  4623  0015C8  E301               	bnc	u1471
  4624  0015CA  8048               	bsf	(??___ftadd+1)& (0+255),0,c
  4625  0015CC                     u1471:
  4626  0015CC  5047               	movf	??___ftadd,w,c
  4627  0015CE  6F61               	movwf	___ftadd@exp2& (0+255),b
  4628                           
  4629                           ; BSR set to: 0
  4630  0015D0  5162               	movf	___ftadd@exp1& (0+255),w,b
  4631  0015D2  B4D8               	btfsc	status,2,c
  4632  0015D4  D00B               	goto	u1500
  4633                           
  4634                           ; BSR set to: 0
  4635  0015D6  5161               	movf	___ftadd@exp2& (0+255),w,b
  4636  0015D8  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  4637  0015DA  B0D8               	btfsc	status,0,c
  4638  0015DC  D00E               	goto	l463
  4639                           
  4640                           ; BSR set to: 0
  4641  0015DE  5162               	movf	___ftadd@exp1& (0+255),w,b
  4642  0015E0  0800               	sublw	0
  4643  0015E2  2561               	addwf	___ftadd@exp2& (0+255),w,b
  4644  0015E4  6E47               	movwf	??___ftadd& (0+255),c
  4645  0015E6  0E18               	movlw	24
  4646  0015E8  6447               	cpfsgt	??___ftadd,c
  4647  0015EA  D007               	goto	l463
  4648  0015EC                     u1500:
  4649                           
  4650                           ; BSR set to: 0
  4651  0015EC  C044  F041         	movff	___ftadd@f2,?___ftadd
  4652  0015F0  C045  F042         	movff	___ftadd@f2+1,?___ftadd+1
  4653  0015F4  C046  F043         	movff	___ftadd@f2+2,?___ftadd+2
  4654  0015F8  0012               	return	
  4655  0015FA                     l463:
  4656                           
  4657                           ; BSR set to: 0
  4658                           
  4659                           ; BSR set to: 0
  4660  0015FA  5161               	movf	___ftadd@exp2& (0+255),w,b
  4661  0015FC  B4D8               	btfsc	status,2,c
  4662  0015FE  D00B               	goto	u1530
  4663                           
  4664                           ; BSR set to: 0
  4665  001600  5162               	movf	___ftadd@exp1& (0+255),w,b
  4666  001602  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  4667  001604  B0D8               	btfsc	status,0,c
  4668  001606  D00E               	goto	l467
  4669                           
  4670                           ; BSR set to: 0
  4671  001608  5161               	movf	___ftadd@exp2& (0+255),w,b
  4672  00160A  0800               	sublw	0
  4673  00160C  2562               	addwf	___ftadd@exp1& (0+255),w,b
  4674  00160E  6E47               	movwf	??___ftadd& (0+255),c
  4675  001610  0E18               	movlw	24
  4676  001612  6447               	cpfsgt	??___ftadd,c
  4677  001614  D007               	goto	l467
  4678  001616                     u1530:
  4679                           
  4680                           ; BSR set to: 0
  4681  001616  C041  F041         	movff	___ftadd@f1,?___ftadd
  4682  00161A  C042  F042         	movff	___ftadd@f1+1,?___ftadd+1
  4683  00161E  C043  F043         	movff	___ftadd@f1+2,?___ftadd+2
  4684  001622  0012               	return	
  4685  001624                     l467:
  4686                           
  4687                           ; BSR set to: 0
  4688                           
  4689                           ; BSR set to: 0
  4690  001624  0E06               	movlw	6
  4691  001626  6F60               	movwf	___ftadd@sign& (0+255),b
  4692                           
  4693                           ; BSR set to: 0
  4694  001628  BE43               	btfsc	___ftadd@f1+2,7,c
  4695                           
  4696                           ; BSR set to: 0
  4697  00162A  8F60               	bsf	___ftadd@sign& (0+255),7,b
  4698                           
  4699                           ; BSR set to: 0
  4700                           
  4701                           ; BSR set to: 0
  4702  00162C  BE46               	btfsc	___ftadd@f2+2,7,c
  4703                           
  4704                           ; BSR set to: 0
  4705  00162E  8D60               	bsf	___ftadd@sign& (0+255),6,b
  4706                           
  4707                           ; BSR set to: 0
  4708  001630  8E42               	bsf	___ftadd@f1+1,7,c
  4709                           
  4710                           ; BSR set to: 0
  4711  001632  0EFF               	movlw	255
  4712  001634  1641               	andwf	___ftadd@f1,f,c
  4713  001636  0EFF               	movlw	255
  4714  001638  1642               	andwf	___ftadd@f1+1,f,c
  4715  00163A  0E00               	movlw	0
  4716  00163C  1643               	andwf	___ftadd@f1+2,f,c
  4717  00163E  8E45               	bsf	___ftadd@f2+1,7,c
  4718                           
  4719                           ; BSR set to: 0
  4720  001640  0EFF               	movlw	255
  4721  001642  1644               	andwf	___ftadd@f2,f,c
  4722  001644  0EFF               	movlw	255
  4723  001646  1645               	andwf	___ftadd@f2+1,f,c
  4724  001648  0E00               	movlw	0
  4725  00164A  1646               	andwf	___ftadd@f2+2,f,c
  4726                           
  4727                           ; BSR set to: 0
  4728  00164C  5161               	movf	___ftadd@exp2& (0+255),w,b
  4729  00164E  5D62               	subwf	___ftadd@exp1& (0+255),w,b
  4730  001650  B0D8               	btfsc	status,0,c
  4731  001652  D01B               	goto	l472
  4732  001654                     u1560:
  4733                           
  4734                           ; BSR set to: 0
  4735                           
  4736                           ; BSR set to: 0
  4737  001654  90D8               	bcf	status,0,c
  4738  001656  3644               	rlcf	___ftadd@f2,f,c
  4739  001658  3645               	rlcf	___ftadd@f2+1,f,c
  4740  00165A  3646               	rlcf	___ftadd@f2+2,f,c
  4741  00165C  0761               	decf	___ftadd@exp2& (0+255),f,b
  4742                           
  4743                           ; BSR set to: 0
  4744  00165E  5162               	movf	___ftadd@exp1& (0+255),w,b
  4745  001660  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  4746  001662  B4D8               	btfsc	status,2,c
  4747  001664  D00D               	goto	l477
  4748                           
  4749                           ; BSR set to: 0
  4750  001666  0760               	decf	___ftadd@sign& (0+255),f,b
  4751  001668  C060  F047         	movff	___ftadd@sign,??___ftadd
  4752  00166C  0E07               	movlw	7
  4753  00166E  1647               	andwf	??___ftadd,f,c
  4754  001670  B4D8               	btfsc	status,2,c
  4755  001672  D006               	goto	l477
  4756  001674  D7EF               	goto	u1560
  4757  001676                     
  4758                           ; BSR set to: 0
  4759                           
  4760                           ; BSR set to: 0
  4761  001676  90D8               	bcf	status,0,c
  4762  001678  3243               	rrcf	___ftadd@f1+2,f,c
  4763  00167A  3242               	rrcf	___ftadd@f1+1,f,c
  4764  00167C  3241               	rrcf	___ftadd@f1,f,c
  4765  00167E  2B62               	incf	___ftadd@exp1& (0+255),f,b
  4766  001680                     l477:
  4767                           
  4768                           ; BSR set to: 0
  4769                           
  4770                           ; BSR set to: 0
  4771  001680  5161               	movf	___ftadd@exp2& (0+255),w,b
  4772  001682  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  4773  001684  B4D8               	btfsc	status,2,c
  4774  001686  D01F               	goto	u1630
  4775  001688  D7F6               	goto	l478
  4776  00168A                     l472:
  4777                           
  4778                           ; BSR set to: 0
  4779                           
  4780                           ; BSR set to: 0
  4781  00168A  5162               	movf	___ftadd@exp1& (0+255),w,b
  4782  00168C  5D61               	subwf	___ftadd@exp2& (0+255),w,b
  4783  00168E  B0D8               	btfsc	status,0,c
  4784  001690  D01A               	goto	u1630
  4785  001692                     u1600:
  4786                           
  4787                           ; BSR set to: 0
  4788                           
  4789                           ; BSR set to: 0
  4790  001692  90D8               	bcf	status,0,c
  4791  001694  3641               	rlcf	___ftadd@f1,f,c
  4792  001696  3642               	rlcf	___ftadd@f1+1,f,c
  4793  001698  3643               	rlcf	___ftadd@f1+2,f,c
  4794  00169A  0762               	decf	___ftadd@exp1& (0+255),f,b
  4795                           
  4796                           ; BSR set to: 0
  4797  00169C  5162               	movf	___ftadd@exp1& (0+255),w,b
  4798  00169E  1961               	xorwf	___ftadd@exp2& (0+255),w,b
  4799  0016A0  B4D8               	btfsc	status,2,c
  4800  0016A2  D00D               	goto	l486
  4801                           
  4802                           ; BSR set to: 0
  4803  0016A4  0760               	decf	___ftadd@sign& (0+255),f,b
  4804  0016A6  C060  F047         	movff	___ftadd@sign,??___ftadd
  4805  0016AA  0E07               	movlw	7
  4806  0016AC  1647               	andwf	??___ftadd,f,c
  4807  0016AE  B4D8               	btfsc	status,2,c
  4808  0016B0  D006               	goto	l486
  4809  0016B2  D7EF               	goto	u1600
  4810  0016B4                     
  4811                           ; BSR set to: 0
  4812                           
  4813                           ; BSR set to: 0
  4814  0016B4  90D8               	bcf	status,0,c
  4815  0016B6  3246               	rrcf	___ftadd@f2+2,f,c
  4816  0016B8  3245               	rrcf	___ftadd@f2+1,f,c
  4817  0016BA  3244               	rrcf	___ftadd@f2,f,c
  4818  0016BC  2B61               	incf	___ftadd@exp2& (0+255),f,b
  4819  0016BE                     l486:
  4820                           
  4821                           ; BSR set to: 0
  4822                           
  4823                           ; BSR set to: 0
  4824  0016BE  5161               	movf	___ftadd@exp2& (0+255),w,b
  4825  0016C0  1962               	xorwf	___ftadd@exp1& (0+255),w,b
  4826  0016C2  A4D8               	btfss	status,2,c
  4827  0016C4  D7F7               	goto	l487
  4828  0016C6                     u1630:
  4829                           
  4830                           ; BSR set to: 0
  4831                           
  4832                           ; BSR set to: 0
  4833                           
  4834                           ; BSR set to: 0
  4835  0016C6  AF60               	btfss	___ftadd@sign& (0+255),7,b
  4836  0016C8  D00C               	goto	l489
  4837                           
  4838                           ; BSR set to: 0
  4839  0016CA  0EFF               	movlw	255
  4840  0016CC  1A41               	xorwf	___ftadd@f1,f,c
  4841  0016CE  0EFF               	movlw	255
  4842  0016D0  1A42               	xorwf	___ftadd@f1+1,f,c
  4843  0016D2  0EFF               	movlw	255
  4844  0016D4  1A43               	xorwf	___ftadd@f1+2,f,c
  4845  0016D6  0E01               	movlw	1
  4846  0016D8  2641               	addwf	___ftadd@f1,f,c
  4847  0016DA  0E00               	movlw	0
  4848  0016DC  2242               	addwfc	___ftadd@f1+1,f,c
  4849  0016DE  0E00               	movlw	0
  4850  0016E0  2243               	addwfc	___ftadd@f1+2,f,c
  4851  0016E2                     l489:
  4852                           
  4853                           ; BSR set to: 0
  4854  0016E2  AD60               	btfss	___ftadd@sign& (0+255),6,b
  4855  0016E4  D00C               	goto	l490
  4856                           
  4857                           ; BSR set to: 0
  4858  0016E6  0EFF               	movlw	255
  4859  0016E8  1A44               	xorwf	___ftadd@f2,f,c
  4860  0016EA  0EFF               	movlw	255
  4861  0016EC  1A45               	xorwf	___ftadd@f2+1,f,c
  4862  0016EE  0EFF               	movlw	255
  4863  0016F0  1A46               	xorwf	___ftadd@f2+2,f,c
  4864  0016F2  0E01               	movlw	1
  4865  0016F4  2644               	addwf	___ftadd@f2,f,c
  4866  0016F6  0E00               	movlw	0
  4867  0016F8  2245               	addwfc	___ftadd@f2+1,f,c
  4868  0016FA  0E00               	movlw	0
  4869  0016FC  2246               	addwfc	___ftadd@f2+2,f,c
  4870  0016FE                     l490:
  4871                           
  4872                           ; BSR set to: 0
  4873                           
  4874                           ; BSR set to: 0
  4875  0016FE  0E00               	movlw	0
  4876  001700  6F60               	movwf	___ftadd@sign& (0+255),b
  4877                           
  4878                           ; BSR set to: 0
  4879  001702  5041               	movf	___ftadd@f1,w,c
  4880  001704  2644               	addwf	___ftadd@f2,f,c
  4881  001706  5042               	movf	___ftadd@f1+1,w,c
  4882  001708  2245               	addwfc	___ftadd@f2+1,f,c
  4883  00170A  5043               	movf	___ftadd@f1+2,w,c
  4884  00170C  2246               	addwfc	___ftadd@f2+2,f,c
  4885                           
  4886                           ; BSR set to: 0
  4887  00170E  AE46               	btfss	___ftadd@f2+2,7,c
  4888  001710  D00E               	goto	l491
  4889                           
  4890                           ; BSR set to: 0
  4891  001712  0EFF               	movlw	255
  4892  001714  1A44               	xorwf	___ftadd@f2,f,c
  4893  001716  0EFF               	movlw	255
  4894  001718  1A45               	xorwf	___ftadd@f2+1,f,c
  4895  00171A  0EFF               	movlw	255
  4896  00171C  1A46               	xorwf	___ftadd@f2+2,f,c
  4897  00171E  0E01               	movlw	1
  4898  001720  2644               	addwf	___ftadd@f2,f,c
  4899  001722  0E00               	movlw	0
  4900  001724  2245               	addwfc	___ftadd@f2+1,f,c
  4901  001726  0E00               	movlw	0
  4902  001728  2246               	addwfc	___ftadd@f2+2,f,c
  4903                           
  4904                           ; BSR set to: 0
  4905  00172A  0E01               	movlw	1
  4906  00172C  6F60               	movwf	___ftadd@sign& (0+255),b
  4907  00172E                     l491:
  4908                           
  4909                           ; BSR set to: 0
  4910                           
  4911                           ; BSR set to: 0
  4912  00172E  C044  F014         	movff	___ftadd@f2,___ftpack@arg
  4913  001732  C045  F015         	movff	___ftadd@f2+1,___ftpack@arg+1
  4914  001736  C046  F016         	movff	___ftadd@f2+2,___ftpack@arg+2
  4915  00173A  C062  F017         	movff	___ftadd@exp1,___ftpack@exp
  4916  00173E  C060  F018         	movff	___ftadd@sign,___ftpack@sign
  4917  001742  EC9F  F00E         	call	___ftpack	;wreg free
  4918  001746  C014  F041         	movff	?___ftpack,?___ftadd
  4919  00174A  C015  F042         	movff	?___ftpack+1,?___ftadd+1
  4920  00174E  C016  F043         	movff	?___ftpack+2,?___ftadd+2
  4921  001752  0012               	return	
  4922  001754                     __end_of___ftadd:
  4923                           	opt stack 0
  4924                           tblptru	equ	0xFF8
  4925                           tblptrh	equ	0xFF7
  4926                           tblptrl	equ	0xFF6
  4927                           tablat	equ	0xFF5
  4928                           prodh	equ	0xFF4
  4929                           prodl	equ	0xFF3
  4930                           intcon	equ	0xFF2
  4931                           wreg	equ	0xFE8
  4932                           postinc2	equ	0xFDE
  4933                           postdec2	equ	0xFDD
  4934                           fsr2h	equ	0xFDA
  4935                           fsr2l	equ	0xFD9
  4936                           status	equ	0xFD8
  4937                           
  4938 ;; *************** function ___ftneg *****************
  4939 ;; Defined at:
  4940 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  f1              3   19[COMRAM] float 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;		None
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  3   19[COMRAM] float 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4954 ;;      Params:         3       0       0       0       0       0       0       0       0
  4955 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4957 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4958 ;;Total ram usage:        3 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_printf
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text19
  4969  00231A                     __ptext19:
  4970                           	opt stack 0
  4971  00231A                     ___ftneg:
  4972                           	opt stack 28
  4973                           
  4974                           ;incstack = 0
  4975  00231A  5014               	movf	___ftneg@f1,w,c
  4976  00231C  1015               	iorwf	___ftneg@f1+1,w,c
  4977  00231E  1016               	iorwf	___ftneg@f1+2,w,c
  4978  002320  B4D8               	btfsc	status,2,c
  4979  002322  D006               	goto	l539
  4980  002324  0E00               	movlw	0
  4981  002326  1A14               	xorwf	___ftneg@f1,f,c
  4982  002328  0E00               	movlw	0
  4983  00232A  1A15               	xorwf	___ftneg@f1+1,f,c
  4984  00232C  0E80               	movlw	128
  4985  00232E  1A16               	xorwf	___ftneg@f1+2,f,c
  4986  002330                     l539:
  4987  002330  C014  F014         	movff	___ftneg@f1,?___ftneg
  4988  002334  C015  F015         	movff	___ftneg@f1+1,?___ftneg+1
  4989  002338  C016  F016         	movff	___ftneg@f1+2,?___ftneg+2
  4990  00233C  0012               	return		;funcret
  4991  00233E                     __end_of___ftneg:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           wreg	equ	0xFE8
  5001                           postinc2	equ	0xFDE
  5002                           postdec2	equ	0xFDD
  5003                           fsr2h	equ	0xFDA
  5004                           fsr2l	equ	0xFD9
  5005                           status	equ	0xFD8
  5006                           
  5007 ;; *************** function ___ftge *****************
  5008 ;; Defined at:
  5009 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftge.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;  ff1             3   19[COMRAM] float 
  5012 ;;  ff2             3   22[COMRAM] float 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;		None               void
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5024 ;;      Params:         6       0       0       0       0       0       0       0       0
  5025 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5026 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5027 ;;      Totals:         9       0       0       0       0       0       0       0       0
  5028 ;;Total ram usage:        9 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; Hardware stack levels required when called:    1
  5031 ;; This function calls:
  5032 ;;		Nothing
  5033 ;; This function is called by:
  5034 ;;		_printf
  5035 ;; This function uses a non-reentrant model
  5036 ;;
  5037                           
  5038                           	psect	text20
  5039  001E96                     __ptext20:
  5040                           	opt stack 0
  5041  001E96                     ___ftge:
  5042                           	opt stack 28
  5043                           
  5044                           ;incstack = 0
  5045  001E96  AE16               	btfss	___ftge@ff1+2,7,c
  5046  001E98  D016               	goto	l521
  5047  001E9A  C014  F01A         	movff	___ftge@ff1,??___ftge
  5048  001E9E  C015  F01B         	movff	___ftge@ff1+1,??___ftge+1
  5049  001EA2  C016  F01C         	movff	___ftge@ff1+2,??___ftge+2
  5050  001EA6  1E1A               	comf	??___ftge,f,c
  5051  001EA8  1E1B               	comf	??___ftge+1,f,c
  5052  001EAA  1E1C               	comf	??___ftge+2,f,c
  5053  001EAC  2A1A               	incf	??___ftge,f,c
  5054  001EAE  0E00               	movlw	0
  5055  001EB0  221B               	addwfc	??___ftge+1,f,c
  5056  001EB2  221C               	addwfc	??___ftge+2,f,c
  5057  001EB4  0E00               	movlw	0
  5058  001EB6  241A               	addwf	??___ftge,w,c
  5059  001EB8  6E14               	movwf	___ftge@ff1,c
  5060  001EBA  0E00               	movlw	0
  5061  001EBC  201B               	addwfc	??___ftge+1,w,c
  5062  001EBE  6E15               	movwf	___ftge@ff1+1,c
  5063  001EC0  0E80               	movlw	128
  5064  001EC2  201C               	addwfc	??___ftge+2,w,c
  5065  001EC4  6E16               	movwf	___ftge@ff1+2,c
  5066  001EC6                     l521:
  5067  001EC6  AE19               	btfss	___ftge@ff2+2,7,c
  5068  001EC8  D016               	goto	l522
  5069  001ECA  C017  F01A         	movff	___ftge@ff2,??___ftge
  5070  001ECE  C018  F01B         	movff	___ftge@ff2+1,??___ftge+1
  5071  001ED2  C019  F01C         	movff	___ftge@ff2+2,??___ftge+2
  5072  001ED6  1E1A               	comf	??___ftge,f,c
  5073  001ED8  1E1B               	comf	??___ftge+1,f,c
  5074  001EDA  1E1C               	comf	??___ftge+2,f,c
  5075  001EDC  2A1A               	incf	??___ftge,f,c
  5076  001EDE  0E00               	movlw	0
  5077  001EE0  221B               	addwfc	??___ftge+1,f,c
  5078  001EE2  221C               	addwfc	??___ftge+2,f,c
  5079  001EE4  0E00               	movlw	0
  5080  001EE6  241A               	addwf	??___ftge,w,c
  5081  001EE8  6E17               	movwf	___ftge@ff2,c
  5082  001EEA  0E00               	movlw	0
  5083  001EEC  201B               	addwfc	??___ftge+1,w,c
  5084  001EEE  6E18               	movwf	___ftge@ff2+1,c
  5085  001EF0  0E80               	movlw	128
  5086  001EF2  201C               	addwfc	??___ftge+2,w,c
  5087  001EF4  6E19               	movwf	___ftge@ff2+2,c
  5088  001EF6                     l522:
  5089  001EF6  0E00               	movlw	0
  5090  001EF8  1A14               	xorwf	___ftge@ff1,f,c
  5091  001EFA  0E00               	movlw	0
  5092  001EFC  1A15               	xorwf	___ftge@ff1+1,f,c
  5093  001EFE  0E80               	movlw	128
  5094  001F00  1A16               	xorwf	___ftge@ff1+2,f,c
  5095  001F02  0E00               	movlw	0
  5096  001F04  1A17               	xorwf	___ftge@ff2,f,c
  5097  001F06  0E00               	movlw	0
  5098  001F08  1A18               	xorwf	___ftge@ff2+1,f,c
  5099  001F0A  0E80               	movlw	128
  5100  001F0C  1A19               	xorwf	___ftge@ff2+2,f,c
  5101  001F0E  5017               	movf	___ftge@ff2,w,c
  5102  001F10  5C14               	subwf	___ftge@ff1,w,c
  5103  001F12  5018               	movf	___ftge@ff2+1,w,c
  5104  001F14  5815               	subwfb	___ftge@ff1+1,w,c
  5105  001F16  5019               	movf	___ftge@ff2+2,w,c
  5106  001F18  5816               	subwfb	___ftge@ff1+2,w,c
  5107  001F1A  B0D8               	btfsc	status,0,c
  5108  001F1C  D002               	goto	l1769
  5109  001F1E  90D8               	bcf	status,0,c
  5110  001F20  0012               	return	
  5111  001F22                     l1769:
  5112  001F22  80D8               	bsf	status,0,c
  5113  001F24  0012               	return	
  5114  001F26                     __end_of___ftge:
  5115                           	opt stack 0
  5116                           tblptru	equ	0xFF8
  5117                           tblptrh	equ	0xFF7
  5118                           tblptrl	equ	0xFF6
  5119                           tablat	equ	0xFF5
  5120                           prodh	equ	0xFF4
  5121                           prodl	equ	0xFF3
  5122                           intcon	equ	0xFF2
  5123                           wreg	equ	0xFE8
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _inicializa_lcd *****************
  5131 ;; Defined at:
  5132 ;;		line 43 in file "lcd.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;		None
  5135 ;; Auto vars:     Size  Location     Type
  5136 ;;		None
  5137 ;; Return value:  Size  Location     Type
  5138 ;;                  1    wreg      void 
  5139 ;; Registers used:
  5140 ;;		wreg, status,2, status,0, cstack
  5141 ;; Tracked objects:
  5142 ;;		On entry : 0/0
  5143 ;;		On exit  : 0/0
  5144 ;;		Unchanged: 0/0
  5145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5146 ;;      Params:         0       0       0       0       0       0       0       0       0
  5147 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5148 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5149 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5150 ;;Total ram usage:        1 bytes
  5151 ;; Hardware stack levels used:    1
  5152 ;; Hardware stack levels required when called:    4
  5153 ;; This function calls:
  5154 ;;		_envia_byte_lcd
  5155 ;;		_envia_nibble_lcd
  5156 ;;		_limpa_lcd
  5157 ;; This function is called by:
  5158 ;;		_main
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           	psect	text21
  5163  0020AC                     __ptext21:
  5164                           	opt stack 0
  5165  0020AC                     _inicializa_lcd:
  5166                           	opt stack 26
  5167                           
  5168                           ;lcd.c: 45: PORTDbits.RD4 = 0;
  5169                           
  5170                           ;incstack = 0
  5171  0020AC  9883               	bcf	3971,4,c	;volatile
  5172                           
  5173                           ;lcd.c: 46: PORTDbits.RD5 = 0;
  5174  0020AE  9A83               	bcf	3971,5,c	;volatile
  5175                           
  5176                           ;lcd.c: 47: PORTDbits.RD6 = 0;
  5177  0020B0  9C83               	bcf	3971,6,c	;volatile
  5178                           
  5179                           ;lcd.c: 48: PORTDbits.RD7 = 0;
  5180  0020B2  9E83               	bcf	3971,7,c	;volatile
  5181                           
  5182                           ;lcd.c: 49: _delay((unsigned long)((5)*(4000000/4000.0)));
  5183  0020B4  0E07               	movlw	7
  5184  0020B6  6E19               	movwf	??_inicializa_lcd& (0+255),c
  5185  0020B8  0E7D               	movlw	125
  5186  0020BA                     u2747:
  5187  0020BA  2EE8               	decfsz	wreg,f,c
  5188  0020BC  D7FE               	bra	u2747
  5189  0020BE  2E19               	decfsz	??_inicializa_lcd& (0+255),f,c
  5190  0020C0  D7FC               	bra	u2747
  5191  0020C2  F000               	nop	
  5192                           
  5193                           ;lcd.c: 50: envia_nibble_lcd(0x03);
  5194  0020C4  0E03               	movlw	3
  5195  0020C6  EC16  F010         	call	_envia_nibble_lcd
  5196                           
  5197                           ;lcd.c: 51: _delay((unsigned long)((5)*(4000000/4000.0)));
  5198  0020CA  0E07               	movlw	7
  5199  0020CC  6E19               	movwf	??_inicializa_lcd& (0+255),c
  5200  0020CE  0E7D               	movlw	125
  5201  0020D0                     u2757:
  5202  0020D0  2EE8               	decfsz	wreg,f,c
  5203  0020D2  D7FE               	bra	u2757
  5204  0020D4  2E19               	decfsz	??_inicializa_lcd& (0+255),f,c
  5205  0020D6  D7FC               	bra	u2757
  5206  0020D8  F000               	nop	
  5207                           
  5208                           ;lcd.c: 52: envia_nibble_lcd(0x03);
  5209  0020DA  0E03               	movlw	3
  5210  0020DC  EC16  F010         	call	_envia_nibble_lcd
  5211                           
  5212                           ;lcd.c: 53: _delay((unsigned long)((5)*(4000000/4000.0)));
  5213  0020E0  0E07               	movlw	7
  5214  0020E2  6E19               	movwf	??_inicializa_lcd& (0+255),c
  5215  0020E4  0E7D               	movlw	125
  5216  0020E6                     u2767:
  5217  0020E6  2EE8               	decfsz	wreg,f,c
  5218  0020E8  D7FE               	bra	u2767
  5219  0020EA  2E19               	decfsz	??_inicializa_lcd& (0+255),f,c
  5220  0020EC  D7FC               	bra	u2767
  5221  0020EE  F000               	nop	
  5222                           
  5223                           ;lcd.c: 54: envia_nibble_lcd(0x02);
  5224  0020F0  0E02               	movlw	2
  5225  0020F2  EC16  F010         	call	_envia_nibble_lcd
  5226                           
  5227                           ;lcd.c: 56: _delay((unsigned long)((1)*(4000000/4000.0)));
  5228  0020F6  0EC8               	movlw	200
  5229  0020F8                     u2777:
  5230  0020F8  D000               	nop2	
  5231  0020FA  2EE8               	decfsz	wreg,f,c
  5232  0020FC  D7FD               	bra	u2777
  5233                           
  5234                           ;lcd.c: 57: envia_byte_lcd(0,0x28);
  5235  0020FE  0E28               	movlw	40
  5236  002100  6E16               	movwf	envia_byte_lcd@dado,c
  5237  002102  0E00               	movlw	0
  5238  002104  EC4B  F011         	call	_envia_byte_lcd
  5239                           
  5240                           ;lcd.c: 59: envia_byte_lcd(0,0x0c);
  5241  002108  0E0C               	movlw	12
  5242  00210A  6E16               	movwf	envia_byte_lcd@dado,c
  5243  00210C  0E00               	movlw	0
  5244  00210E  EC4B  F011         	call	_envia_byte_lcd
  5245                           
  5246                           ;lcd.c: 60: limpa_lcd();
  5247  002112  ECC0  F011         	call	_limpa_lcd	;wreg free
  5248                           
  5249                           ;lcd.c: 61: envia_byte_lcd(0,0x06);
  5250  002116  0E06               	movlw	6
  5251  002118  6E16               	movwf	envia_byte_lcd@dado,c
  5252  00211A  0E00               	movlw	0
  5253  00211C  EC4B  F011         	call	_envia_byte_lcd
  5254  002120  0012               	return		;funcret
  5255  002122                     __end_of_inicializa_lcd:
  5256                           	opt stack 0
  5257                           tblptru	equ	0xFF8
  5258                           tblptrh	equ	0xFF7
  5259                           tblptrl	equ	0xFF6
  5260                           tablat	equ	0xFF5
  5261                           prodh	equ	0xFF4
  5262                           prodl	equ	0xFF3
  5263                           intcon	equ	0xFF2
  5264                           wreg	equ	0xFE8
  5265                           postinc2	equ	0xFDE
  5266                           postdec2	equ	0xFDD
  5267                           fsr2h	equ	0xFDA
  5268                           fsr2l	equ	0xFD9
  5269                           status	equ	0xFD8
  5270                           
  5271 ;; *************** function _limpa_lcd *****************
  5272 ;; Defined at:
  5273 ;;		line 36 in file "lcd.c"
  5274 ;; Parameters:    Size  Location     Type
  5275 ;;		None
  5276 ;; Auto vars:     Size  Location     Type
  5277 ;;		None
  5278 ;; Return value:  Size  Location     Type
  5279 ;;                  1    wreg      void 
  5280 ;; Registers used:
  5281 ;;		wreg, status,2, status,0, cstack
  5282 ;; Tracked objects:
  5283 ;;		On entry : 0/0
  5284 ;;		On exit  : 0/0
  5285 ;;		Unchanged: 0/0
  5286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5287 ;;      Params:         0       0       0       0       0       0       0       0       0
  5288 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5289 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5290 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5291 ;;Total ram usage:        1 bytes
  5292 ;; Hardware stack levels used:    1
  5293 ;; Hardware stack levels required when called:    3
  5294 ;; This function calls:
  5295 ;;		_envia_byte_lcd
  5296 ;; This function is called by:
  5297 ;;		_main
  5298 ;;		_inicializa_lcd
  5299 ;; This function uses a non-reentrant model
  5300 ;;
  5301                           
  5302                           	psect	text22
  5303  002380                     __ptext22:
  5304                           	opt stack 0
  5305  002380                     _limpa_lcd:
  5306                           	opt stack 27
  5307                           
  5308                           ;lcd.c: 38: envia_byte_lcd(0,0x01);
  5309                           
  5310                           ;incstack = 0
  5311  002380  0E01               	movlw	1
  5312  002382  6E16               	movwf	envia_byte_lcd@dado,c
  5313  002384  0E00               	movlw	0
  5314  002386  EC4B  F011         	call	_envia_byte_lcd
  5315                           
  5316                           ;lcd.c: 39: _delay((unsigned long)((2)*(4000000/4000.0)));
  5317  00238A  0E03               	movlw	3
  5318  00238C  6E18               	movwf	??_limpa_lcd& (0+255),c
  5319  00238E  0E98               	movlw	152
  5320  002390                     u2787:
  5321  002390  2EE8               	decfsz	wreg,f,c
  5322  002392  D7FE               	bra	u2787
  5323  002394  2E18               	decfsz	??_limpa_lcd& (0+255),f,c
  5324  002396  D7FC               	bra	u2787
  5325  002398  0012               	return		;funcret
  5326  00239A                     __end_of_limpa_lcd:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           wreg	equ	0xFE8
  5336                           postinc2	equ	0xFDE
  5337                           postdec2	equ	0xFDD
  5338                           fsr2h	equ	0xFDA
  5339                           fsr2l	equ	0xFD9
  5340                           status	equ	0xFD8
  5341                           
  5342 ;; *************** function _caracter_inicio *****************
  5343 ;; Defined at:
  5344 ;;		line 67 in file "lcd.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  linha           1    wreg     unsigned char 
  5347 ;;  coluna          1   23[COMRAM] unsigned char 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;  linha           1   24[COMRAM] unsigned char 
  5350 ;;  posicao         1   25[COMRAM] unsigned char 
  5351 ;; Return value:  Size  Location     Type
  5352 ;;                  1    wreg      void 
  5353 ;; Registers used:
  5354 ;;		wreg, status,2, status,0, cstack
  5355 ;; Tracked objects:
  5356 ;;		On entry : 0/0
  5357 ;;		On exit  : 0/0
  5358 ;;		Unchanged: 0/0
  5359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5360 ;;      Params:         1       0       0       0       0       0       0       0       0
  5361 ;;      Locals:         2       0       0       0       0       0       0       0       0
  5362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5363 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5364 ;;Total ram usage:        3 bytes
  5365 ;; Hardware stack levels used:    1
  5366 ;; Hardware stack levels required when called:    3
  5367 ;; This function calls:
  5368 ;;		_envia_byte_lcd
  5369 ;; This function is called by:
  5370 ;;		_main
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373                           
  5374                           	psect	text23
  5375  0022C6                     __ptext23:
  5376                           	opt stack 0
  5377  0022C6                     _caracter_inicio:
  5378                           	opt stack 27
  5379                           
  5380                           ;incstack = 0
  5381                           ;caracter_inicio@linha stored from wreg
  5382  0022C6  6E19               	movwf	caracter_inicio@linha,c
  5383                           
  5384                           ;lcd.c: 69: char posicao=0;
  5385  0022C8  0E00               	movlw	0
  5386  0022CA  6E1A               	movwf	caracter_inicio@posicao,c
  5387                           
  5388                           ;lcd.c: 70: if(linha == 1)
  5389  0022CC  0419               	decf	caracter_inicio@linha,w,c
  5390  0022CE  A4D8               	btfss	status,2,c
  5391  0022D0  D002               	goto	l103
  5392                           
  5393                           ;lcd.c: 71: {
  5394                           ;lcd.c: 72: posicao=0x80;
  5395  0022D2  0E80               	movlw	128
  5396  0022D4  6E1A               	movwf	caracter_inicio@posicao,c
  5397  0022D6                     l103:
  5398                           
  5399                           ;lcd.c: 73: }
  5400                           ;lcd.c: 74: if(linha == 2)
  5401  0022D6  0E02               	movlw	2
  5402  0022D8  1819               	xorwf	caracter_inicio@linha,w,c
  5403  0022DA  A4D8               	btfss	status,2,c
  5404  0022DC  D002               	goto	l104
  5405                           
  5406                           ;lcd.c: 75: {
  5407                           ;lcd.c: 76: posicao=0xc0;
  5408  0022DE  0EC0               	movlw	192
  5409  0022E0  6E1A               	movwf	caracter_inicio@posicao,c
  5410  0022E2                     l104:
  5411                           
  5412                           ;lcd.c: 77: }
  5413                           ;lcd.c: 79: posicao=posicao+coluna;
  5414  0022E2  501A               	movf	caracter_inicio@posicao,w,c
  5415  0022E4  2418               	addwf	caracter_inicio@coluna,w,c
  5416  0022E6  6E1A               	movwf	caracter_inicio@posicao,c
  5417                           
  5418                           ;lcd.c: 81: envia_byte_lcd(0,posicao);
  5419  0022E8  C01A  F016         	movff	caracter_inicio@posicao,envia_byte_lcd@dado
  5420  0022EC  0E00               	movlw	0
  5421  0022EE  EC4B  F011         	call	_envia_byte_lcd
  5422  0022F2  0012               	return		;funcret
  5423  0022F4                     __end_of_caracter_inicio:
  5424                           	opt stack 0
  5425                           tblptru	equ	0xFF8
  5426                           tblptrh	equ	0xFF7
  5427                           tblptrl	equ	0xFF6
  5428                           tablat	equ	0xFF5
  5429                           prodh	equ	0xFF4
  5430                           prodl	equ	0xFF3
  5431                           intcon	equ	0xFF2
  5432                           wreg	equ	0xFE8
  5433                           postinc2	equ	0xFDE
  5434                           postdec2	equ	0xFDD
  5435                           fsr2h	equ	0xFDA
  5436                           fsr2l	equ	0xFD9
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _envia_byte_lcd *****************
  5440 ;; Defined at:
  5441 ;;		line 20 in file "lcd.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  endereco        1    wreg     unsigned char 
  5444 ;;  dado            1   21[COMRAM] unsigned char 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  endereco        1   22[COMRAM] unsigned char 
  5447 ;; Return value:  Size  Location     Type
  5448 ;;                  1    wreg      void 
  5449 ;; Registers used:
  5450 ;;		wreg, status,2, status,0, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5456 ;;      Params:         1       0       0       0       0       0       0       0       0
  5457 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5459 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5460 ;;Total ram usage:        2 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    2
  5463 ;; This function calls:
  5464 ;;		_envia_nibble_lcd
  5465 ;; This function is called by:
  5466 ;;		_escreve_lcd
  5467 ;;		_limpa_lcd
  5468 ;;		_inicializa_lcd
  5469 ;;		_caracter_inicio
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           	psect	text24
  5474  002296                     __ptext24:
  5475                           	opt stack 0
  5476  002296                     _envia_byte_lcd:
  5477                           	opt stack 25
  5478                           
  5479                           ;incstack = 0
  5480                           ;envia_byte_lcd@endereco stored from wreg
  5481  002296  6E17               	movwf	envia_byte_lcd@endereco,c
  5482                           
  5483                           ;lcd.c: 22: PORTDbits.RD0 = endereco;
  5484  002298  B017               	btfsc	envia_byte_lcd@endereco,0,c
  5485  00229A  D002               	bra	u1375
  5486  00229C  9083               	bcf	3971,0,c	;volatile
  5487  00229E  D001               	bra	u1376
  5488  0022A0                     u1375:
  5489  0022A0  8083               	bsf	3971,0,c	;volatile
  5490  0022A2                     u1376:
  5491                           
  5492                           ;lcd.c: 23: _delay((unsigned long)((100)*(4000000/4000000.0)));
  5493  0022A2  0E21               	movlw	33
  5494  0022A4                     u2797:
  5495  0022A4  2EE8               	decfsz	wreg,f,c
  5496  0022A6  D7FE               	bra	u2797
  5497  0022A8  F000               	nop	
  5498                           
  5499                           ;lcd.c: 24: PORTDbits.RD1 = 0;
  5500  0022AA  9283               	bcf	3971,1,c	;volatile
  5501                           
  5502                           ;lcd.c: 25: envia_nibble_lcd(dado>>4);
  5503  0022AC  3816               	swapf	envia_byte_lcd@dado,w,c
  5504  0022AE  0B0F               	andlw	15
  5505  0022B0  EC16  F010         	call	_envia_nibble_lcd
  5506                           
  5507                           ;lcd.c: 26: envia_nibble_lcd(dado & 0x0f);
  5508  0022B4  5016               	movf	envia_byte_lcd@dado,w,c
  5509  0022B6  0B0F               	andlw	15
  5510  0022B8  EC16  F010         	call	_envia_nibble_lcd
  5511                           
  5512                           ;lcd.c: 27: _delay((unsigned long)((40)*(4000000/4000000.0)));
  5513  0022BC  0E0D               	movlw	13
  5514  0022BE                     u2807:
  5515  0022BE  2EE8               	decfsz	wreg,f,c
  5516  0022C0  D7FE               	bra	u2807
  5517  0022C2  F000               	nop	
  5518  0022C4  0012               	return		;funcret
  5519  0022C6                     __end_of_envia_byte_lcd:
  5520                           	opt stack 0
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           intcon	equ	0xFF2
  5528                           wreg	equ	0xFE8
  5529                           postinc2	equ	0xFDE
  5530                           postdec2	equ	0xFDD
  5531                           fsr2h	equ	0xFDA
  5532                           fsr2l	equ	0xFD9
  5533                           status	equ	0xFD8
  5534                           
  5535 ;; *************** function _envia_nibble_lcd *****************
  5536 ;; Defined at:
  5537 ;;		line 4 in file "lcd.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;  dado            1    wreg     unsigned char 
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  dado            1   20[COMRAM] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      void 
  5544 ;; Registers used:
  5545 ;;		wreg, status,2, status,0
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0
  5552 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5553 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5554 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5555 ;;Total ram usage:        2 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    1
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_envia_byte_lcd
  5562 ;;		_inicializa_lcd
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text25
  5567  00202C                     __ptext25:
  5568                           	opt stack 0
  5569  00202C                     _envia_nibble_lcd:
  5570                           	opt stack 25
  5571                           
  5572                           ;incstack = 0
  5573                           ;envia_nibble_lcd@dado stored from wreg
  5574  00202C  6E15               	movwf	envia_nibble_lcd@dado,c
  5575                           
  5576                           ;lcd.c: 6: PORTDbits.RD4 = dado & 0x01;
  5577  00202E  C015  F014         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  5578  002032  0E01               	movlw	1
  5579  002034  1614               	andwf	??_envia_nibble_lcd,f,c
  5580  002036  3A14               	swapf	??_envia_nibble_lcd,f,c
  5581  002038  5083               	movf	3971,w,c	;volatile
  5582  00203A  1814               	xorwf	??_envia_nibble_lcd,w,c
  5583  00203C  0BEF               	andlw	-17
  5584  00203E  1814               	xorwf	??_envia_nibble_lcd,w,c
  5585  002040  6E83               	movwf	3971,c	;volatile
  5586                           
  5587                           ;lcd.c: 7: PORTDbits.RD5 = (dado >> 1) & 0x01;
  5588  002042  C015  F014         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  5589  002046  90D8               	bcf	status,0,c
  5590  002048  3214               	rrcf	??_envia_nibble_lcd,f,c
  5591  00204A  0E01               	movlw	1
  5592  00204C  1614               	andwf	??_envia_nibble_lcd,f,c
  5593  00204E  3A14               	swapf	??_envia_nibble_lcd,f,c
  5594  002050  4614               	rlncf	??_envia_nibble_lcd,f,c
  5595  002052  5083               	movf	3971,w,c	;volatile
  5596  002054  1814               	xorwf	??_envia_nibble_lcd,w,c
  5597  002056  0BDF               	andlw	-33
  5598  002058  1814               	xorwf	??_envia_nibble_lcd,w,c
  5599  00205A  6E83               	movwf	3971,c	;volatile
  5600                           
  5601                           ;lcd.c: 8: PORTDbits.RD6 = (dado >> 2) & 0x01;
  5602  00205C  C015  F014         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  5603  002060  90D8               	bcf	status,0,c
  5604  002062  3214               	rrcf	??_envia_nibble_lcd,f,c
  5605  002064  90D8               	bcf	status,0,c
  5606  002066  3214               	rrcf	??_envia_nibble_lcd,f,c
  5607  002068  0E01               	movlw	1
  5608  00206A  1614               	andwf	??_envia_nibble_lcd,f,c
  5609  00206C  3A14               	swapf	??_envia_nibble_lcd,f,c
  5610  00206E  4614               	rlncf	??_envia_nibble_lcd,f,c
  5611  002070  4614               	rlncf	??_envia_nibble_lcd,f,c
  5612  002072  5083               	movf	3971,w,c	;volatile
  5613  002074  1814               	xorwf	??_envia_nibble_lcd,w,c
  5614  002076  0BBF               	andlw	-65
  5615  002078  1814               	xorwf	??_envia_nibble_lcd,w,c
  5616  00207A  6E83               	movwf	3971,c	;volatile
  5617                           
  5618                           ;lcd.c: 9: PORTDbits.RD7 = (dado >> 3) & 0x01;
  5619  00207C  C015  F014         	movff	envia_nibble_lcd@dado,??_envia_nibble_lcd
  5620  002080  90D8               	bcf	status,0,c
  5621  002082  3214               	rrcf	??_envia_nibble_lcd,f,c
  5622  002084  90D8               	bcf	status,0,c
  5623  002086  3214               	rrcf	??_envia_nibble_lcd,f,c
  5624  002088  90D8               	bcf	status,0,c
  5625  00208A  3214               	rrcf	??_envia_nibble_lcd,f,c
  5626  00208C  0E01               	movlw	1
  5627  00208E  1614               	andwf	??_envia_nibble_lcd,f,c
  5628  002090  3214               	rrcf	??_envia_nibble_lcd,f,c
  5629  002092  3214               	rrcf	??_envia_nibble_lcd,f,c
  5630  002094  5083               	movf	3971,w,c	;volatile
  5631  002096  1814               	xorwf	??_envia_nibble_lcd,w,c
  5632  002098  0B7F               	andlw	-129
  5633  00209A  1814               	xorwf	??_envia_nibble_lcd,w,c
  5634  00209C  6E83               	movwf	3971,c	;volatile
  5635                           
  5636                           ;lcd.c: 11: PORTDbits.RD1 = 1;
  5637  00209E  8283               	bsf	3971,1,c	;volatile
  5638                           
  5639                           ;lcd.c: 12: _delay((unsigned long)((25)*(4000000/4000000.0)));
  5640  0020A0  0E08               	movlw	8
  5641  0020A2                     u2817:
  5642  0020A2  2EE8               	decfsz	wreg,f,c
  5643  0020A4  D7FE               	bra	u2817
  5644  0020A6  F000               	nop	
  5645                           
  5646                           ;lcd.c: 13: PORTDbits.RD1 = 0;
  5647  0020A8  9283               	bcf	3971,1,c	;volatile
  5648  0020AA  0012               	return		;funcret
  5649  0020AC                     __end_of_envia_nibble_lcd:
  5650                           	opt stack 0
  5651                           tblptru	equ	0xFF8
  5652                           tblptrh	equ	0xFF7
  5653                           tblptrl	equ	0xFF6
  5654                           tablat	equ	0xFF5
  5655                           prodh	equ	0xFF4
  5656                           prodl	equ	0xFF3
  5657                           intcon	equ	0xFF2
  5658                           wreg	equ	0xFE8
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           fsr2h	equ	0xFDA
  5662                           fsr2l	equ	0xFD9
  5663                           status	equ	0xFD8
  5664                           
  5665 ;; *************** function ___lbtoft *****************
  5666 ;; Defined at:
  5667 ;;		line 27 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\lbtoft.c"
  5668 ;; Parameters:    Size  Location     Type
  5669 ;;  c               1    wreg     unsigned char 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  c               1   30[COMRAM] unsigned char 
  5672 ;; Return value:  Size  Location     Type
  5673 ;;                  3   27[COMRAM] float 
  5674 ;; Registers used:
  5675 ;;		wreg, status,2, status,0, cstack
  5676 ;; Tracked objects:
  5677 ;;		On entry : 0/0
  5678 ;;		On exit  : 0/0
  5679 ;;		Unchanged: 0/0
  5680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5681 ;;      Params:         3       0       0       0       0       0       0       0       0
  5682 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5683 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5684 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5685 ;;Total ram usage:        4 bytes
  5686 ;; Hardware stack levels used:    1
  5687 ;; Hardware stack levels required when called:    2
  5688 ;; This function calls:
  5689 ;;		___ftpack
  5690 ;; This function is called by:
  5691 ;;		_main
  5692 ;; This function uses a non-reentrant model
  5693 ;;
  5694                           
  5695                           	psect	text26
  5696  00233E                     __ptext26:
  5697                           	opt stack 0
  5698  00233E                     ___lbtoft:
  5699                           	opt stack 28
  5700                           
  5701                           ;incstack = 0
  5702                           ;___lbtoft@c stored from wreg
  5703  00233E  6E1F               	movwf	___lbtoft@c,c
  5704  002340  501F               	movf	___lbtoft@c,w,c
  5705  002342  6E14               	movwf	___ftpack@arg,c
  5706  002344  6A15               	clrf	___ftpack@arg+1,c
  5707  002346  6A16               	clrf	___ftpack@arg+2,c
  5708  002348  0E8E               	movlw	142
  5709  00234A  6E17               	movwf	___ftpack@exp,c
  5710  00234C  0E00               	movlw	0
  5711  00234E  6E18               	movwf	___ftpack@sign,c
  5712  002350  EC9F  F00E         	call	___ftpack	;wreg free
  5713  002354  C014  F01C         	movff	?___ftpack,?___lbtoft
  5714  002358  C015  F01D         	movff	?___ftpack+1,?___lbtoft+1
  5715  00235C  C016  F01E         	movff	?___ftpack+2,?___lbtoft+2
  5716  002360  0012               	return	
  5717  002362                     __end_of___lbtoft:
  5718                           	opt stack 0
  5719                           tblptru	equ	0xFF8
  5720                           tblptrh	equ	0xFF7
  5721                           tblptrl	equ	0xFF6
  5722                           tablat	equ	0xFF5
  5723                           prodh	equ	0xFF4
  5724                           prodl	equ	0xFF3
  5725                           intcon	equ	0xFF2
  5726                           wreg	equ	0xFE8
  5727                           postinc2	equ	0xFDE
  5728                           postdec2	equ	0xFDD
  5729                           fsr2h	equ	0xFDA
  5730                           fsr2l	equ	0xFD9
  5731                           status	equ	0xFD8
  5732                           
  5733 ;; *************** function ___ftdiv *****************
  5734 ;; Defined at:
  5735 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftdiv.c"
  5736 ;; Parameters:    Size  Location     Type
  5737 ;;  f1              3   31[COMRAM] float 
  5738 ;;  f2              3   34[COMRAM] float 
  5739 ;; Auto vars:     Size  Location     Type
  5740 ;;  f3              3   41[COMRAM] float 
  5741 ;;  sign            1   45[COMRAM] unsigned char 
  5742 ;;  exp             1   44[COMRAM] unsigned char 
  5743 ;;  cntr            1   40[COMRAM] unsigned char 
  5744 ;; Return value:  Size  Location     Type
  5745 ;;                  3   31[COMRAM] float 
  5746 ;; Registers used:
  5747 ;;		wreg, status,2, status,0, cstack
  5748 ;; Tracked objects:
  5749 ;;		On entry : 0/0
  5750 ;;		On exit  : 0/0
  5751 ;;		Unchanged: 0/0
  5752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5753 ;;      Params:         6       0       0       0       0       0       0       0       0
  5754 ;;      Locals:         6       0       0       0       0       0       0       0       0
  5755 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5756 ;;      Totals:        15       0       0       0       0       0       0       0       0
  5757 ;;Total ram usage:       15 bytes
  5758 ;; Hardware stack levels used:    1
  5759 ;; Hardware stack levels required when called:    2
  5760 ;; This function calls:
  5761 ;;		___ftpack
  5762 ;; This function is called by:
  5763 ;;		_main
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text27
  5768  001B9A                     __ptext27:
  5769                           	opt stack 0
  5770  001B9A                     ___ftdiv:
  5771                           	opt stack 28
  5772                           
  5773                           ;incstack = 0
  5774  001B9A  C022  F026         	movff	___ftdiv@f1+2,??___ftdiv
  5775  001B9E  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  5776  001BA0  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  5777  001BA2  3421               	rlcf	___ftdiv@f1+1,w,c
  5778  001BA4  3626               	rlcf	??___ftdiv& (0+255),f,c
  5779  001BA6  E301               	bnc	u2661
  5780  001BA8  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  5781  001BAA                     u2661:
  5782  001BAA  5026               	movf	??___ftdiv,w,c
  5783  001BAC  6E2D               	movwf	___ftdiv@exp,c
  5784  001BAE  502D               	movf	___ftdiv@exp,w,c
  5785  001BB0  A4D8               	btfss	status,2,c
  5786  001BB2  D007               	goto	l496
  5787  001BB4  0E00               	movlw	0
  5788  001BB6  6E20               	movwf	?___ftdiv,c
  5789  001BB8  0E00               	movlw	0
  5790  001BBA  6E21               	movwf	?___ftdiv+1,c
  5791  001BBC  0E00               	movlw	0
  5792  001BBE  6E22               	movwf	?___ftdiv+2,c
  5793  001BC0  0012               	return	
  5794  001BC2                     l496:
  5795  001BC2  C025  F026         	movff	___ftdiv@f2+2,??___ftdiv
  5796  001BC6  6A27               	clrf	(??___ftdiv+1)& (0+255),c
  5797  001BC8  6A28               	clrf	(??___ftdiv+2)& (0+255),c
  5798  001BCA  3424               	rlcf	___ftdiv@f2+1,w,c
  5799  001BCC  3626               	rlcf	??___ftdiv& (0+255),f,c
  5800  001BCE  E301               	bnc	u2681
  5801  001BD0  8027               	bsf	(??___ftdiv+1)& (0+255),0,c
  5802  001BD2                     u2681:
  5803  001BD2  5026               	movf	??___ftdiv,w,c
  5804  001BD4  6E2E               	movwf	___ftdiv@sign,c
  5805  001BD6  502E               	movf	___ftdiv@sign,w,c
  5806  001BD8  A4D8               	btfss	status,2,c
  5807  001BDA  D007               	goto	l498
  5808  001BDC  0E00               	movlw	0
  5809  001BDE  6E20               	movwf	?___ftdiv,c
  5810  001BE0  0E00               	movlw	0
  5811  001BE2  6E21               	movwf	?___ftdiv+1,c
  5812  001BE4  0E00               	movlw	0
  5813  001BE6  6E22               	movwf	?___ftdiv+2,c
  5814  001BE8  0012               	return	
  5815  001BEA                     l498:
  5816  001BEA  0E00               	movlw	0
  5817  001BEC  6E2A               	movwf	___ftdiv@f3,c
  5818  001BEE  0E00               	movlw	0
  5819  001BF0  6E2B               	movwf	___ftdiv@f3+1,c
  5820  001BF2  0E00               	movlw	0
  5821  001BF4  6E2C               	movwf	___ftdiv@f3+2,c
  5822  001BF6  502E               	movf	___ftdiv@sign,w,c
  5823  001BF8  0F89               	addlw	137
  5824  001BFA  5E2D               	subwf	___ftdiv@exp,f,c
  5825  001BFC  C022  F02E         	movff	___ftdiv@f1+2,___ftdiv@sign
  5826  001C00  5025               	movf	___ftdiv@f2+2,w,c
  5827  001C02  1A2E               	xorwf	___ftdiv@sign,f,c
  5828  001C04  0E80               	movlw	128
  5829  001C06  162E               	andwf	___ftdiv@sign,f,c
  5830  001C08  8E21               	bsf	___ftdiv@f1+1,7,c
  5831  001C0A  0EFF               	movlw	255
  5832  001C0C  1620               	andwf	___ftdiv@f1,f,c
  5833  001C0E  0EFF               	movlw	255
  5834  001C10  1621               	andwf	___ftdiv@f1+1,f,c
  5835  001C12  0E00               	movlw	0
  5836  001C14  1622               	andwf	___ftdiv@f1+2,f,c
  5837  001C16  8E24               	bsf	___ftdiv@f2+1,7,c
  5838  001C18  0EFF               	movlw	255
  5839  001C1A  1623               	andwf	___ftdiv@f2,f,c
  5840  001C1C  0EFF               	movlw	255
  5841  001C1E  1624               	andwf	___ftdiv@f2+1,f,c
  5842  001C20  0E00               	movlw	0
  5843  001C22  1625               	andwf	___ftdiv@f2+2,f,c
  5844  001C24  0E18               	movlw	24
  5845  001C26  6E29               	movwf	___ftdiv@cntr,c
  5846  001C28  90D8               	bcf	status,0,c
  5847  001C2A  362A               	rlcf	___ftdiv@f3,f,c
  5848  001C2C  362B               	rlcf	___ftdiv@f3+1,f,c
  5849  001C2E  362C               	rlcf	___ftdiv@f3+2,f,c
  5850  001C30  5023               	movf	___ftdiv@f2,w,c
  5851  001C32  5C20               	subwf	___ftdiv@f1,w,c
  5852  001C34  5024               	movf	___ftdiv@f2+1,w,c
  5853  001C36  5821               	subwfb	___ftdiv@f1+1,w,c
  5854  001C38  5025               	movf	___ftdiv@f2+2,w,c
  5855  001C3A  5822               	subwfb	___ftdiv@f1+2,w,c
  5856  001C3C  A0D8               	btfss	status,0,c
  5857  001C3E  D007               	goto	l500
  5858  001C40  5023               	movf	___ftdiv@f2,w,c
  5859  001C42  5E20               	subwf	___ftdiv@f1,f,c
  5860  001C44  5024               	movf	___ftdiv@f2+1,w,c
  5861  001C46  5A21               	subwfb	___ftdiv@f1+1,f,c
  5862  001C48  5025               	movf	___ftdiv@f2+2,w,c
  5863  001C4A  5A22               	subwfb	___ftdiv@f1+2,f,c
  5864  001C4C  802A               	bsf	___ftdiv@f3,0,c
  5865  001C4E                     l500:
  5866  001C4E  90D8               	bcf	status,0,c
  5867  001C50  3620               	rlcf	___ftdiv@f1,f,c
  5868  001C52  3621               	rlcf	___ftdiv@f1+1,f,c
  5869  001C54  3622               	rlcf	___ftdiv@f1+2,f,c
  5870  001C56  2E29               	decfsz	___ftdiv@cntr,f,c
  5871  001C58  D7E7               	goto	l499
  5872  001C5A  C02A  F014         	movff	___ftdiv@f3,___ftpack@arg
  5873  001C5E  C02B  F015         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5874  001C62  C02C  F016         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5875  001C66  C02D  F017         	movff	___ftdiv@exp,___ftpack@exp
  5876  001C6A  C02E  F018         	movff	___ftdiv@sign,___ftpack@sign
  5877  001C6E  EC9F  F00E         	call	___ftpack	;wreg free
  5878  001C72  C014  F020         	movff	?___ftpack,?___ftdiv
  5879  001C76  C015  F021         	movff	?___ftpack+1,?___ftdiv+1
  5880  001C7A  C016  F022         	movff	?___ftpack+2,?___ftdiv+2
  5881  001C7E  0012               	return	
  5882  001C80                     __end_of___ftdiv:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           prodh	equ	0xFF4
  5889                           prodl	equ	0xFF3
  5890                           intcon	equ	0xFF2
  5891                           wreg	equ	0xFE8
  5892                           postinc2	equ	0xFDE
  5893                           postdec2	equ	0xFDD
  5894                           fsr2h	equ	0xFDA
  5895                           fsr2l	equ	0xFD9
  5896                           status	equ	0xFD8
  5897                           
  5898 ;; *************** function ___ftpack *****************
  5899 ;; Defined at:
  5900 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  5901 ;; Parameters:    Size  Location     Type
  5902 ;;  arg             3   19[COMRAM] unsigned um
  5903 ;;  exp             1   22[COMRAM] unsigned char 
  5904 ;;  sign            1   23[COMRAM] unsigned char 
  5905 ;; Auto vars:     Size  Location     Type
  5906 ;;		None
  5907 ;; Return value:  Size  Location     Type
  5908 ;;                  3   19[COMRAM] float 
  5909 ;; Registers used:
  5910 ;;		wreg, status,2, status,0
  5911 ;; Tracked objects:
  5912 ;;		On entry : 0/0
  5913 ;;		On exit  : 0/0
  5914 ;;		Unchanged: 0/0
  5915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5916 ;;      Params:         5       0       0       0       0       0       0       0       0
  5917 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5918 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5919 ;;      Totals:         8       0       0       0       0       0       0       0       0
  5920 ;;Total ram usage:        8 bytes
  5921 ;; Hardware stack levels used:    1
  5922 ;; Hardware stack levels required when called:    1
  5923 ;; This function calls:
  5924 ;;		Nothing
  5925 ;; This function is called by:
  5926 ;;		___ftadd
  5927 ;;		___ftdiv
  5928 ;;		___ftmul
  5929 ;;		___lbtoft
  5930 ;;		___lltoft
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text28
  5935  001D3E                     __ptext28:
  5936                           	opt stack 0
  5937  001D3E                     ___ftpack:
  5938                           	opt stack 26
  5939                           
  5940                           ;incstack = 0
  5941  001D3E  5017               	movf	___ftpack@exp,w,c
  5942  001D40  B4D8               	btfsc	status,2,c
  5943  001D42  D005               	goto	u1390
  5944  001D44  5014               	movf	___ftpack@arg,w,c
  5945  001D46  1015               	iorwf	___ftpack@arg+1,w,c
  5946  001D48  1016               	iorwf	___ftpack@arg+2,w,c
  5947  001D4A  A4D8               	btfss	status,2,c
  5948  001D4C  D00C               	goto	l432
  5949  001D4E                     u1390:
  5950  001D4E  0E00               	movlw	0
  5951  001D50  6E14               	movwf	?___ftpack,c
  5952  001D52  0E00               	movlw	0
  5953  001D54  6E15               	movwf	?___ftpack+1,c
  5954  001D56  0E00               	movlw	0
  5955  001D58  6E16               	movwf	?___ftpack+2,c
  5956  001D5A  0012               	return	
  5957  001D5C  2A17               	incf	___ftpack@exp,f,c
  5958  001D5E  90D8               	bcf	status,0,c
  5959  001D60  3216               	rrcf	___ftpack@arg+2,f,c
  5960  001D62  3215               	rrcf	___ftpack@arg+1,f,c
  5961  001D64  3214               	rrcf	___ftpack@arg,f,c
  5962  001D66                     l432:
  5963  001D66  0E00               	movlw	0
  5964  001D68  1414               	andwf	___ftpack@arg,w,c
  5965  001D6A  6E19               	movwf	??___ftpack& (0+255),c
  5966  001D6C  0E00               	movlw	0
  5967  001D6E  1415               	andwf	___ftpack@arg+1,w,c
  5968  001D70  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  5969  001D72  0EFE               	movlw	254
  5970  001D74  1416               	andwf	___ftpack@arg+2,w,c
  5971  001D76  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  5972  001D78  5019               	movf	??___ftpack,w,c
  5973  001D7A  101A               	iorwf	??___ftpack+1,w,c
  5974  001D7C  101B               	iorwf	??___ftpack+2,w,c
  5975  001D7E  B4D8               	btfsc	status,2,c
  5976  001D80  D00C               	goto	l435
  5977  001D82  D7EC               	goto	l433
  5978  001D84  2A17               	incf	___ftpack@exp,f,c
  5979  001D86  0E01               	movlw	1
  5980  001D88  2614               	addwf	___ftpack@arg,f,c
  5981  001D8A  0E00               	movlw	0
  5982  001D8C  2215               	addwfc	___ftpack@arg+1,f,c
  5983  001D8E  0E00               	movlw	0
  5984  001D90  2216               	addwfc	___ftpack@arg+2,f,c
  5985  001D92  90D8               	bcf	status,0,c
  5986  001D94  3216               	rrcf	___ftpack@arg+2,f,c
  5987  001D96  3215               	rrcf	___ftpack@arg+1,f,c
  5988  001D98  3214               	rrcf	___ftpack@arg,f,c
  5989  001D9A                     l435:
  5990  001D9A  0E00               	movlw	0
  5991  001D9C  1414               	andwf	___ftpack@arg,w,c
  5992  001D9E  6E19               	movwf	??___ftpack& (0+255),c
  5993  001DA0  0E00               	movlw	0
  5994  001DA2  1415               	andwf	___ftpack@arg+1,w,c
  5995  001DA4  6E1A               	movwf	(??___ftpack+1)& (0+255),c
  5996  001DA6  0EFF               	movlw	255
  5997  001DA8  1416               	andwf	___ftpack@arg+2,w,c
  5998  001DAA  6E1B               	movwf	(??___ftpack+2)& (0+255),c
  5999  001DAC  5019               	movf	??___ftpack,w,c
  6000  001DAE  101A               	iorwf	??___ftpack+1,w,c
  6001  001DB0  101B               	iorwf	??___ftpack+2,w,c
  6002  001DB2  B4D8               	btfsc	status,2,c
  6003  001DB4  D006               	goto	l438
  6004  001DB6  D7E6               	goto	l436
  6005  001DB8  0617               	decf	___ftpack@exp,f,c
  6006  001DBA  90D8               	bcf	status,0,c
  6007  001DBC  3614               	rlcf	___ftpack@arg,f,c
  6008  001DBE  3615               	rlcf	___ftpack@arg+1,f,c
  6009  001DC0  3616               	rlcf	___ftpack@arg+2,f,c
  6010  001DC2                     l438:
  6011  001DC2  BE15               	btfsc	___ftpack@arg+1,7,c
  6012  001DC4  D003               	goto	u1430
  6013  001DC6  0E02               	movlw	2
  6014  001DC8  6017               	cpfslt	___ftpack@exp,c
  6015  001DCA  D7F6               	goto	l439
  6016  001DCC                     u1430:
  6017  001DCC  A017               	btfss	___ftpack@exp,0,c
  6018  001DCE  9E15               	bcf	___ftpack@arg+1,7,c
  6019  001DD0  90D8               	bcf	status,0,c
  6020  001DD2  3217               	rrcf	___ftpack@exp,f,c
  6021  001DD4  5017               	movf	___ftpack@exp,w,c
  6022  001DD6  1216               	iorwf	___ftpack@arg+2,f,c
  6023  001DD8  5018               	movf	___ftpack@sign,w,c
  6024  001DDA  A4D8               	btfss	status,2,c
  6025  001DDC  8E16               	bsf	___ftpack@arg+2,7,c
  6026  001DDE  C014  F014         	movff	___ftpack@arg,?___ftpack
  6027  001DE2  C015  F015         	movff	___ftpack@arg+1,?___ftpack+1
  6028  001DE6  C016  F016         	movff	___ftpack@arg+2,?___ftpack+2
  6029  001DEA  0012               	return	
  6030  001DEC                     __end_of___ftpack:
  6031                           	opt stack 0
  6032                           tblptru	equ	0xFF8
  6033                           tblptrh	equ	0xFF7
  6034                           tblptrl	equ	0xFF6
  6035                           tablat	equ	0xFF5
  6036                           prodh	equ	0xFF4
  6037                           prodl	equ	0xFF3
  6038                           intcon	equ	0xFF2
  6039                           wreg	equ	0xFE8
  6040                           postinc2	equ	0xFDE
  6041                           postdec2	equ	0xFDD
  6042                           fsr2h	equ	0xFDA
  6043                           fsr2l	equ	0xFD9
  6044                           status	equ	0xFD8
  6045                           
  6046 ;; *************** function _ADC_Read *****************
  6047 ;; Defined at:
  6048 ;;		line 81 in file "main.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;  aux             2   21[COMRAM] unsigned int 
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  2   19[COMRAM] unsigned int 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6062 ;;      Params:         2       0       0       0       0       0       0       0       0
  6063 ;;      Locals:         2       0       0       0       0       0       0       0       0
  6064 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6065 ;;      Totals:         4       0       0       0       0       0       0       0       0
  6066 ;;Total ram usage:        4 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    1
  6069 ;; This function calls:
  6070 ;;		Nothing
  6071 ;; This function is called by:
  6072 ;;		_main
  6073 ;; This function uses a non-reentrant model
  6074 ;;
  6075                           
  6076                           	psect	text29
  6077  00239A                     __ptext29:
  6078                           	opt stack 0
  6079  00239A                     _ADC_Read:
  6080                           	opt stack 29
  6081                           
  6082                           ;main.c: 82: unsigned int aux = 0;
  6083                           
  6084                           ;incstack = 0
  6085  00239A  0E00               	movlw	0
  6086  00239C  6E17               	movwf	ADC_Read@aux+1,c
  6087  00239E  0E00               	movlw	0
  6088  0023A0  6E16               	movwf	ADC_Read@aux,c
  6089                           
  6090                           ;main.c: 83: ADCON0bits.GO_DONE = 1;
  6091  0023A2  82C2               	bsf	4034,1,c	;volatile
  6092  0023A4  B2C2               	btfsc	4034,1,c	;volatile
  6093  0023A6  D7FE               	goto	l63
  6094                           
  6095                           ;main.c: 86: return ADRES;
  6096  0023A8  CFC3 F014          	movff	4035,?_ADC_Read	;volatile
  6097  0023AC  CFC4 F015          	movff	4036,?_ADC_Read+1	;volatile
  6098  0023B0  0012               	return		;funcret
  6099  0023B2                     __end_of_ADC_Read:
  6100                           	opt stack 0
  6101                           tblptru	equ	0xFF8
  6102                           tblptrh	equ	0xFF7
  6103                           tblptrl	equ	0xFF6
  6104                           tablat	equ	0xFF5
  6105                           prodh	equ	0xFF4
  6106                           prodl	equ	0xFF3
  6107                           intcon	equ	0xFF2
  6108                           wreg	equ	0xFE8
  6109                           postinc2	equ	0xFDE
  6110                           postdec2	equ	0xFDD
  6111                           fsr2h	equ	0xFDA
  6112                           fsr2l	equ	0xFD9
  6113                           status	equ	0xFD8
  6114                           
  6115 ;; *************** function _tmr2 *****************
  6116 ;; Defined at:
  6117 ;;		line 131 in file "main.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;                  1    wreg      void 
  6124 ;; Registers used:
  6125 ;;		wreg, status,2, status,0
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/0
  6128 ;;		On exit  : 0/0
  6129 ;;		Unchanged: 0/0
  6130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6131 ;;      Params:         0       0       0       0       0       0       0       0       0
  6132 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6133 ;;      Temps:         19       0       0       0       0       0       0       0       0
  6134 ;;      Totals:        19       0       0       0       0       0       0       0       0
  6135 ;;Total ram usage:       19 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		Interrupt level 2
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           	psect	intcode
  6145  000008                     __pintcode:
  6146                           	opt stack 0
  6147  000008                     _tmr2:
  6148                           	opt stack 25
  6149                           
  6150                           ;incstack = 0
  6151  000008  824A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6152  00000A  ED40  F00E         	call	int_func,f	;refresh shadow registers
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           wreg	equ	0xFE8
  6161                           postinc2	equ	0xFDE
  6162                           postdec2	equ	0xFDD
  6163                           fsr2h	equ	0xFDA
  6164                           fsr2l	equ	0xFD9
  6165                           status	equ	0xFD8
  6166                           
  6167                           	psect	intcode_body
  6168  001C80                     __pintcode_body:
  6169                           	opt stack 25
  6170  001C80                     int_func:
  6171                           	opt stack 25
  6172  001C80  0006               	pop		; remove dummy address from shadow register refresh
  6173  001C82  CFFA F002          	movff	pclath,??_tmr2+1
  6174  001C86  CFFB F003          	movff	pclatu,??_tmr2+2
  6175  001C8A  CFE9 F004          	movff	fsr0l,??_tmr2+3
  6176  001C8E  CFEA F005          	movff	fsr0h,??_tmr2+4
  6177  001C92  CFE1 F006          	movff	fsr1l,??_tmr2+5
  6178  001C96  CFE2 F007          	movff	fsr1h,??_tmr2+6
  6179  001C9A  CFD9 F008          	movff	fsr2l,??_tmr2+7
  6180  001C9E  CFDA F009          	movff	fsr2h,??_tmr2+8
  6181  001CA2  CFF3 F00A          	movff	prodl,??_tmr2+9
  6182  001CA6  CFF4 F00B          	movff	prodh,??_tmr2+10
  6183  001CAA  CFF6 F00C          	movff	tblptrl,??_tmr2+11
  6184  001CAE  CFF7 F00D          	movff	tblptrh,??_tmr2+12
  6185  001CB2  CFF8 F00E          	movff	tblptru,??_tmr2+13
  6186  001CB6  CFF5 F00F          	movff	tablat,??_tmr2+14
  6187  001CBA  C04A  F010         	movff	btemp,??_tmr2+15
  6188  001CBE  C04B  F011         	movff	btemp+1,??_tmr2+16
  6189  001CC2  C04C  F012         	movff	btemp+2,??_tmr2+17
  6190  001CC6  C04D  F013         	movff	btemp+3,??_tmr2+18
  6191                           
  6192                           ;main.c: 132: if (TMR2IF) {
  6193  001CCA  A29E               	btfss	3998,1,c	;volatile
  6194  001CCC  D012               	goto	i2l80
  6195                           
  6196                           ;main.c: 133: TMR2IF = 0x00;
  6197  001CCE  929E               	bcf	3998,1,c	;volatile
  6198                           
  6199                           ;main.c: 134: if (PORTCbits.RC0 == 0) {
  6200  001CD0  B082               	btfsc	3970,0,c	;volatile
  6201  001CD2  D006               	goto	i2l79
  6202                           
  6203                           ;main.c: 135: PR2 = duty;
  6204  001CD4  C08B  FFCB         	movff	_duty,4043	;volatile
  6205                           
  6206                           ;main.c: 136: TMR2 = 0;
  6207  001CD8  0E00               	movlw	0
  6208  001CDA  6ECC               	movwf	4044,c	;volatile
  6209                           
  6210                           ;main.c: 137: PORTCbits.RC0 = 0x01;
  6211  001CDC  8082               	bsf	3970,0,c	;volatile
  6212                           
  6213                           ;main.c: 138: } else {
  6214  001CDE  D009               	goto	i2l80
  6215  001CE0                     i2l79:
  6216                           
  6217                           ;main.c: 139: PR2 = 255 - duty;
  6218  001CE0  0100               	movlb	0	; () banked
  6219  001CE2  518B               	movf	_duty& (0+255),w,b
  6220  001CE4  0800               	sublw	0
  6221  001CE6  6E01               	movwf	??_tmr2& (0+255),c
  6222  001CE8  0401               	decf	??_tmr2,w,c
  6223  001CEA  6ECB               	movwf	4043,c	;volatile
  6224                           
  6225                           ; BSR set to: 0
  6226                           ;main.c: 140: TMR2 = 0;
  6227  001CEC  0E00               	movlw	0
  6228  001CEE  6ECC               	movwf	4044,c	;volatile
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;main.c: 141: PORTCbits.RC0 = 0x00;
  6232  001CF0  9082               	bcf	3970,0,c	;volatile
  6233  001CF2                     i2l80:
  6234                           
  6235                           ; BSR set to: 0
  6236                           
  6237                           ; BSR set to: 0
  6238  001CF2  C013  F04D         	movff	??_tmr2+18,btemp+3
  6239  001CF6  C012  F04C         	movff	??_tmr2+17,btemp+2
  6240  001CFA  C011  F04B         	movff	??_tmr2+16,btemp+1
  6241  001CFE  C010  F04A         	movff	??_tmr2+15,btemp
  6242  001D02  C00F  FFF5         	movff	??_tmr2+14,tablat
  6243  001D06  C00E  FFF8         	movff	??_tmr2+13,tblptru
  6244  001D0A  C00D  FFF7         	movff	??_tmr2+12,tblptrh
  6245  001D0E  C00C  FFF6         	movff	??_tmr2+11,tblptrl
  6246  001D12  C00B  FFF4         	movff	??_tmr2+10,prodh
  6247  001D16  C00A  FFF3         	movff	??_tmr2+9,prodl
  6248  001D1A  C009  FFDA         	movff	??_tmr2+8,fsr2h
  6249  001D1E  C008  FFD9         	movff	??_tmr2+7,fsr2l
  6250  001D22  C007  FFE2         	movff	??_tmr2+6,fsr1h
  6251  001D26  C006  FFE1         	movff	??_tmr2+5,fsr1l
  6252  001D2A  C005  FFEA         	movff	??_tmr2+4,fsr0h
  6253  001D2E  C004  FFE9         	movff	??_tmr2+3,fsr0l
  6254  001D32  C003  FFFB         	movff	??_tmr2+2,pclatu
  6255  001D36  C002  FFFA         	movff	??_tmr2+1,pclath
  6256  001D3A  924A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6257  001D3C  0011               	retfie		f
  6258  001D3E                     __end_of_tmr2:
  6259                           	opt stack 0
  6260                           pclatu	equ	0xFFB
  6261                           pclath	equ	0xFFA
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           fsr0h	equ	0xFEA
  6270                           fsr0l	equ	0xFE9
  6271                           wreg	equ	0xFE8
  6272                           fsr1h	equ	0xFE2
  6273                           fsr1l	equ	0xFE1
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           pclatu	equ	0xFFB
  6280                           pclath	equ	0xFFA
  6281                           tblptru	equ	0xFF8
  6282                           tblptrh	equ	0xFF7
  6283                           tblptrl	equ	0xFF6
  6284                           tablat	equ	0xFF5
  6285                           prodh	equ	0xFF4
  6286                           prodl	equ	0xFF3
  6287                           intcon	equ	0xFF2
  6288                           fsr0h	equ	0xFEA
  6289                           fsr0l	equ	0xFE9
  6290                           wreg	equ	0xFE8
  6291                           fsr1h	equ	0xFE2
  6292                           fsr1l	equ	0xFE1
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299                           	psect	rparam
  6300  0000                     pclatu	equ	0xFFB
  6301                           pclath	equ	0xFFA
  6302                           tblptru	equ	0xFF8
  6303                           tblptrh	equ	0xFF7
  6304                           tblptrl	equ	0xFF6
  6305                           tablat	equ	0xFF5
  6306                           prodh	equ	0xFF4
  6307                           prodl	equ	0xFF3
  6308                           intcon	equ	0xFF2
  6309                           fsr0h	equ	0xFEA
  6310                           fsr0l	equ	0xFE9
  6311                           wreg	equ	0xFE8
  6312                           fsr1h	equ	0xFE2
  6313                           fsr1l	equ	0xFE1
  6314                           postinc2	equ	0xFDE
  6315                           postdec2	equ	0xFDD
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320                           	psect	temp
  6321  00004A                     btemp:
  6322                           	opt stack 0
  6323  00004A                     	ds	1
  6324  0000                     int$flags	set	btemp
  6325  0000                     wtemp6	set	btemp+1
  6326                           pclatu	equ	0xFFB
  6327                           pclath	equ	0xFFA
  6328                           tblptru	equ	0xFF8
  6329                           tblptrh	equ	0xFF7
  6330                           tblptrl	equ	0xFF6
  6331                           tablat	equ	0xFF5
  6332                           prodh	equ	0xFF4
  6333                           prodl	equ	0xFF3
  6334                           intcon	equ	0xFF2
  6335                           fsr0h	equ	0xFEA
  6336                           fsr0l	equ	0xFE9
  6337                           wreg	equ	0xFE8
  6338                           fsr1h	equ	0xFE2
  6339                           fsr1l	equ	0xFE1
  6340                           postinc2	equ	0xFDE
  6341                           postdec2	equ	0xFDD
  6342                           fsr2h	equ	0xFDA
  6343                           fsr2l	equ	0xFD9
  6344                           status	equ	0xFD8


Data Sizes:
    Strings     13
    Constant    118
    Data        0
    BSS         0
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     73      73
    BANK0           160     43      44
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    _printf->___ftadd
    _scale->___ftmul
    _putch->_escreve_lcd
    _escreve_lcd->_envia_byte_lcd
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _inicializa_lcd->_limpa_lcd
    _limpa_lcd->_envia_byte_lcd
    _caracter_inicio->_envia_byte_lcd
    _envia_byte_lcd->_envia_nibble_lcd
    ___lbtoft->___ftpack
    ___ftdiv->___lbtoft

Critical Paths under _tmr2 in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___ftsub
    ___ftsub->___ftadd

Critical Paths under _tmr2 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _tmr2 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tmr2 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _tmr2 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _tmr2 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _tmr2 in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _tmr2 in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _tmr2 in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   57622
                           _ADC_Read
                            ___ftdiv
                           ___lbtoft
                    _caracter_inicio
                     _inicializa_lcd
                          _limpa_lcd
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   49313
                                              9 BANK0     34    29      5
                            ___awdiv
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lbtoft (ARG)
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                7     4      3   11755
                                             54 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0     654
                                             24 COMRAM     1     1      0
                        _escreve_lcd
 ---------------------------------------------------------------------------------
 (3) _escreve_lcd                                          1     1      0     632
                                             23 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             19 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              10     7      3   11557
                                             54 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2743
                                             33 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    5085
                                             39 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1664
                                             19 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1820
                                             25 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     455
                                             19 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     598
                                             19 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2650
                                             27 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             19 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             19 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     480
                                             61 COMRAM     9     5      4
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    4120
                                              3 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3775
                                             64 COMRAM     9     3      6
                                              0 BANK0      3     3      0
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     121
                                             19 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     592
                                             19 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _inicializa_lcd                                       1     1      0    1308
                                             24 COMRAM     1     1      0
                     _envia_byte_lcd
                   _envia_nibble_lcd
                          _limpa_lcd
 ---------------------------------------------------------------------------------
 (1) _limpa_lcd                                            1     1      0     610
                                             23 COMRAM     1     1      0
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (1) _caracter_inicio                                      3     2      1     800
                                             23 COMRAM     3     2      1
                     _envia_byte_lcd
 ---------------------------------------------------------------------------------
 (4) _envia_byte_lcd                                       2     1      1     610
                                             21 COMRAM     2     1      1
                   _envia_nibble_lcd
 ---------------------------------------------------------------------------------
 (5) _envia_nibble_lcd                                     2     2      0      88
                                             19 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) ___lbtoft                                             4     1      3    2527
                                             27 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3063
                                             31 COMRAM    15     9      6
                           ___ftpack
                           ___lbtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2505
                                             19 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _ADC_Read                                             4     2      2       1
                                             19 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _tmr2                                                19    19      0       0
                                              0 COMRAM    19    19      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Read
   ___ftdiv
     ___ftpack
     ___lbtoft (ARG)
       ___ftpack
   ___lbtoft
     ___ftpack
   _caracter_inicio
     _envia_byte_lcd
       _envia_nibble_lcd
   _inicializa_lcd
     _envia_byte_lcd
       _envia_nibble_lcd
     _envia_nibble_lcd
     _limpa_lcd
       _envia_byte_lcd
         _envia_nibble_lcd
   _limpa_lcd
     _envia_byte_lcd
       _envia_nibble_lcd
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftdiv (ARG)
       ___ftpack
       ___lbtoft (ARG)
         ___ftpack
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lbtoft (ARG)
       ___ftpack
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit (ARG)
     _putch (ARG)
       _escreve_lcd
         _envia_byte_lcd
           _envia_nibble_lcd
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 _tmr2 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5E     49      49       1       77.7%
STACK                0      0       0       2        0.0%
DATA                 0      0      75       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     2B      2C       5       27.5%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
ABS                  0      0      75      20        0.0%
BIGRAM             7FF      0       0      21        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Sun Dec 10 09:18:46 2017

                       l70 1E30                         l63 23A4               ___awdiv@sign 001F  
              __CFG_BOR$ON 000000        ___wmul@multiplicand 0024                __CFG_BORV$3 000000  
             __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000  
             __CFG_CP3$OFF 000000               ___ftadd@exp1 0062               ___ftadd@exp2 0061  
             ___ftadd@sign 0060                        l103 22D6                        l104 22E2  
                      l132 1154                        l133 1080                        l126 149A  
                      l150 092E                        l143 0892                        l400 18A4  
                      l136 1130                        l160 0A3A                        l144 08A2  
                      l129 1566                        l137 1280                        l161 0AA0  
                      l153 092A                        l145 091C                        l402 18C2  
                      l154 0952                        l146 0906                        l403 1904  
                      l139 1330                        l163 0AC6                        l147 08CE  
                      l500 1C4E                        l412 1996                        l404 1934  
                      l156 0EC2                        l180 0C8C                        l164 0B06  
                      l413 198A                        l165 0BCE                        l157 0966  
                      l406 1972                        l510 184A                        l182 0D32  
                      l174 0C34                        l158 09A8                        l407 1962  
                      l511 183A                        l191 0EB8                        l183 0D24  
                      l432 1D66                        l600 21B0                        l504 1780  
                      l192 0EAA                        l168 0B76                        l433 1D5C  
                      l521 1EC6                        l601 21A4                        l185 0D56  
                      l522 1EF6                        l506 17AC                        l530 1AF6  
                      l194 0EDA                        l186 0D5A                        l435 1D9A  
                      l611 220A                        l507 17E6                        l371 1F68  
                      l531 1B28                        l195 0EF6                        l187 0D72  
                      l179 0D18                        l436 1D84                        l604 21D8  
                      l612 21FE                        l516 186E                        l508 180E  
                      l372 1F60                        l532 1B38                        l188 0E9E  
                      l605 21E6                        l517 1862                        l381 2136  
                      l197 0F16                        l189 0DC4                        l438 1DC2  
                      l390 2188                        l382 2142                        l534 1B50  
                      l198 0F30                        l439 1DB8                        l463 15FA  
                      l551 1A54                        l375 1F88                        l535 1B60  
                      l472 168A                        l560 1A94                        l552 1A44  
                      l376 1F92                        l368 1F3A                        l384 2158  
                      l528 1ACE                        l545 226C                        l377 1FA0  
                      l369 1F4A                        l385 2150                        l490 16FE  
                      l539 2330                        l491 172E                        l467 1624  
                      l388 2170                        l564 2378                        l477 1680  
                      l557 1A78                        l549 19DC                        l389 217A  
                      l486 16BE                        l478 1676                        l558 1A6C  
                      l590 1FD8                        l487 16B4                        l591 1FCC  
                      l496 1BC2                        l489 16E2                        l498 1BEA  
                      l594 200C                        l499 1C28                        l595 201A  
                      _GIE 007F97               __CFG_CPB$OFF 000000                        _PR2 000FCB  
             __CFG_CPD$OFF 000000               ___awmod@sign 0019                        wreg 000FE8  
             __CFG_LVP$OFF 000000               ___ftdiv@cntr 0029               ___ftdiv@sign 002E  
             __CFG_WDT$OFF 000000                       l2521 0D24                       l2477 0B50  
                     l2469 0B06                       l1769 1F22                       l2497 0C38  
                     STR_1 0877                       u2020 1874                       u2210 1A7E  
                     u1500 15EC                       u1430 1DCC                       u2151 19BE  
                     u1600 1692                       u2240 1FDC                       u2400 09E0  
                     u1530 1616                       u2170 19FA                       u2090 199C  
                     u1461 15B6                       u2405 09D6                       u1390 1D4E  
                     u1630 16C6                       u2270 21B4                       u1375 22A0  
                     u1471 15CC                       u2175 19F2                       u1376 22A2  
                     u1560 1654                       u2520 0C70                       u2440 0AD8  
                     u2450 0B18                       u1820 215C                       u2550 0D40  
                     u1671 1AB6                       u1760 1F6C                       u2560 0D50  
                     u2480 0B50                       u1691 1ADE               printf@tmpval 0081  
                     u2661 1BAA                       u1941 1764                       u2807 22BE  
                     u2681 1BD2                       u2817 20A2                       u1961 1790  
                     u2737 1E32                       u2747 20BA                       _PEIE 007F96  
                     u2757 20D0                       u2767 20E6                       u2777 20F8  
                     u2787 2390                       u2797 22A4                       i2l80 1CF2  
                     i2l79 1CE0                       _TMR2 000FCC               ?_escreve_lcd 0001  
   envia_byte_lcd@endereco 0017                       _main 1DEC               ___ftpack@arg 0014  
                     _duty 008B                       _tmr2 0008               ___ftpack@exp 0017  
                     fsr0h 000FEA                       fsr1h 000FE2                       fsr2h 000FDA  
                     fsr0l 000FE9                       fsr1l 000FE1                       fsr2l 000FD9  
                     btemp 004A           __end_of_ADC_Read 23B2                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___ftmul@cntr 0035    __end_of_caracter_inicio 22F4  
             ___param_bank 000000               ___ftmul@sign 0036               ___fttol@exp1 0065  
             ___fttol@lval 0061              __CFG_PLLDIV$1 000000             __CFG_CCP2MX$ON 000000  
                    ?_main 0001            __end_of___awdiv 1FAA                      _ADRES 000FC3  
                    ?_tmr2 0001            __end_of___ftadd 1754            __end_of___awmod 2192  
          __end_of___ftdiv 1C80            __end_of___ftneg 233E            __end_of___lldiv 202C  
          __end_of___ftmul 1B9A            ___awdiv@divisor 001C            __end_of___llmod 21F8  
          __end_of___ftsub 2296            __end_of___fttol 1AA6                      _T2CON 000FCA  
          ___awdiv@counter 001E                      _PORTA 000F80                      _PORTC 000F82  
                    _PORTD 000F83              __CFG_USBDIV$1 000000                      _TRISA 000F92  
                    _TRISC 000F94                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000               ___lltoft@exp 0024             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000    __size_of_envia_byte_lcd 0030             __CFG_EBTRB$OFF 000000  
          __end_of_dpowers 0829                      _scale 0F4C            __end_of_isdigit 2380  
            ___ftpack@sign 0018                      _putch 23CE                      pclath 000FFA  
                    tablat 000FF5                      status 000FD8                      wtemp6 004B  
           __CFG_ICPRT$OFF 000000            __initialization 23B2               __end_of_main 1E96  
             __end_of_tmr2 1D3E                     ??_main 004A              ___fttol@sign1 0060  
                   ??_tmr2 0001              __activetblptr 000002       __size_of__tdiv_to_l_ 0132  
                   _ADCON0 000FC2                     _ADCON1 000FC1                     _ADCON2 000FC0  
         ___llmod@dividend 0014                     ?_scale 0037           ___awdiv@dividend 001A  
                   ?_putch 0001           __end_of___ftpack 1DEC           __end_of___lbtoft 2362  
         __end_of___lltoft 2254                     _OSCCON 000FD3                     _TMR2IE 007CE9  
                   _TMR2IF 007CF1                     _TMR2ON 007E52    __size_of_inicializa_lcd 0076  
           __CFG_XINST$OFF 000000           __end_of__powers_ 0850           _envia_nibble_lcd 202C  
         ?_caracter_inicio 0018                     ___ftge 1E96                     ___wmul 22F4  
                ??___awdiv 001E                  ??___ftadd 0047             __CFG_STVREN$ON 000000  
                ??___awmod 0018                  ??___ftdiv 0026                  ??___ftneg 0017  
                ??___lldiv 001C                  ??___ftmul 002E                  ??___llmod 001C  
                ??___ftsub 004A                  ??___fttol 0042                     _fround 1354  
         ___awdiv@quotient 0020            ___awmod@divisor 0016            ___awmod@counter 0018  
                   _printf 0886      ___ftmul@f3_as_product 0032                  ??_isdigit 0014  
                ?_ADC_Read 0014               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8                 __accesstop 0060  
  __end_of__initialization 23B2         envia_byte_lcd@dado 0016            __CFG_PBADEN$OFF 000000  
               ___ftadd@f1 0041                 ___ftadd@f2 0044                 ___ftge@ff1 0014  
               ___ftge@ff2 0017       __size_of_escreve_lcd 000E              ___rparam_used 000001  
               ___ftdiv@f1 0020                 ___ftdiv@f2 0023                 ___ftdiv@f3 002A  
             escreve_lcd@c 0018                 ___ftneg@f1 0014                 ___lbtoft@c 001F  
               ___ftmul@f1 0028                 ___ftmul@f2 002B                 ___ftsub@f1 0063  
               ___ftsub@f2 0066                 ___fttol@f1 003E             __pcstackCOMRAM 0001  
               ___lltoft@c 001C              __end_of_scale 1354              __end_of_putch 23D8  
               __div_to_l_ 1886                 ??_ADC_Read 0016             _envia_byte_lcd 2296  
          __div_to_l_@exp1 001F            __div_to_l_@cntr 001E                    ??_scale 003A  
          __div_to_l_@quot 001A                    ??_putch 0019              __div_to_l_@f1 0014  
            __div_to_l_@f2 0017         __size_of_limpa_lcd 001A                    ?___ftge 0014  
                  ?___wmul 0022                    ?_fround 0037                  ?___ftpack 0014  
                ?___lbtoft 001C                    ?_printf 0069                  ?___lltoft 001C  
   __end_of_envia_byte_lcd 22C6            __CFG_VREGEN$OFF 000000             _inicializa_lcd 20AC  
        __end_of__npowers_ 0877                    __Hparam 0000       caracter_inicio@linha 0019  
                  __Lparam 0000            __size_of___ftge 0090                    ___awdiv 1F26  
                  ___ftadd 15A6                    ___awmod 2122                    ___ftdiv 1B9A  
                  ___ftneg 231A                    ___lldiv 1FAA            __size_of___wmul 0026  
                  ___ftmul 1AA6                    ___llmod 2192                    ___ftsub 2254  
                  ___fttol 19AE                 _fround$933 003D                 _fround$934 003A  
             __psmallconst 0800                    __pcinit 23B2                 ??___ftpack 0019  
               ??___lbtoft 001F            __size_of_fround 0252                    __ramtop 0800  
               ??___lltoft 0020                    __ptext0 1DEC                    __ptext1 0886  
                  __ptext2 0F4C                    __ptext3 23CE                    __ptext4 23C0  
                  __ptext5 2362                    __ptext6 1354                    __ptext7 22F4  
                  __ptext8 1AA6                    __ptext9 2122            __size_of_printf 06C6  
              ?__div_to_l_ 0014                    _dpowers 0801            ?_envia_byte_lcd 0016  
                  _isdigit 2362           ___awmod@dividend 0014          __end_of_limpa_lcd 239A  
 __end_of_envia_nibble_lcd 20AC     __end_of_inicializa_lcd 2122             __pintcode_body 1C80  
     end_of_initialization 23B2              __Lmediumconst 0000                    int_func 1C80  
          ___lldiv@divisor 0018            ___lldiv@counter 0020                    printf@c 008A  
                  printf@f 0069                    postdec2 000FDD                    postinc2 000FDE  
           __tdiv_to_l_@f1 0014             __tdiv_to_l_@f2 0017                 _printf$936 0074  
            ??__tdiv_to_l_ 001A                  _PORTCbits 000F82                  _PORTDbits 000F83  
        __size_of_ADC_Read 0018            ?_inicializa_lcd 0001                ___ftdiv@exp 002D  
      __size_of__div_to_l_ 0128                ___ftmul@exp 0031             __end_of___ftge 1F26  
           __end_of___wmul 231A             __end_of_fround 15A6   __size_of_caracter_inicio 002E  
           __end_of_printf 0F4C        start_initialization 23B2        __end_of__tdiv_to_l_ 1886  
            ??_escreve_lcd 0018            ___llmod@divisor 0018            ___llmod@counter 001C  
   caracter_inicio@posicao 001A                   ??___ftge 001A                   ??___wmul 0026  
         __CFG_LPT1OSC$OFF 000000                   ??_fround 003A                   ??_printf 006E  
               fround@prec 0040          __size_of___ftpack 00AE          __size_of___lbtoft 0024  
        __size_of___lltoft 005C              __pcstackBANK0 0060                  __pnvBANK0 008B  
      __end_of_escreve_lcd 23CE                  __pintcode 0008                   ?___awdiv 001A  
                 ?___ftadd 0041                   ?___awmod 0014                   ?___ftdiv 0020  
                 ?___ftneg 0014                   ?___lldiv 0014                   ?___ftmul 0028  
                 ?___llmod 0014                   ?___ftsub 0063                  __npowers_ 0850  
                 ?___fttol 003E           ??_envia_byte_lcd 0017                __tdiv_to_l_ 1754  
             ??__div_to_l_ 001A                __smallconst 0800                   ?_isdigit 0001  
                 _ADC_Read 239A                  _scale$935 003A                ADC_Read@aux 0016  
        ?_envia_nibble_lcd 0001          ??_caracter_inicio 0019             __size_of_scale 0408  
                _limpa_lcd 2380             __size_of_putch 000A         ??_envia_nibble_lcd 0014  
           ___wmul@product 0026         __end_of__div_to_l_ 19AE           __CFG_WDTPS$32768 000000  
               _ADCON0bits 000FC2          ___wmul@multiplier 0022                 printf@flag 0079  
               printf@fval 0087                 printf@prec 0085           ??_inicializa_lcd 0019  
               ?_limpa_lcd 0001                _escreve_lcd 23C0      caracter_inicio@coluna 0018  
                 __Hrparam 0000                   __Lrparam 0000           __size_of___awdiv 0084  
         __size_of___ftadd 01AE           __size_of___awmod 0070           __size_of___ftdiv 00E6  
         __size_of___ftneg 0024           __size_of___lldiv 0082           __size_of___ftmul 00F4  
         __size_of___llmod 0066           __size_of___ftsub 0042           __size_of___fttol 00F8  
                 ___ftpack 1D3E                   ___lbtoft 233E                   ___lltoft 21F8  
              _isdigit$595 0015           __size_of_isdigit 001E                   __ptext10 1F26  
                 __ptext11 1754                   __ptext20 1E96                   __ptext12 1886  
                 __ptext21 20AC                   __ptext13 21F8                   __ptext22 2380  
                 __ptext14 2192                   __ptext23 22C6                   __ptext15 1FAA  
                 __ptext24 2296                   __ptext16 19AE                   __ptext25 202C  
                 __ptext17 2254                   __ptext26 233E                   __ptext18 15A6  
                 __ptext27 1B9A                   __ptext19 231A                   __ptext28 1D3E  
                 __ptext29 239A                   __powers_ 0829              __size_of_main 00AA  
            __size_of_tmr2 1D36                   int$flags 004A                  printf@exp 007F  
                printf@val 007B      __CFG_CPUDIV$OSC1_PLL2 000000                  putch@data 0019  
                 isdigit@c 0016                   scale@scl 003D                ??_limpa_lcd 0018  
                 intlevel2 0000           __tdiv_to_l_@exp1 0022           __tdiv_to_l_@cntr 0021  
         __tdiv_to_l_@quot 001D           ___lldiv@dividend 0014                   printf@ap 0077  
          _caracter_inicio 22C6               ?__tdiv_to_l_ 0014        __CFG_FOSC$INTOSC_HS 000000  
     envia_nibble_lcd@dado 0015           ___lldiv@quotient 001C  __size_of_envia_nibble_lcd 0080  
